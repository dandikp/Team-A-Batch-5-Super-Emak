!function(t){"use strict";var e={objectMaxDepth:5};function n(t){if(!H(t))return e;U(t.objectMaxDepth)&&(e.objectMaxDepth=r(t.objectMaxDepth)?t.objectMaxDepth:NaN)}function r(t){return L(t)&&t>0}function i(t,n){return n=n||Error,function(){var r,i,o=arguments[0],a=arguments[1],s="["+(t?t+":":"")+o+"] ",u=ht(arguments,2).map(function(t){return Jt(t,e.objectMaxDepth)});for(s+=a.replace(/\{\d+\}/g,function(t){var e=+t.slice(1,-1);return e<u.length?u[e]:t}),s+="\nhttp://errors.angularjs.org/1.6.8/"+(t?t+"/":"")+o,i=0,r="?";i<u.length;i++,r="&")s+=r+"p"+i+"="+encodeURIComponent(u[i]);return new n(s)}}var o=/^\/(.+)\/([a-z]*)$/,a="validity",s=Object.prototype.hasOwnProperty,u=function(t){return F(t)?t.toLowerCase():t},c=function(t){return F(t)?t.toUpperCase():t};"i"!=="I".toLowerCase()&&(u=function(t){return F(t)?t.replace(/[A-Z]/g,function(t){return String.fromCharCode(32|t.charCodeAt(0))}):t},c=function(t){return F(t)?t.replace(/[a-z]/g,function(t){return String.fromCharCode(-33&t.charCodeAt(0))}):t});var l,f,h,p,d=[].slice,v=[].splice,$=[].push,m=Object.prototype.toString,g=Object.getPrototypeOf,y=i("ng"),w=t.angular||(t.angular={}),b=0;function S(t){if(null==t||K(t))return!1;if(z(t)||F(t)||f&&t instanceof f)return!0;var e="length"in Object(t)&&t.length;return L(e)&&(e>=0&&(e-1 in t||t instanceof Array)||"function"==typeof t.item)}function E(t,e,n){var r,i;if(t)if(G(t))for(r in t)"prototype"!==r&&"length"!==r&&"name"!==r&&t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else if(z(t)||S(t)){var o="object"!=typeof t;for(r=0,i=t.length;r<i;r++)(o||r in t)&&e.call(n,t[r],r,t)}else if(t.forEach&&t.forEach!==E)t.forEach(e,n,t);else if(q(t))for(r in t)e.call(n,t[r],r,t);else if("function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else for(r in t)s.call(t,r)&&e.call(n,t[r],r,t);return t}function x(t,e,n){for(var r=Object.keys(t).sort(),i=0;i<r.length;i++)e.call(n,t[r[i]],r[i]);return r}function C(t){return function(e,n){t(n,e)}}function _(){return++b}function k(t,e){e?t.$$hashKey=e:delete t.$$hashKey}function R(t,e,n){for(var r=t.$$hashKey,i=0,o=e.length;i<o;++i){var a=e[i];if(H(a)||G(a))for(var s=Object.keys(a),u=0,c=s.length;u<c;u++){var l=s[u],f=a[l];n&&H(f)?B(f)?t[l]=new Date(f.valueOf()):J(f)?t[l]=new RegExp(f):f.nodeName?t[l]=f.cloneNode(!0):nt(f)?t[l]=f.clone():(H(t[l])||(t[l]=z(f)?[]:{}),R(t[l],[f],!0)):t[l]=f}}return k(t,r),t}function O(t){return R(t,d.call(arguments,1),!1)}function A(t){return R(t,d.call(arguments,1),!0)}function T(t){return parseInt(t,10)}l=t.document.documentMode;var P=Number.isNaN||function(t){return t!=t};function V(t,e){return O(Object.create(t),e)}function j(){}function I(t){return t}function M(t){return function(){return t}}function N(t){return G(t.toString)&&t.toString!==m}function D(t){return void 0===t}function U(t){return void 0!==t}function H(t){return null!==t&&"object"==typeof t}function q(t){return null!==t&&"object"==typeof t&&!g(t)}function F(t){return"string"==typeof t}function L(t){return"number"==typeof t}function B(t){return"[object Date]"===m.call(t)}j.$inject=[],I.$inject=[];var z=Array.isArray;function W(t){switch(m.call(t)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return t instanceof Error}}function G(t){return"function"==typeof t}function J(t){return"[object RegExp]"===m.call(t)}function K(t){return t&&t.window===t}function Z(t){return t&&t.$evalAsync&&t.$watch}function Y(t){return"boolean"==typeof t}function Q(t){return t&&G(t.then)}var X=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;var tt=function(t){return F(t)?t.trim():t},et=function(t){return t.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};function nt(t){return!(!t||!(t.nodeName||t.prop&&t.attr&&t.find))}function rt(t){return u(t.nodeName||t[0]&&t[0].nodeName)}function it(t,e){return-1!==Array.prototype.indexOf.call(t,e)}function ot(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),n}function at(t,e,n){var i,o,a=[],u=[];if(n=r(n)?n:NaN,e){if((o=e)&&L(o.length)&&X.test(m.call(o))||(i=e,"[object ArrayBuffer]"===m.call(i)))throw y("cpta","Can't copy! TypedArray destination cannot be mutated.");if(t===e)throw y("cpi","Can't copy! Source and destination are identical.");return z(e)?e.length=0:E(e,function(t,n){"$$hashKey"!==n&&delete e[n]}),a.push(t),u.push(e),c(t,e,n)}return l(t,n);function c(t,e,n){if(--n<0)return"...";var r,i=e.$$hashKey;if(z(t))for(var o=0,a=t.length;o<a;o++)e.push(l(t[o],n));else if(q(t))for(r in t)e[r]=l(t[r],n);else if(t&&"function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&(e[r]=l(t[r],n));else for(r in t)s.call(t,r)&&(e[r]=l(t[r],n));return k(e,i),e}function l(t,e){if(!H(t))return t;var n=a.indexOf(t);if(-1!==n)return u[n];if(K(t)||Z(t))throw y("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,i=function(t){switch(m.call(t)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new t.constructor(l(t.buffer),t.byteOffset,t.length);case"[object ArrayBuffer]":if(!t.slice){var e=new ArrayBuffer(t.byteLength);return new Uint8Array(e).set(new Uint8Array(t)),e}return t.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new t.constructor(t.valueOf());case"[object RegExp]":var n=new RegExp(t.source,t.toString().match(/[^/]*$/)[0]);return n.lastIndex=t.lastIndex,n;case"[object Blob]":return new t.constructor([t],{type:t.type})}if(G(t.cloneNode))return t.cloneNode(!0)}(t);return void 0===i&&(i=z(t)?[]:Object.create(g(t)),r=!0),a.push(t),u.push(i),r?c(t,i,e):i}}function st(t,e){return t===e||t!=t&&e!=e}function ut(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!=t&&e!=e)return!0;var n,r,i,o=typeof t;if(o===typeof e&&"object"===o){if(!z(t)){if(B(t))return!!B(e)&&st(t.getTime(),e.getTime());if(J(t))return!!J(e)&&t.toString()===e.toString();if(Z(t)||Z(e)||K(t)||K(e)||z(e)||B(e)||J(e))return!1;for(r in i=Ht(),t)if("$"!==r.charAt(0)&&!G(t[r])){if(!ut(t[r],e[r]))return!1;i[r]=!0}for(r in e)if(!(r in i)&&"$"!==r.charAt(0)&&U(e[r])&&!G(e[r]))return!1;return!0}if(!z(e))return!1;if((n=t.length)===e.length){for(r=0;r<n;r++)if(!ut(t[r],e[r]))return!1;return!0}}return!1}var ct=function(){if(!U(ct.rules)){var e=t.document.querySelector("[ng-csp]")||t.document.querySelector("[data-ng-csp]");if(e){var n=e.getAttribute("ng-csp")||e.getAttribute("data-ng-csp");ct.rules={noUnsafeEval:!n||-1!==n.indexOf("no-unsafe-eval"),noInlineStyle:!n||-1!==n.indexOf("no-inline-style")}}else ct.rules={noUnsafeEval:function(){try{return new Function(""),!1}catch(t){return!0}}(),noInlineStyle:!1}}return ct.rules},lt=function(){if(U(lt.name_))return lt.name_;var e,n,r,i,o=_t.length;for(n=0;n<o;++n)if(r=_t[n],e=t.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=e.getAttribute(r+"jq");break}return lt.name_=i};function ft(t,e,n){return t.concat(d.call(e,n))}function ht(t,e){return d.call(t,e||0)}function pt(t,e){var n=arguments.length>2?ht(arguments,2):[];return!G(e)||e instanceof RegExp?e:n.length?function(){return arguments.length?e.apply(t,ft(n,arguments,0)):e.apply(t,n)}:function(){return arguments.length?e.apply(t,arguments):e.call(t)}}function dt(e,n){var r=n;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?r=void 0:K(n)?r="$WINDOW":n&&t.document===n?r="$DOCUMENT":Z(n)&&(r="$SCOPE"),r}function vt(t,e){if(!D(t))return L(e)||(e=e?2:null),JSON.stringify(t,dt,e)}function $t(t){return F(t)?JSON.parse(t):t}var mt=/:/g;function gt(t,e){t=t.replace(mt,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+t)/6e4;return P(n)?e:n}function yt(t,e,n){n=n?-1:1;var r,i,o=t.getTimezoneOffset(),a=gt(e,o);return r=t,i=n*(a-o),(r=new Date(r.getTime())).setMinutes(r.getMinutes()+i),r}function wt(t){t=f(t).clone().empty();var e=f("<div>").append(t).html();try{return t[0].nodeType===Lt?u(e):e.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(t,e){return"<"+u(e)})}catch(t){return u(e)}}function bt(t){try{return decodeURIComponent(t)}catch(t){}}function St(t){var e={};return E((t||"").split("&"),function(t){var n,r,i;t&&(r=t=t.replace(/\+/g,"%20"),-1!==(n=t.indexOf("="))&&(r=t.substring(0,n),i=t.substring(n+1)),U(r=bt(r))&&(i=!U(i)||bt(i),s.call(e,r)?z(e[r])?e[r].push(i):e[r]=[e[r],i]:e[r]=i))}),e}function Et(t){var e=[];return E(t,function(t,n){z(t)?E(t,function(t){e.push(Ct(n,!0)+(!0===t?"":"="+Ct(t,!0)))}):e.push(Ct(n,!0)+(!0===t?"":"="+Ct(t,!0)))}),e.length?e.join("&"):""}function xt(t){return Ct(t,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function Ct(t,e){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,e?"%20":"+")}var _t=["ng-","data-ng-","ng:","x-ng-"];var kt=function(e){var n=e.currentScript;if(!n)return!0;if(!(n instanceof t.HTMLScriptElement||n instanceof t.SVGScriptElement))return!1;var r=n.attributes;return[r.getNamedItem("src"),r.getNamedItem("href"),r.getNamedItem("xlink:href")].every(function(t){if(!t)return!0;if(!t.value)return!1;var n=e.createElement("a");if(n.href=t.value,e.location.origin===n.origin)return!0;switch(n.protocol){case"http:":case"https:":case"ftp:":case"blob:":case"file:":case"data:":return!0;default:return!1}})}(t.document);function Rt(e,n){var r,i,o={};if(E(_t,function(t){var n=t+"app";!r&&e.hasAttribute&&e.hasAttribute(n)&&(r=e,i=e.getAttribute(n))}),E(_t,function(t){var n,o=t+"app";!r&&(n=e.querySelector("["+o.replace(":","\\:")+"]"))&&(r=n,i=n.getAttribute(o))}),r){if(!kt)return void t.console.error("Angular: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match.");o.strictDi=null!==function(t,e){var n,r,i=_t.length;for(r=0;r<i;++r)if(n=_t[r]+e,F(n=t.getAttribute(n)))return n;return null}(r,"strict-di"),n(r,i?[i]:[],o)}}function Ot(e,n,r){H(r)||(r={});r=O({strictDi:!1},r);var i=function(){if((e=f(e)).injector()){var i=e[0]===t.document?"document":wt(e);throw y("btstrpd","App already bootstrapped with this element '{0}'",i.replace(/</,"&lt;").replace(/>/,"&gt;"))}(n=n||[]).unshift(["$provide",function(t){t.value("$rootElement",e)}]),r.debugInfoEnabled&&n.push(["$compileProvider",function(t){t.debugInfoEnabled(!0)}]),n.unshift("ng");var o=Ze(n,r.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(t,e,n,r){t.$apply(function(){e.data("$injector",r),n(e)(t)})}]),o},o=/^NG_ENABLE_DEBUG_INFO!/,a=/^NG_DEFER_BOOTSTRAP!/;if(t&&o.test(t.name)&&(r.debugInfoEnabled=!0,t.name=t.name.replace(o,"")),t&&!a.test(t.name))return i();t.name=t.name.replace(a,""),w.resumeBootstrap=function(t){return E(t,function(t){n.push(t)}),i()},G(w.resumeDeferredBootstrap)&&w.resumeDeferredBootstrap()}function At(){t.name="NG_ENABLE_DEBUG_INFO!"+t.name,t.location.reload()}function Tt(t){var e=w.element(t).injector();if(!e)throw y("test","no injector found for element argument to getTestability");return e.get("$$testability")}var Pt=/[A-Z]/g;function Vt(t,e){return e=e||"_",t.replace(Pt,function(t,n){return(n?e:"")+t.toLowerCase()})}var jt=!1;function It(t,e,n){if(!t)throw y("areq","Argument '{0}' is {1}",e||"?",n||"required");return t}function Mt(t,e,n){return n&&z(t)&&(t=t[t.length-1]),It(G(t),e,"not a function, got "+(t&&"object"==typeof t?t.constructor.name||"Object":typeof t)),t}function Nt(t,e){if("hasOwnProperty"===t)throw y("badname","hasOwnProperty is not a valid {0} name",e)}function Dt(t,e,n){if(!e)return t;for(var r,i=e.split("."),o=t,a=i.length,s=0;s<a;s++)r=i[s],t&&(t=(o=t)[r]);return!n&&G(t)?pt(o,t):t}function Ut(t){for(var e,n=t[0],r=t[t.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(e||t[i]!==n)&&(e||(e=f(d.call(t,0,i))),e.push(n));return e||t}function Ht(){return Object.create(null)}function qt(t){if(null==t)return"";switch(typeof t){case"string":break;case"number":t=""+t;break;default:t=!N(t)||z(t)||B(t)?vt(t):t.toString()}return t}var Ft=1,Lt=3,Bt=8,zt=9,Wt=11;function Gt(t,e){if(z(t)){e=e||[];for(var n=0,r=t.length;n<r;n++)e[n]=t[n]}else if(H(t))for(var i in e=e||{},t)"$"===i.charAt(0)&&"$"===i.charAt(1)||(e[i]=t[i]);return e||t}function Jt(t,e){return"function"==typeof t?t.toString().replace(/ \{[\s\S]*$/,""):D(t)?"undefined":"string"!=typeof t?(n=t,o=[],r(i=e)&&(n=w.copy(n,null,i)),JSON.stringify(n,function(t,e){if(H(e=dt(t,e))){if(o.indexOf(e)>=0)return"...";o.push(e)}return e})):t;var n,i,o}var Kt={full:"1.6.8",major:1,minor:6,dot:8,codeName:"beneficial-tincture"};pe.expando="ng339";var Zt=pe.cache={},Yt=1;pe._data=function(t){return this.cache[t[this.expando]]||{}};var Qt=/-([a-z])/g,Xt=/^-ms-/,te={mouseleave:"mouseout",mouseenter:"mouseover"},ee=i("jqLite");function ne(t,e){return e.toUpperCase()}function re(t){return t.replace(Qt,ne)}var ie=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,oe=/<|&#?\w+;/,ae=/<([\w:-]+)/,se=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,ue={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ce(t){return!oe.test(t)}function le(t){var e=t.nodeType;return e===Ft||!e||e===zt}function fe(t,e){var n,r,i,o,a=e.createDocumentFragment(),s=[];if(ce(t))s.push(e.createTextNode(t));else{for(n=a.appendChild(e.createElement("div")),r=(ae.exec(t)||["",""])[1].toLowerCase(),i=ue[r]||ue._default,n.innerHTML=i[1]+t.replace(se,"<$1></$2>")+i[2],o=i[0];o--;)n=n.lastChild;s=ft(s,n.childNodes),(n=a.firstChild).textContent=""}return a.textContent="",a.innerHTML="",E(s,function(t){a.appendChild(t)}),a}ue.optgroup=ue.option,ue.tbody=ue.tfoot=ue.colgroup=ue.caption=ue.thead,ue.th=ue.td;var he=t.Node.prototype.contains||function(t){return!!(16&this.compareDocumentPosition(t))};function pe(e){if(e instanceof pe)return e;var n,r,i,o;if(F(e)&&(e=tt(e),n=!0),!(this instanceof pe)){if(n&&"<"!==e.charAt(0))throw ee("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new pe(e)}n?Ee(this,(r=e,i=i||t.document,(o=ie.exec(r))?[i.createElement(o[1])]:(o=fe(r,i))?o.childNodes:[])):G(e)?Re(e):Ee(this,e)}function de(t){return t.cloneNode(!0)}function ve(t,e){!e&&le(t)&&f.cleanData([t]),t.querySelectorAll&&f.cleanData(t.querySelectorAll("*"))}function $e(t,e,n,r){if(U(r))throw ee("offargs","jqLite#off() does not support the `selector` argument");var i=ge(t),o=i&&i.events,a=i&&i.handle;if(a)if(e){var s=function(e){var r=o[e];U(n)&&ot(r||[],n),U(n)&&r&&r.length>0||(t.removeEventListener(e,a),delete o[e])};E(e.split(" "),function(t){s(t),te[t]&&s(te[t])})}else for(e in o)"$destroy"!==e&&t.removeEventListener(e,a),delete o[e]}function me(t,e){var n=t.ng339,r=n&&Zt[n];if(r){if(e)return void delete r.data[e];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),$e(t)),delete Zt[n],t.ng339=void 0}}function ge(t,e){var n=t.ng339,r=n&&Zt[n];return e&&!r&&(t.ng339=n=++Yt,r=Zt[n]={events:{},data:{},handle:void 0}),r}function ye(t,e,n){if(le(t)){var r,i=U(n),o=!i&&e&&!H(e),a=!e,s=ge(t,!o),u=s&&s.data;if(i)u[re(e)]=n;else{if(a)return u;if(o)return u&&u[re(e)];for(r in e)u[re(r)]=e[r]}}}function we(t,e){return!!t.getAttribute&&(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+e+" ")>-1}function be(t,e){if(e&&t.setAttribute){var n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),r=n;E(e.split(" "),function(t){t=tt(t),r=r.replace(" "+t+" "," ")}),r!==n&&t.setAttribute("class",tt(r))}}function Se(t,e){if(e&&t.setAttribute){var n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),r=n;E(e.split(" "),function(t){t=tt(t),-1===r.indexOf(" "+t+" ")&&(r+=t+" ")}),r!==n&&t.setAttribute("class",tt(r))}}function Ee(t,e){if(e)if(e.nodeType)t[t.length++]=e;else{var n=e.length;if("number"==typeof n&&e.window!==e){if(n)for(var r=0;r<n;r++)t[t.length++]=e[r]}else t[t.length++]=e}}function xe(t,e){return Ce(t,"$"+(e||"ngController")+"Controller")}function Ce(t,e,n){t.nodeType===zt&&(t=t.documentElement);for(var r=z(e)?e:[e];t;){for(var i=0,o=r.length;i<o;i++)if(U(n=f.data(t,r[i])))return n;t=t.parentNode||t.nodeType===Wt&&t.host}}function _e(t){for(ve(t,!0);t.firstChild;)t.removeChild(t.firstChild)}function ke(t,e){e||ve(t);var n=t.parentNode;n&&n.removeChild(t)}function Re(e){function n(){t.document.removeEventListener("DOMContentLoaded",n),t.removeEventListener("load",n),e()}"complete"===t.document.readyState?t.setTimeout(e):(t.document.addEventListener("DOMContentLoaded",n),t.addEventListener("load",n))}var Oe=pe.prototype={ready:Re,toString:function(){var t=[];return E(this,function(e){t.push(""+e)}),"["+t.join(", ")+"]"},eq:function(t){return f(t>=0?this[t]:this[this.length+t])},length:0,push:$,sort:[].sort,splice:[].splice},Ae={};E("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(t){Ae[u(t)]=t});var Te={};E("input,select,option,textarea,button,form,details".split(","),function(t){Te[t]=!0});var Pe={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern",ngStep:"step"};function Ve(t,e){var n=Ae[e.toLowerCase()];return n&&Te[rt(t)]&&n}function je(t,e,n){n.call(t,e)}function Ie(t,e,n){var r=e.relatedTarget;r&&(r===t||he.call(t,r))||n.call(t,e)}function Me(){this.$get=function(){return O(pe,{hasClass:function(t,e){return t.attr&&(t=t[0]),we(t,e)},addClass:function(t,e){return t.attr&&(t=t[0]),Se(t,e)},removeClass:function(t,e){return t.attr&&(t=t[0]),be(t,e)}})}}function Ne(t,e){var n=t&&t.$$hashKey;if(n)return"function"==typeof n&&(n=t.$$hashKey()),n;var r=typeof t;return n="function"===r||"object"===r&&null!==t?t.$$hashKey=r+":"+(e||_)():r+":"+t}E({data:ye,removeData:me,hasData:function(t){for(var e in Zt[t.ng339])return!0;return!1},cleanData:function(t){for(var e=0,n=t.length;e<n;e++)me(t[e])}},function(t,e){pe[e]=t}),E({data:ye,inheritedData:Ce,scope:function(t){return f.data(t,"$scope")||Ce(t.parentNode||t,["$isolateScope","$scope"])},isolateScope:function(t){return f.data(t,"$isolateScope")||f.data(t,"$isolateScopeNoTemplate")},controller:xe,injector:function(t){return Ce(t,"$injector")},removeAttr:function(t,e){t.removeAttribute(e)},hasClass:we,css:function(t,e,n){if(e=re(e.replace(Xt,"ms-")),!U(n))return t.style[e];t.style[e]=n},attr:function(t,e,n){var r,i=t.nodeType;if(i!==Lt&&2!==i&&i!==Bt&&t.getAttribute){var o=u(e),a=Ae[o];if(!U(n))return r=t.getAttribute(e),a&&null!==r&&(r=o),null===r?void 0:r;null===n||!1===n&&a?t.removeAttribute(e):t.setAttribute(e,a?o:n)}},prop:function(t,e,n){if(!U(n))return t[e];t[e]=n},text:function(){return t.$dv="",t;function t(t,e){if(D(e)){var n=t.nodeType;return n===Ft||n===Lt?t.textContent:""}t.textContent=e}}(),val:function(t,e){if(D(e)){if(t.multiple&&"select"===rt(t)){var n=[];return E(t.options,function(t){t.selected&&n.push(t.value||t.text)}),n}return t.value}t.value=e},html:function(t,e){if(D(e))return t.innerHTML;ve(t,!0),t.innerHTML=e},empty:_e},function(t,e){pe.prototype[e]=function(e,n){var r,i,o=this.length;if(t!==_e&&D(2===t.length&&t!==we&&t!==xe?e:n)){if(H(e)){for(r=0;r<o;r++)if(t===ye)t(this[r],e);else for(i in e)t(this[r],i,e[i]);return this}for(var a=t.$dv,s=D(a)?Math.min(o,1):o,u=0;u<s;u++){var c=t(this[u],e,n);a=a?a+c:c}return a}for(r=0;r<o;r++)t(this[r],e,n);return this}}),E({removeData:me,on:function(t,e,n,r){if(U(r))throw ee("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(le(t)){var i,o,a,s=ge(t,!0),u=s.events,c=s.handle;c||(c=s.handle=(o=u,(a=function(t,e){t.isDefaultPrevented=function(){return t.defaultPrevented};var n=o[e||t.type],r=n?n.length:0;if(r){if(D(t.immediatePropagationStopped)){var a=t.stopImmediatePropagation;t.stopImmediatePropagation=function(){t.immediatePropagationStopped=!0,t.stopPropagation&&t.stopPropagation(),a&&a.call(t)}}t.isImmediatePropagationStopped=function(){return!0===t.immediatePropagationStopped};var s=n.specialHandlerWrapper||je;r>1&&(n=Gt(n));for(var u=0;u<r;u++)t.isImmediatePropagationStopped()||s(i,t,n[u])}}).elem=i=t,a));for(var l=e.indexOf(" ")>=0?e.split(" "):[e],f=l.length,h=function(e,r,i){var o=u[e];o||((o=u[e]=[]).specialHandlerWrapper=r,"$destroy"===e||i||t.addEventListener(e,c)),o.push(n)};f--;)e=l[f],te[e]?(h(te[e],Ie),h(e,void 0,!0)):h(e)}},off:$e,one:function(t,e,n){(t=f(t)).on(e,function r(){t.off(e,n),t.off(e,r)}),t.on(e,n)},replaceWith:function(t,e){var n,r=t.parentNode;ve(t),E(new pe(e),function(e){n?r.insertBefore(e,n.nextSibling):r.replaceChild(e,t),n=e})},children:function(t){var e=[];return E(t.childNodes,function(t){t.nodeType===Ft&&e.push(t)}),e},contents:function(t){return t.contentDocument||t.childNodes||[]},append:function(t,e){var n=t.nodeType;if(n===Ft||n===Wt)for(var r=0,i=(e=new pe(e)).length;r<i;r++){var o=e[r];t.appendChild(o)}},prepend:function(t,e){if(t.nodeType===Ft){var n=t.firstChild;E(new pe(e),function(e){t.insertBefore(e,n)})}},wrap:function(t,e){var n,r,i;n=t,r=f(e).eq(0).clone()[0],(i=n.parentNode)&&i.replaceChild(r,n),r.appendChild(n)},remove:ke,detach:function(t){ke(t,!0)},after:function(t,e){var n=t,r=t.parentNode;if(r)for(var i=0,o=(e=new pe(e)).length;i<o;i++){var a=e[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Se,removeClass:be,toggleClass:function(t,e,n){e&&E(e.split(" "),function(e){var r=n;D(r)&&(r=!we(t,e)),(r?Se:be)(t,e)})},parent:function(t){var e=t.parentNode;return e&&e.nodeType!==Wt?e:null},next:function(t){return t.nextElementSibling},find:function(t,e){return t.getElementsByTagName?t.getElementsByTagName(e):[]},clone:de,triggerHandler:function(t,e,n){var r,i,o,a=e.type||e,s=ge(t),u=s&&s.events,c=u&&u[a];c&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:j,type:a,target:t},e.type&&(r=O(r,e)),i=Gt(c),o=n?[r].concat(n):[r],E(i,function(e){r.isImmediatePropagationStopped()||e.apply(t,o)}))}},function(t,e){pe.prototype[e]=function(e,n,r){for(var i,o=0,a=this.length;o<a;o++)D(i)?U(i=t(this[o],e,n,r))&&(i=f(i)):Ee(i,t(this[o],e,n,r));return U(i)?i:this}}),pe.prototype.bind=pe.prototype.on,pe.prototype.unbind=pe.prototype.off;var De=Object.create(null);function Ue(){this._keys=[],this._values=[],this._lastKey=NaN,this._lastIndex=-1}Ue.prototype={_idx:function(t){return t===this._lastKey?this._lastIndex:(this._lastKey=t,this._lastIndex=this._keys.indexOf(t),this._lastIndex)},_transformKey:function(t){return P(t)?De:t},get:function(t){t=this._transformKey(t);var e=this._idx(t);if(-1!==e)return this._values[e]},set:function(t,e){t=this._transformKey(t);var n=this._idx(t);-1===n&&(n=this._lastIndex=this._keys.length),this._keys[n]=t,this._values[n]=e},delete:function(t){t=this._transformKey(t);var e=this._idx(t);return-1!==e&&(this._keys.splice(e,1),this._values.splice(e,1),this._lastKey=NaN,this._lastIndex=-1,!0)}};var He=Ue,qe=[function(){this.$get=[function(){return He}]}],Fe=/^([^(]+?)=>/,Le=/^[^(]*\(\s*([^)]*)\)/m,Be=/,/,ze=/^\s*(_?)(\S+?)\1\s*$/,We=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Ge=i("$injector");function Je(t){return Function.prototype.toString.call(t)}function Ke(t){var e=Je(t).replace(We,"");return e.match(Fe)||e.match(Le)}function Ze(t,e){e=!0===e;var n={},r="Provider",i=[],o=new He,a={$provide:{provider:d(v),factory:d($),service:d(function(t,e){return $(t,["$injector",function(t){return t.instantiate(e)}])}),value:d(function(t,e){return $(t,M(e),!1)}),constant:d(function(t,e){Nt(t,"constant"),a[t]=e,u[t]=e}),decorator:function(t,e){var n=s.get(t+r),i=n.$get;n.$get=function(){var t=f.invoke(i,n);return f.invoke(e,null,{$delegate:t})}}}},s=a.$injector=g(a,function(t,e){throw w.isString(e)&&i.push(e),Ge("unpr","Unknown provider: {0}",i.join(" <- "))}),u={},c=g(u,function(t,e){var n=s.get(t+r,e);return f.invoke(n.$get,n,void 0,t)}),f=c;a["$injector"+r]={$get:M(c)},f.modules=s.modules=Ht();var h=m(t);return(f=c.get("$injector")).strictDi=e,E(h,function(t){t&&f.invoke(t)}),f.loadNewModules=function(t){E(m(t),function(t){t&&f.invoke(t)})},f;function d(t){return function(e,n){if(!H(e))return t(e,n);E(e,C(t))}}function v(t,e){if(Nt(t,"service"),(G(e)||z(e))&&(e=s.instantiate(e)),!e.$get)throw Ge("pget","Provider '{0}' must define $get factory method.",t);return a[t+r]=e}function $(t,e,n){return v(t,{$get:!1!==n?(r=t,i=e,function(){var t=f.invoke(i,this);if(D(t))throw Ge("undef","Provider '{0}' must return a value from $get factory method.",r);return t}):e});var r,i}function m(t){It(D(t)||z(t),"modulesToLoad","not an array");var e,n=[];return E(t,function(t){if(!o.get(t)){o.set(t,!0);try{F(t)?(e=p(t),f.modules[t]=e,n=n.concat(m(e.requires)).concat(e._runBlocks),r(e._invokeQueue),r(e._configBlocks)):G(t)?n.push(s.invoke(t)):z(t)?n.push(s.invoke(t)):Mt(t,"module")}catch(e){throw z(t)&&(t=t[t.length-1]),e.message&&e.stack&&-1===e.stack.indexOf(e.message)&&(e=e.message+"\n"+e.stack),Ge("modulerr","Failed to instantiate module {0} due to:\n{1}",t,e.stack||e.message||e)}}function r(t){var e,n;for(e=0,n=t.length;e<n;e++){var r=t[e],i=s.get(r[0]);i[r[1]].apply(i,r[2])}}}),n}function g(t,o){function s(e,r){if(t.hasOwnProperty(e)){if(t[e]===n)throw Ge("cdep","Circular dependency found: {0}",e+" <- "+i.join(" <- "));return t[e]}try{return i.unshift(e),t[e]=n,t[e]=o(e,r),t[e]}catch(r){throw t[e]===n&&delete t[e],r}finally{i.shift()}}function u(t,n,r){for(var i=[],o=Ze.$$annotate(t,e,r),a=0,u=o.length;a<u;a++){var c=o[a];if("string"!=typeof c)throw Ge("itkn","Incorrect injection token! Expected service name as string, got {0}",c);i.push(n&&n.hasOwnProperty(c)?n[c]:s(c,r))}return i}return{invoke:function(t,e,n,r){"string"==typeof n&&(r=n,n=null);var i=u(t,n,r);return z(t)&&(t=t[t.length-1]),function(t){if(l||"function"!=typeof t)return!1;var e=t.$$ngIsClass;return Y(e)||(e=t.$$ngIsClass=/^(?:class\b|constructor\()/.test(Je(t))),e}(t)?(i.unshift(null),new(Function.prototype.bind.apply(t,i))):t.apply(e,i)},instantiate:function(t,e,n){var r=z(t)?t[t.length-1]:t,i=u(t,e,n);return i.unshift(null),new(Function.prototype.bind.apply(r,i))},get:s,annotate:Ze.$$annotate,has:function(e){return a.hasOwnProperty(e+r)||t.hasOwnProperty(e)}}}}function Ye(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(n,r,i){var o=n.document;function a(t){if(t){t.scrollIntoView();var e=function(){var t=s.yOffset;if(G(t))t=t();else if(nt(t)){var e=t[0];t="fixed"!==n.getComputedStyle(e).position?0:e.getBoundingClientRect().bottom}else L(t)||(t=0);return t}();if(e){var r=t.getBoundingClientRect().top;n.scrollBy(0,r-e)}}else n.scrollTo(0,0)}function s(t){var e,n,i;(t=F(t)?t:L(t)?t.toString():r.hash())?(e=o.getElementById(t))?a(e):(n=o.getElementsByName(t),i=null,Array.prototype.some.call(n,function(t){if("a"===rt(t))return i=t,!0}),(e=i)?a(e):"top"===t&&a(null)):a(null)}return e&&i.$watch(function(){return r.hash()},function(e,n){var r,o;e===n&&""===e||(r=function(){i.$evalAsync(s)},"complete"===(o=o||t).document.readyState?o.setTimeout(r):f(o).on("load",r))}),s}]}Ze.$$annotate=function(t,e,n){var r,i,o;if("function"==typeof t){if(!(r=t.$inject)){if(r=[],t.length){if(e)throw F(n)&&n||(n=t.name||((o=Ke(t))?"function("+(o[1]||"").replace(/[\s\r\n]+/," ")+")":"fn")),Ge("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);E(Ke(t)[1].split(Be),function(t){t.replace(ze,function(t,e,n){r.push(n)})})}t.$inject=r}}else z(t)?(Mt(t[i=t.length-1],"fn"),r=t.slice(0,i)):Mt(t,"fn",!0);return r};var Qe=i("$animate"),Xe=1,tn="ng-animate";function en(t,e){return t||e?t?e?(z(t)&&(t=t.join(" ")),z(e)&&(e=e.join(" ")),t+" "+e):t:e:""}function nn(t){return H(t)?t:{}}var rn=function(){this.$get=j},on=function(){var t=new He,e=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){return{enabled:j,on:j,off:j,pin:j,push:function(a,s,u,c){var l,f,h,p,d,v;c&&c(),(u=u||{}).from&&a.css(u.from),u.to&&a.css(u.to),(u.addClass||u.removeClass)&&(l=a,f=u.addClass,h=u.removeClass,p=t.get(l)||{},d=i(p,f,!0),v=i(p,h,!1),(d||v)&&(t.set(l,p),e.push(l),1===e.length&&r.$$postDigest(o)));var $=new n;return $.complete(),$}};function i(t,e,n){var r=!1;return e&&E(e=F(e)?e.split(" "):z(e)?e:[],function(e){e&&(r=!0,t[e]=n)}),r}function o(){E(e,function(e){var n=t.get(e);if(n){var r=function(t){F(t)&&(t=t.split(" "));var e=Ht();return E(t,function(t){t.length&&(e[t]=!0)}),e}(e.attr("class")),i="",o="";E(n,function(t,e){t!==!!r[e]&&(t?i+=(i.length?" ":"")+e:o+=(o.length?" ":"")+e)}),E(e,function(t){i&&Se(t,i),o&&be(t,o)}),t.delete(e)}}),e.length=0}}]},an=["$provide",function(t){var e=this,n=null,r=null;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Qe("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";e.$$registeredAnimations[n.substr(1)]=i,t.factory(i,r)},this.customFilter=function(t){return 1===arguments.length&&(r=G(t)?t:null),r},this.classNameFilter=function(t){if(1===arguments.length&&((n=t instanceof RegExp?t:null)&&new RegExp("[(\\s|\\/)]"+tn+"[(\\s|\\/)]").test(n.toString())))throw n=null,Qe("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',tn);return n},this.$get=["$$animateQueue",function(t){function e(t,e,n){if(n){var r=function(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.nodeType===Xe)return n}}(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(t):e.prepend(t)}return{on:t.on,off:t.off,pin:t.pin,enabled:t.enabled,cancel:function(t){t.end&&t.end()},enter:function(n,r,i,o){return r=r&&f(r),i=i&&f(i),e(n,r=r||i.parent(),i),t.push(n,"enter",nn(o))},move:function(n,r,i,o){return r=r&&f(r),i=i&&f(i),e(n,r=r||i.parent(),i),t.push(n,"move",nn(o))},leave:function(e,n){return t.push(e,"leave",nn(n),function(){e.remove()})},addClass:function(e,n,r){return(r=nn(r)).addClass=en(r.addclass,n),t.push(e,"addClass",r)},removeClass:function(e,n,r){return(r=nn(r)).removeClass=en(r.removeClass,n),t.push(e,"removeClass",r)},setClass:function(e,n,r,i){return(i=nn(i)).addClass=en(i.addClass,n),i.removeClass=en(i.removeClass,r),t.push(e,"setClass",i)},animate:function(e,n,r,i,o){return(o=nn(o)).from=o.from?O(o.from,n):n,o.to=o.to?O(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=en(o.tempClasses,i),t.push(e,"animate",o)}}}]}],sn=function(){this.$get=["$$rAF",function(t){var e=[];function n(n){e.push(n),e.length>1||t(function(){for(var t=0;t<e.length;t++)e[t]();e=[]})}return function(){var t=!1;return n(function(){t=!0}),function(e){t?e():n(e)}}}]},un=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$$isDocumentHidden","$timeout",function(t,e,n,r,i){function o(t){this.setHost(t);var e=n();this._doneCallbacks=[],this._tick=function(t){r()?i(t,0,!1):e(t)},this._state=0}return o.chain=function(t,e){var n=0;!function r(){if(n===t.length)return void e(!0);t[n](function(t){!1!==t?(n++,r()):e(!1)})}()},o.all=function(t,e){var n=0,r=!0;function i(i){r=r&&i,++n===t.length&&e(r)}E(t,function(t){t.done(i)})},o.prototype={setHost:function(t){this.host=t||{}},done:function(t){2===this._state?t():this._doneCallbacks.push(t)},progress:j,getPromise:function(){if(!this.promise){var e=this;this.promise=t(function(t,n){e.done(function(e){!1===e?n():t()})})}return this.promise},then:function(t,e){return this.getPromise().then(t,e)},catch:function(t){return this.getPromise().catch(t)},finally:function(t){return this.getPromise().finally(t)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(t){var e=this;0===e._state&&(e._state=1,e._tick(function(){e._resolve(t)}))},_resolve:function(t){2!==this._state&&(E(this._doneCallbacks,function(e){e(t)}),this._doneCallbacks.length=0,this._state=2)}},o}]},cn=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(t,e,n){return function(e,r){var i=r||{};i.$$prepared||(i=at(i)),i.cleanupStyles&&(i.from=i.to=null),i.from&&(e.css(i.from),i.from=null);var o,a=new n;return{start:s,end:s};function s(){return t(function(){!function(){i.addClass&&(e.addClass(i.addClass),i.addClass=null);i.removeClass&&(e.removeClass(i.removeClass),i.removeClass=null);i.to&&(e.css(i.to),i.to=null)}(),o||a.complete(),o=!0}),a}}}]};function ln(){this.$get=["$window","$log","$sniffer","$document",function(t,e,n,r){return new function(t,e,n,r){var i=this,o=t.location,a=t.history,s=t.setTimeout,u=t.clearTimeout,c={};i.isMock=!1;var l=0,h=[];function p(t){try{t.apply(null,ht(arguments,1))}finally{if(0==--l)for(;h.length;)try{h.pop()()}catch(t){n.error(t)}}}i.$$completeOutstandingRequest=p,i.$$incOutstandingRequestCount=function(){l++},i.notifyWhenNoOutstandingRequests=function(t){0===l?t():h.push(t)};var d,v,$=o.href,m=e.find("base"),g=null,y=r.history?function(){try{return a.state}catch(t){}}:j;C(),i.url=function(e,n,s){if(D(s)&&(s=null),o!==t.location&&(o=t.location),a!==t.history&&(a=t.history),e){var u=v===s;if($===e&&(!r.history||u))return i;var c=$&&or($)===or(e);return $=e,v=s,!r.history||c&&u?(c||(g=e),n?o.replace(e):c?o.hash=-1===(f=(l=e).indexOf("#"))?"":l.substr(f):o.href=e,o.href!==e&&(g=e)):(a[n?"replaceState":"pushState"](s,"",e),C()),g&&(g=e),i}return g||o.href.replace(/%27/g,"'");var l,f},i.state=function(){return d};var w=[],b=!1;function S(){g=null,_()}var x=null;function C(){ut(d=D(d=y())?null:d,x)&&(d=x),x=d,v=d}function _(){var t=v;C(),$===i.url()&&t===d||($=i.url(),v=d,E(w,function(t){t(i.url(),d)}))}i.onUrlChange=function(e){return b||(r.history&&f(t).on("popstate",S),f(t).on("hashchange",S),b=!0),w.push(e),e},i.$$applicationDestroyed=function(){f(t).off("hashchange popstate",S)},i.$$checkUrlChange=_,i.baseHref=function(){var t=m.attr("href");return t?t.replace(/^(https?:)?\/\/[^/]*/,""):""},i.defer=function(t,e){var n;return l++,n=s(function(){delete c[n],p(t)},e||0),c[n]=!0,n},i.defer.cancel=function(t){return!!c[t]&&(delete c[t],u(t),p(j),!0)}}(t,r,e,n)}]}function fn(){this.$get=function(){var t={};function e(e,n){if(e in t)throw i("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var r=0,o=O({},n,{id:e}),a=Ht(),s=n&&n.capacity||Number.MAX_VALUE,u=Ht(),c=null,l=null;return t[e]={put:function(t,e){if(!D(e)){if(s<Number.MAX_VALUE)f(u[t]||(u[t]={key:t}));return t in a||r++,a[t]=e,r>s&&this.remove(l.key),e}},get:function(t){if(s<Number.MAX_VALUE){var e=u[t];if(!e)return;f(e)}return a[t]},remove:function(t){if(s<Number.MAX_VALUE){var e=u[t];if(!e)return;e===c&&(c=e.p),e===l&&(l=e.n),h(e.n,e.p),delete u[t]}t in a&&(delete a[t],r--)},removeAll:function(){a=Ht(),r=0,u=Ht(),c=l=null},destroy:function(){a=null,o=null,u=null,delete t[e]},info:function(){return O({},o,{size:r})}};function f(t){t!==c&&(l?l===t&&(l=t.n):l=t,h(t.n,t.p),h(t,c),(c=t).n=null)}function h(t,e){t!==e&&(t&&(t.p=e),e&&(e.n=t))}}return e.info=function(){var e={};return E(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function hn(){this.$get=["$cacheFactory",function(t){return t("templates")}]}var pn=i("$compile");var dn=new function(){};function vn(e,n){var r={},i="Directive",o=/^\s*directive:\s*([\w-]+)\s+(.*)$/,a=/(([\w-]+)(?::([^;]+))?;?)/,c=function(t){var e,n={},r=t.split(",");for(e=0;e<r.length;e++)n[r[e]]=!0;return n}("ngSrc,ngSrcset,src,srcset"),h=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,p=/^(on[a-z]+|formaction)$/,d=Ht();function v(t,e,n){var r=/^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/,i=Ht();return E(t,function(t,o){if(t in d)i[o]=d[t];else{var a=t.match(r);if(!a)throw pn("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",e,o,t,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o},a[4]&&(d[t]=i[o])}}),i}function $(t,e){var n={isolateScope:null,bindToController:null};if(H(t.scope)&&(!0===t.bindToController?(n.bindToController=v(t.scope,e,!0),n.isolateScope={}):n.isolateScope=v(t.scope,e,!1)),H(t.bindToController)&&(n.bindToController=v(t.bindToController,e,!0)),n.bindToController&&!t.controller)throw pn("noctrl","Cannot bind to controller without directive '{0}'s controller.",e);return n}this.directive=function t(n,o){return It(n,"name"),Nt(n,"directive"),F(n)?(!function(t){var e=t.charAt(0);if(!e||e!==u(e))throw pn("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",t);if(t!==t.trim())throw pn("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",t)}(n),It(o,"directiveFactory"),r.hasOwnProperty(n)||(r[n]=[],e.factory(n+i,["$injector","$exceptionHandler",function(t,e){var i=[];return E(r[n],function(r,o){try{var a=t.invoke(r);G(a)?a={compile:M(a)}:!a.compile&&a.link&&(a.compile=M(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||n,a.require=(u=(s=a).require||s.controller&&s.name,!z(u)&&H(u)&&E(u,function(t,e){var n=t.match(h);t.substring(n[0].length)||(u[e]=n[0]+e)}),u),a.restrict=function(t,e){if(t&&(!F(t)||!/[EACM]/.test(t)))throw pn("badrestrict","Restrict property '{0}' of directive '{1}' is invalid",t,e);return t||"EA"}(a.restrict,n),a.$$moduleName=r.$$moduleName,i.push(a)}catch(t){e(t)}var s,u}),i}])),r[n].push(o)):E(n,C(t)),this},this.component=function t(e,n){if(!F(e))return E(e,C(pt(this,t))),this;var r=n.controller||function(){};function i(t){function e(e){return G(e)||z(e)?function(n,r){return t.invoke(e,this,{$element:n,$attrs:r})}:e}var i=n.template||n.templateUrl?n.template:"",o={controller:r,controllerAs:function(t,e){if(e&&F(e))return e;if(F(t)){var n=En.exec(t);if(n)return n[3]}}(n.controller)||n.controllerAs||"$ctrl",template:e(i),templateUrl:e(n.templateUrl),transclude:n.transclude,scope:{},bindToController:n.bindings||{},restrict:"E",require:n.require};return E(n,function(t,e){"$"===e.charAt(0)&&(o[e]=t)}),o}return E(n,function(t,e){"$"===e.charAt(0)&&(i[e]=t,G(r)&&(r[e]=t))}),i.$inject=["$injector"],this.directive(e,i)},this.aHrefSanitizationWhitelist=function(t){return U(t)?(n.aHrefSanitizationWhitelist(t),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(t){return U(t)?(n.imgSrcSanitizationWhitelist(t),this):n.imgSrcSanitizationWhitelist()};var g=!0;this.debugInfoEnabled=function(t){return U(t)?(g=t,this):g};var y=!1;this.preAssignBindingsEnabled=function(t){return U(t)?(y=t,this):y};var w=!1;this.strictComponentBindingsEnabled=function(t){return U(t)?(w=t,this):w};var b=10;this.onChangesTtl=function(t){return arguments.length?(b=t,this):b};var S=!0;this.commentDirectivesEnabled=function(t){return arguments.length?(S=t,this):S};var x=!0;this.cssClassDirectivesEnabled=function(t){return arguments.length?(x=t,this):x},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(e,n,d,v,C,_,k,R,A,T){var P,M=/^\w/,N=t.document.createElement("div"),q=S,L=x,B=b;function J(){try{if(!--B)throw P=void 0,pn("infchng","{0} $onChanges() iterations reached. Aborting!\n",b);k.$apply(function(){for(var t=[],e=0,n=P.length;e<n;++e)try{P[e]()}catch(e){t.push(e)}if(P=void 0,t.length)throw t})}finally{B++}}function K(t,e){if(e){var n,r,i,o=Object.keys(e);for(n=0,r=o.length;n<r;n++)this[i=o[n]]=e[i]}else this.$attr={};this.$$element=t}function Q(t,e){try{t.addClass(e)}catch(t){}}K.prototype={$normalize:yn,$addClass:function(t){t&&t.length>0&&A.addClass(this.$$element,t)},$removeClass:function(t){t&&t.length>0&&A.removeClass(this.$$element,t)},$updateClass:function(t,e){var n=wn(t,e);n&&n.length&&A.addClass(this.$$element,n);var r=wn(e,t);r&&r.length&&A.removeClass(this.$$element,r)},$set:function(t,e,n,r){var i,o=Ve(this.$$element[0],t),a=Pe[t],s=t;if(o?(this.$$element.prop(t,e),r=o):a&&(this[a]=e,s=a),this[t]=e,r?this.$attr[t]=r:(r=this.$attr[t])||(this.$attr[t]=r=Vt(t,"-")),"a"===(i=rt(this.$$element))&&("href"===t||"xlinkHref"===t)||"img"===i&&"src"===t)this[t]=e=T(e,"src"===t);else if("img"===i&&"srcset"===t&&U(e)){for(var u="",c=tt(e),l=/\s/.test(c)?/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/:/(,)/,f=c.split(l),h=Math.floor(f.length/2),p=0;p<h;p++){var v=2*p;u+=T(tt(f[v]),!0),u+=" "+tt(f[v+1])}var $=tt(f[2*p]).split(/\s/);u+=T(tt($[0]),!0),2===$.length&&(u+=" "+tt($[1])),this[t]=e=u}!1!==n&&(null===e||D(e)?this.$$element.removeAttr(r):M.test(r)?this.$$element.attr(r,e):function(t,e,n){N.innerHTML="<span "+e+">";var r=N.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,t.attributes.setNamedItem(i)}(this.$$element[0],r,e));var m=this.$$observers;m&&E(m[s],function(t){try{t(e)}catch(t){d(t)}})},$observe:function(t,e){var n=this,r=n.$$observers||(n.$$observers=Ht()),i=r[t]||(r[t]=[]);return i.push(e),k.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(t)||D(n[t])||e(n[t])}),function(){ot(i,e)}}};var X=n.startSymbol(),et=n.endSymbol(),nt="{{"===X&&"}}"===et?I:function(t){return t.replace(/\{\{/g,X).replace(/}}/g,et)},it=/^ngAttr[A-Z]/,at=/^(.+)Start$/;return ct.$$addBindingInfo=g?function(t,e){var n=t.data("$binding")||[];z(e)?n=n.concat(e):n.push(e),t.data("$binding",n)}:j,ct.$$addBindingClass=g?function(t){Q(t,"ng-binding")}:j,ct.$$addScopeInfo=g?function(t,e,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";t.data(i,e)}:j,ct.$$addScopeClass=g?function(t,e){Q(t,e?"ng-isolate-scope":"ng-scope")}:j,ct.$$createComment=function(e,n){var r="";return g&&(r=" "+(e||"")+": ",n&&(r+=n+" ")),t.document.createComment(r)},ct;function ct(t,e,n,r,i){t instanceof f||(t=f(t));var o=lt(t,e,t,n,r,i);ct.$$addScopeClass(t);var a=null;return function(e,n,r){if(!t)throw pn("multilink","This element has already been linked.");It(e,"scope"),i&&i.needsNewScope&&(e=e.$parent.$new());var s,u,c,l=(r=r||{}).parentBoundTranscludeFn,h=r.transcludeControllers,p=r.futureParentElement;if(l&&l.$$boundTransclude&&(l=l.$$boundTransclude),a||(u=(s=p)&&s[0],a=u&&"foreignobject"!==rt(u)&&m.call(u).match(/SVG/)?"svg":"html"),c="html"!==a?f(Ot(a,f("<div>").append(t).html())):n?Oe.clone.call(t):t,h)for(var d in h)c.data("$"+d+"Controller",h[d].instance);return ct.$$addScopeInfo(c,e),n&&n(c,e),o&&o(e,c,c,l),n||(t=o=null),c}}function lt(t,e,n,r,i,o){for(var a,s,u,c,h,p,d,v=[],$=z(t)||t instanceof f,m=0;m<t.length;m++)a=new K,11===l&&ft(t,m,$),(u=(s=vt(t[m],[],a,0===m?r:void 0,i)).length?yt(s,t[m],a,e,n,null,[],[],o):null)&&u.scope&&ct.$$addScopeClass(a.$$element),h=u&&u.terminal||!(c=t[m].childNodes)||!c.length?null:lt(c,u?(u.transcludeOnThisElement||!u.templateOnThisElement)&&u.transclude:e),(u||h)&&(v.push(m,u,h),p=!0,d=d||u),o=null;return p?function(t,n,r,i){var o,a,s,u,c,l,h,p,$;if(d){var m=n.length;for($=new Array(m),c=0;c<v.length;c+=3)h=v[c],$[h]=n[h]}else $=n;for(c=0,l=v.length;c<l;)s=$[v[c++]],o=v[c++],a=v[c++],o?(o.scope?(u=t.$new(),ct.$$addScopeInfo(f(s),u)):u=t,p=o.transcludeOnThisElement?dt(t,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&e?dt(t,e):null,o(a,u,s,r,p)):a&&a(t,s.childNodes,void 0,i)}:null}function ft(t,e,n){var r,i=t[e],o=i.parentNode;if(i.nodeType===Lt)for(;(r=o?i.nextSibling:t[e+1])&&r.nodeType===Lt;)i.nodeValue=i.nodeValue+r.nodeValue,r.parentNode&&r.parentNode.removeChild(r),n&&r===t[e+1]&&t.splice(e+1,1)}function dt(t,e,n){function r(r,i,o,a,s){return r||((r=t.$new(!1,s)).$$transcluded=!0),e(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i=r.$$slots=Ht();for(var o in e.$$slots)e.$$slots[o]?i[o]=dt(t,e.$$slots[o],n):i[o]=null;return r}function vt(t,e,r,i,s){var u,c,l,f,h,p,d=t.nodeType,v=r.$attr;switch(d){case Ft:Et(e,yn(c=rt(t)),"E",i,s);for(var $,m,g,y,w,b,S=t.attributes,E=0,x=S&&S.length;E<x;E++){var C=!1,_=!1;m=($=S[E]).name,w=$.value,y=yn(m),(b=it.test(y))&&(m=m.replace(mn,"").substr(8).replace(/_(.)/g,function(t,e){return e.toUpperCase()}));var k=y.match(at);k&&xt(k[1])&&(C=m,_=m.substr(0,m.length-5)+"end",m=m.substr(0,m.length-6)),v[g=yn(m.toLowerCase())]=m,!b&&r.hasOwnProperty(g)||(r[g]=w,Ve(t,g)&&(r[g]=!0)),At(t,e,w,g,b),Et(e,g,"A",i,s,C,_)}if("input"===c&&"hidden"===t.getAttribute("type")&&t.setAttribute("autocomplete","off"),!L)break;if(H(l=t.className)&&(l=l.animVal),F(l)&&""!==l)for(;u=a.exec(l);)Et(e,g=yn(u[2]),"C",i,s)&&(r[g]=tt(u[3])),l=l.substr(u.index+u[0].length);break;case Lt:f=e,h=t.nodeValue,(p=n(h,!0))&&f.push({priority:0,compile:function(t){var e=t.parent(),n=!!e.length;return n&&ct.$$addBindingClass(e),function(t,e){var r=e.parent();n||ct.$$addBindingClass(r),ct.$$addBindingInfo(r,p.expressions),t.$watch(p,function(t){e[0].nodeValue=t})}}});break;case Bt:if(!q)break;!function(t,e,n,r,i){try{var a=o.exec(t.nodeValue);if(a){var s=yn(a[1]);Et(e,s,"M",r,i)&&(n[s]=tt(a[2]))}}catch(t){}}(t,e,r,i,s)}return e.sort(kt),e}function $t(t,e,n){var r=[],i=0;if(e&&t.hasAttribute&&t.hasAttribute(e))do{if(!t)throw pn("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",e,n);t.nodeType===Ft&&(t.hasAttribute(e)&&i++,t.hasAttribute(n)&&i--),r.push(t),t=t.nextSibling}while(i>0);else r.push(t);return f(r)}function mt(t,e,n){return function(r,i,o,a,s){return i=$t(i[0],e,n),t(r,i,o,a,s)}}function gt(t,e,n,r,i,o){var a;return t?ct(e,n,r,i,o):function(){return a||(a=ct(e,n,r,i,o),e=n=o=null),a.apply(this,arguments)}}function yt(t,e,n,r,i,o,a,s,u){u=u||{};for(var c,l,h,p,v,$=-Number.MAX_VALUE,m=u.newScopeDirective,g=u.controllerDirectives,w=u.newIsolateScopeDirective,b=u.templateDirective,S=u.nonTlbTranscludeDirective,x=!1,C=!1,k=u.hasElementTranscludeDirective,R=n.$$element=f(e),A=o,T=r,P=!1,V=!1,j=0,I=t.length;j<I;j++){var M=(c=t[j]).$$start,N=c.$$end;if(M&&(R=$t(e,M,N)),h=void 0,$>c.priority)break;if((v=c.scope)&&(c.templateUrl||(H(v)?(Rt("new/isolated scope",w||m,c,R),w=c):Rt("new/isolated scope",w,c,R)),m=m||c),l=c.name,!P&&(c.replace&&(c.templateUrl||c.template)||c.transclude&&!c.$$tlb)){for(var U,q=j+1;U=t[q++];)if(U.transclude&&!U.$$tlb||U.replace&&(U.templateUrl||U.template)){V=!0;break}P=!0}if(!c.templateUrl&&c.controller&&(g=g||Ht(),Rt("'"+l+"' controller",g[l],c,R),g[l]=c),v=c.transclude)if(x=!0,c.$$tlb||(Rt("transclusion",S,c,R),S=c),"element"===v)k=!0,$=c.priority,h=R,R=n.$$element=f(ct.$$createComment(l,n[l])),e=R[0],Tt(i,ht(h),e),h[0].$$parentNode=h[0].parentNode,T=gt(V,h,r,$,A&&A.name,{nonTlbTranscludeDirective:S});else{var F=Ht();if(H(v)){h=[];var L=Ht(),B=Ht();for(var W in E(v,function(t,e){var n="?"===t.charAt(0);t=n?t.substring(1):t,L[t]=e,F[e]=null,B[e]=n}),E(R.contents(),function(t){var e=L[yn(rt(t))];e?(B[e]=!0,F[e]=F[e]||[],F[e].push(t)):h.push(t)}),E(B,function(t,e){if(!t)throw pn("reqslot","Required transclusion slot `{0}` was not filled.",e)}),F)F[W]&&(F[W]=gt(V,F[W],r))}else h=f(de(e)).contents();R.empty(),(T=gt(V,h,r,void 0,void 0,{needsNewScope:c.$$isolateScope||c.$$newScope})).$$slots=F}if(c.template)if(C=!0,Rt("template",b,c,R),b=c,v=G(c.template)?c.template(R,n):c.template,v=nt(v),c.replace){if(A=c,h=ce(v)?[]:bn(Ot(c.templateNamespace,tt(v))),e=h[0],1!==h.length||e.nodeType!==Ft)throw pn("tplrt","Template for directive '{0}' must have exactly one root element. {1}",l,"");Tt(i,R,e);var J={$attr:{}},Y=vt(e,[],J),Q=t.splice(j+1,t.length-(j+1));(w||m)&&St(Y,w,m),t=t.concat(Y).concat(Q),Ct(n,J),I=t.length}else R.html(v);if(c.templateUrl)C=!0,Rt("template",b,c,R),b=c,c.replace&&(A=c),it=_t(t.splice(j,t.length-j),R,n,i,x&&T,a,s,{controllerDirectives:g,newScopeDirective:m!==c&&m,newIsolateScopeDirective:w,templateDirective:b,nonTlbTranscludeDirective:S}),I=t.length;else if(c.compile)try{p=c.compile(R,n,T);var X=c.$$originalDirective||c;G(p)?et(null,pt(X,p),M,N):p&&et(pt(X,p.pre),pt(X,p.post),M,N)}catch(t){d(t,wt(R))}c.terminal&&(it.terminal=!0,$=Math.max($,c.priority))}return it.scope=m&&!0===m.scope,it.transcludeOnThisElement=x,it.templateOnThisElement=C,it.transclude=T,u.hasElementTranscludeDirective=k,it;function et(t,e,n,r){t&&(n&&(t=mt(t,n,r)),t.require=c.require,t.directiveName=l,(w===c||c.$$isolateScope)&&(t=Pt(t,{isolateScope:!0})),a.push(t)),e&&(n&&(e=mt(e,n,r)),e.require=c.require,e.directiveName=l,(w===c||c.$$isolateScope)&&(e=Pt(e,{isolateScope:!0})),s.push(e))}function it(t,r,i,o,u){var c,l,h,p,v,$,S,x,C,R;for(var A in e===i?(C=n,x=n.$$element):C=new K(x=f(i),n),v=r,w?p=r.$new(!0):m&&(v=r.$parent),u&&((S=function(t,e,n,r){var i;Z(t)||(r=n,n=e,e=t,t=void 0);k&&(i=$);n||(n=k?x.parent():x);{if(!r)return u(t,e,i,n,I);var o=u.$$slots[r];if(o)return o(t,e,i,n,I);if(D(o))throw pn("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,wt(x))}}).$$boundTransclude=u,S.isSlotFilled=function(t){return!!u.$$slots[t]}),g&&($=function(t,e,n,r,i,o,a){var s=Ht();for(var u in r){var c=r[u],l={$scope:c===a||c.$$isolateScope?i:o,$element:t,$attrs:e,$transclude:n},f=c.controller;"@"===f&&(f=e[c.name]);var h=_(f,l,!0,c.controllerAs);s[c.name]=h,t.data("$"+c.name+"Controller",h.instance)}return s}(x,C,S,g,p,r,w)),w&&(ct.$$addScopeInfo(x,p,!0,!(b&&(b===w||b===w.$$originalDirective))),ct.$$addScopeClass(x,!0),p.$$isolateBindings=w.$$isolateBindings,(R=Nt(r,C,p,p.$$isolateBindings,w)).removeWatches&&p.$on("$destroy",R.removeWatches)),$){var T=g[A],P=$[A],V=T.$$bindings.bindToController;if(y){P.bindingInfo=V?Nt(v,C,P.instance,V,T):{};var j=P();j!==P.instance&&(P.instance=j,x.data("$"+T.name+"Controller",j),P.bindingInfo.removeWatches&&P.bindingInfo.removeWatches(),P.bindingInfo=Nt(v,C,P.instance,V,T))}else P.instance=P(),x.data("$"+T.name+"Controller",P.instance),P.bindingInfo=Nt(v,C,P.instance,V,T)}for(E(g,function(t,e){var n=t.require;t.bindToController&&!z(n)&&H(n)&&O($[e].instance,bt(e,n,x,$))}),E($,function(t){var e=t.instance;if(G(e.$onChanges))try{e.$onChanges(t.bindingInfo.initialChanges)}catch(t){d(t)}if(G(e.$onInit))try{e.$onInit()}catch(t){d(t)}G(e.$doCheck)&&(v.$watch(function(){e.$doCheck()}),e.$doCheck()),G(e.$onDestroy)&&v.$on("$destroy",function(){e.$onDestroy()})}),c=0,l=a.length;c<l;c++)jt(h=a[c],h.isolateScope?p:r,x,C,h.require&&bt(h.directiveName,h.require,x,$),S);var I=r;for(w&&(w.template||null===w.templateUrl)&&(I=p),t&&t(I,i.childNodes,void 0,u),c=s.length-1;c>=0;c--)jt(h=s[c],h.isolateScope?p:r,x,C,h.require&&bt(h.directiveName,h.require,x,$),S);E($,function(t){var e=t.instance;G(e.$postLink)&&e.$postLink()})}}function bt(t,e,n,r){var i;if(F(e)){var o=e.match(h),a=e.substring(o[0].length),s=o[1]||o[3],u="?"===o[2];if("^^"===s?n=n.parent():i=(i=r&&r[a])&&i.instance,!i){var c="$"+a+"Controller";i=s?n.inheritedData(c):n.data(c)}if(!i&&!u)throw pn("ctreq","Controller '{0}', required by directive '{1}', can't be found!",a,t)}else if(z(e)){i=[];for(var l=0,f=e.length;l<f;l++)i[l]=bt(t,e[l],n,r)}else H(e)&&(i={},E(e,function(e,o){i[o]=bt(t,e,n,r)}));return i||null}function St(t,e,n){for(var r=0,i=t.length;r<i;r++)t[r]=V(t[r],{$$isolateScope:e,$$newScope:n})}function Et(t,n,o,a,s,u,c){if(n===s)return null;var l=null;if(r.hasOwnProperty(n))for(var f,h=e.get(n+i),p=0,d=h.length;p<d;p++)if(f=h[p],(D(a)||a>f.priority)&&-1!==f.restrict.indexOf(o)){if(u&&(f=V(f,{$$start:u,$$end:c})),!f.$$bindings){var v=f.$$bindings=$(f,f.name);H(v.isolateScope)&&(f.$$isolateBindings=v.isolateScope)}t.push(f),l=f}return l}function xt(t){if(r.hasOwnProperty(t))for(var n=e.get(t+i),o=0,a=n.length;o<a;o++)if(n[o].multiElement)return!0;return!1}function Ct(t,e){var n=e.$attr,r=t.$attr;E(t,function(r,i){"$"!==i.charAt(0)&&(e[i]&&e[i]!==r&&(r.length?r+=("style"===i?";":" ")+e[i]:r=e[i]),t.$set(i,r,!0,n[i]))}),E(e,function(e,i){t.hasOwnProperty(i)||"$"===i.charAt(0)||(t[i]=e,"class"!==i&&"style"!==i&&(r[i]=n[i]))})}function _t(t,e,n,r,i,o,a,s){var u,c,l=[],h=e[0],p=t.shift(),$=V(p,{templateUrl:null,transclude:null,replace:null,$$originalDirective:p}),m=G(p.templateUrl)?p.templateUrl(e,n):p.templateUrl,g=p.templateNamespace;return e.empty(),v(m).then(function(d){var v,y,w,b;if(d=nt(d),p.replace){if(w=ce(d)?[]:bn(Ot(g,tt(d))),v=w[0],1!==w.length||v.nodeType!==Ft)throw pn("tplrt","Template for directive '{0}' must have exactly one root element. {1}",p.name,m);y={$attr:{}},Tt(r,e,v);var S=vt(v,[],y);H(p.scope)&&St(S,!0),t=S.concat(t),Ct(n,y)}else v=h,e.html(d);for(t.unshift($),u=yt(t,v,n,i,e,p,o,a,s),E(r,function(t,n){t===v&&(r[n]=e[0])}),c=lt(e[0].childNodes,i);l.length;){var x=l.shift(),C=l.shift(),_=l.shift(),k=l.shift(),R=e[0];if(!x.$$destroyed){if(C!==h){var O=C.className;s.hasElementTranscludeDirective&&p.replace||(R=de(v)),Tt(_,f(C),R),Q(f(R),O)}b=u.transcludeOnThisElement?dt(x,u.transclude,k):k,u(c,x,R,r,b)}}l=null}).catch(function(t){W(t)&&d(t)}),function(t,e,n,r,i){var o=i;e.$$destroyed||(l?l.push(e,n,r,o):(u.transcludeOnThisElement&&(o=dt(e,u.transclude,i)),u(c,e,n,r,o)))}}function kt(t,e){var n=e.priority-t.priority;return 0!==n?n:t.name!==e.name?t.name<e.name?-1:1:t.index-e.index}function Rt(t,e,n,r){function i(t){return t?" (module: "+t+")":""}if(e)throw pn("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",e.name,i(e.$$moduleName),n.name,i(n.$$moduleName),t,wt(r))}function Ot(e,n){switch(e=u(e||"html")){case"svg":case"math":var r=t.document.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function At(t,e,r,i,o){var a=function(t,e){if("srcdoc"===e)return R.HTML;var n=rt(t);if("src"===e||"ngSrc"===e){if(-1===["img","video","audio","source","track"].indexOf(n))return R.RESOURCE_URL}else if("xlinkHref"===e||"form"===n&&"action"===e||"link"===n&&"href"===e)return R.RESOURCE_URL}(t,i),s=!o,u=c[i]||o,l=n(r,s,a,u);if(l){if("multiple"===i&&"select"===rt(t))throw pn("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",wt(t));if(p.test(i))throw pn("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");e.push({priority:100,compile:function(){return{pre:function(t,e,o){var s=o.$$observers||(o.$$observers=Ht()),c=o[i];c!==r&&(l=c&&n(c,!0,a,u),r=c),l&&(o[i]=l(t),(s[i]||(s[i]=[])).$$inter=!0,(o.$$observers&&o.$$observers[i].$$scope||t).$watch(l,function(t,e){"class"===i&&t!==e?o.$updateClass(t,e):o.$set(i,t)}))}}}})}}function Tt(e,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(e)for(i=0,o=e.length;i<o;i++)if(e[i]===a){e[i++]=r;for(var c=i,l=c+s-1,h=e.length;c<h;c++,l++)l<h?e[c]=e[l]:delete e[c];e.length-=s-1,e.context===a&&(e.context=r);break}u&&u.replaceChild(r,a);var p=t.document.createDocumentFragment();for(i=0;i<s;i++)p.appendChild(n[i]);for(f.hasData(a)&&(f.data(r,f.data(a)),f(a).off("$destroy")),f.cleanData(p.querySelectorAll("*")),i=1;i<s;i++)delete n[i];n[0]=r,n.length=1}function Pt(t,e){return O(function(){return t.apply(null,arguments)},t,e)}function jt(t,e,n,r,i,o){try{t(e,n,r,i,o)}catch(t){d(t,wt(n))}}function Mt(t,e){if(w)throw pn("missingattr","Attribute '{0}' of '{1}' is non-optional and must be set!",t,e)}function Nt(t,e,r,i,o){var a,u=[],c={};function l(e,n,i){G(r.$onChanges)&&!st(n,i)&&(P||(t.$$postDigest(J),P=[]),a||(a={},P.push(f)),a[e]&&(i=a[e].previousValue),a[e]=new $n(i,n))}function f(){r.$onChanges(a),a=void 0}return E(i,function(i,a){var f,h,p,d,v,$=i.attrName,m=i.optional;switch(i.mode){case"@":m||s.call(e,$)||(Mt($,o.name),r[a]=e[$]=void 0),v=e.$observe($,function(t){if(F(t)||Y(t)){var e=r[a];l(a,t,e),r[a]=t}}),e.$$observers[$].$$scope=t,F(f=e[$])?r[a]=n(f)(t):Y(f)&&(r[a]=f),c[a]=new $n(dn,r[a]),u.push(v);break;case"=":if(!s.call(e,$)){if(m)break;Mt($,o.name),e[$]=void 0}if(m&&!e[$])break;h=C(e[$]),d=h.literal?ut:st,p=h.assign||function(){throw f=r[a]=h(t),pn("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",e[$],$,o.name)},f=r[a]=h(t);var g=function(e){return d(e,r[a])||(d(e,f)?p(t,e=r[a]):r[a]=e),f=e};g.$stateful=!0,v=i.collection?t.$watchCollection(e[$],g):t.$watch(C(e[$],g),null,h.literal),u.push(v);break;case"<":if(!s.call(e,$)){if(m)break;Mt($,o.name),e[$]=void 0}if(m&&!e[$])break;var y=(h=C(e[$])).literal,w=r[a]=h(t);c[a]=new $n(dn,r[a]),v=t.$watch(h,function(t,e){if(e===t){if(e===w||y&&ut(e,w))return;e=w}l(a,t,e),r[a]=t},y),u.push(v);break;case"&":if(m||s.call(e,$)||Mt($,o.name),(h=e.hasOwnProperty($)?C(e[$]):j)===j&&m)break;r[a]=function(e){return h(t,e)}}}),{initialChanges:c,removeWatches:u.length&&function(){for(var t=0,e=u.length;t<e;++t)u[t]()}}}}]}function $n(t,e){this.previousValue=t,this.currentValue=e}vn.$inject=["$provide","$$sanitizeUriProvider"],$n.prototype.isFirstChange=function(){return this.previousValue===dn};var mn=/^((?:x|data)[:\-_])/i,gn=/[:\-_]+(.)/g;function yn(t){return t.replace(mn,"").replace(gn,function(t,e,n){return n?e.toUpperCase():e})}function wn(t,e){var n="",r=t.split(/\s+/),i=e.split(/\s+/);t:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a===i[s])continue t;n+=(n.length>0?" ":"")+a}return n}function bn(t){var e=(t=f(t)).length;if(e<=1)return t;for(;e--;){var n=t[e];(n.nodeType===Bt||n.nodeType===Lt&&""===n.nodeValue.trim())&&v.call(t,e,1)}return t}var Sn=i("$controller"),En=/^(\S+)(\s+as\s+([\w$]+))?$/;function xn(){var t={},e=!1;this.has=function(e){return t.hasOwnProperty(e)},this.register=function(e,n){Nt(e,"controller"),H(e)?O(t,e):t[e]=n},this.allowGlobals=function(){e=!0},this.$get=["$injector","$window",function(n,r){return function(i,a,s,u){var c,l,f,h;if(s=!0===s,u&&F(u)&&(h=u),F(i)){if(!(l=i.match(En)))throw Sn("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",i);if(f=l[1],h=h||l[3],!(i=t.hasOwnProperty(f)?t[f]:Dt(a.$scope,f,!0)||(e?Dt(r,f,!0):void 0)))throw Sn("ctrlreg","The controller with the name '{0}' is not registered.",f);Mt(i,f,!0)}if(s){var p=(z(i)?i[i.length-1]:i).prototype;return c=Object.create(p||null),h&&o(a,h,c,f||i.name),O(function(){var t=n.invoke(i,c,a,f);return t!==c&&(H(t)||G(t))&&(c=t,h&&o(a,h,c,f||i.name)),c},{instance:c,identifier:h})}return c=n.instantiate(i,a,f),h&&o(a,h,c,f||i.name),c};function o(t,e,n,r){if(!t||!H(t.$scope))throw i("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",r,e);t.$scope[e]=n}}]}function Cn(){this.$get=["$window",function(t){return f(t.document)}]}function _n(){this.$get=["$document","$rootScope",function(t,e){var n=t[0],r=n&&n.hidden;function i(){r=n.hidden}return t.on("visibilitychange",i),e.$on("$destroy",function(){t.off("visibilitychange",i)}),function(){return r}}]}function kn(){this.$get=["$log",function(t){return function(e,n){t.error.apply(t,arguments)}}]}var Rn=function(){this.$get=["$document",function(t){return function(e){return e?!e.nodeType&&e instanceof f&&(e=e[0]):e=t[0].body,e.offsetWidth+1}}]},On="application/json",An={"Content-Type":On+";charset=utf-8"},Tn=/^\[|^\{(?!\{)/,Pn={"[":/]$/,"{":/}$/},Vn=/^\)]\}',?\n/,jn=i("$http");function In(t){return H(t)?B(t)?t.toISOString():vt(t):t}function Mn(){this.$get=function(){return function(t){if(!t)return"";var e=[];return x(t,function(t,n){null===t||D(t)||G(t)||(z(t)?E(t,function(t){e.push(Ct(n)+"="+Ct(In(t)))}):e.push(Ct(n)+"="+Ct(In(t))))}),e.join("&")}}}function Nn(){this.$get=function(){return function(t){if(!t)return"";var e=[];return function t(n,r,i){if(null===n||D(n))return;z(n)?E(n,function(e,n){t(e,r+"["+(H(e)?n:"")+"]")}):H(n)&&!B(n)?x(n,function(e,n){t(e,r+(i?"":"[")+n+(i?"":"]"))}):e.push(Ct(r)+"="+Ct(In(n)))}(t,"",!0),e.join("&")}}}function Dn(t,e){if(F(t)){var n=t.replace(Vn,"").trim();if(n){var r=e("Content-Type"),i=r&&0===r.indexOf(On);if(i||(a=(o=n).match(Tn))&&Pn[a[0]].test(o))try{t=$t(n)}catch(e){if(!i)return t;throw jn("baddata",'Data must be a valid JSON object. Received: "{0}". Parse error: "{1}"',t,e)}}}var o,a;return t}function Un(t){var e,n=Ht();function r(t,e){t&&(n[t]=n[t]?n[t]+", "+e:e)}return F(t)?E(t.split("\n"),function(t){e=t.indexOf(":"),r(u(tt(t.substr(0,e))),tt(t.substr(e+1)))}):H(t)&&E(t,function(t,e){r(u(e),tt(t))}),n}function Hn(t){var e;return function(n){if(e||(e=Un(t)),n){var r=e[u(n)];return void 0===r&&(r=null),r}return e}}function qn(t,e,n,r){return G(r)?r(t,e,n):(E(r,function(r){t=r(t,e,n)}),t)}function Fn(t){return 200<=t&&t<300}function Ln(){var t=this.defaults={transformResponse:[Dn],transformRequest:[function(t){return H(t)&&(r=t,"[object File]"!==m.call(r))&&(n=t,"[object Blob]"!==m.call(n))&&(e=t,"[object FormData]"!==m.call(e))?vt(t):t;var e,n,r}],headers:{common:{Accept:"application/json, text/plain, */*"},post:Gt(An),put:Gt(An),patch:Gt(An)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer",jsonpCallbackParam:"callback"},e=!1;this.useApplyAsync=function(t){return U(t)?(e=!!t,this):e};var n=this.interceptors=[];this.$get=["$browser","$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector","$sce",function(r,o,a,s,l,f,h,p){var d=s("$http");t.paramSerializer=F(t.paramSerializer)?h.get(t.paramSerializer):t.paramSerializer;var v=[];function $(n){if(!H(n))throw i("$http")("badreq","Http request configuration must be an object.  Received: {0}",n);if(!F(p.valueOf(n.url)))throw i("$http")("badreq","Http request configuration url must be a string or a $sce trusted object.  Received: {0}",n.url);var s=O({method:"get",transformRequest:t.transformRequest,transformResponse:t.transformResponse,paramSerializer:t.paramSerializer,jsonpCallbackParam:t.jsonpCallbackParam},n);s.headers=function(e){var n,r,i,o=t.headers,a=O({},e.headers);o=O({},o.common,o[u(e.method)]);t:for(n in o){for(i in r=u(n),a)if(u(i)===r)continue t;a[n]=o[n]}return s=a,c=Gt(e),f={},E(s,function(t,e){G(t)?null!=(l=t(c))&&(f[e]=l):f[e]=t}),f;var s,c,l,f}(n),s.method=c(s.method),s.paramSerializer=F(s.paramSerializer)?h.get(s.paramSerializer):s.paramSerializer,r.$$incOutstandingRequestCount();var m=[],g=[],y=f.resolve(s);return E(v,function(t){(t.request||t.requestError)&&m.unshift(t.request,t.requestError),(t.response||t.responseError)&&g.push(t.response,t.responseError)}),y=(y=w(y=(y=w(y,m)).then(function(n){var r=n.headers,i=qn(n.data,Hn(r),void 0,n.transformRequest);D(i)&&E(r,function(t,e){"content-type"===u(e)&&delete r[e]});D(n.withCredentials)&&!D(t.withCredentials)&&(n.withCredentials=t.withCredentials);return function(n,r){var i,s,c=f.defer(),h=c.promise,v=n.headers,m="jsonp"===u(n.method),g=n.url;m?g=p.getTrustedResourceUrl(g):F(g)||(g=p.valueOf(g));y=g,w=n.paramSerializer(n.params),w.length>0&&(y+=(-1===y.indexOf("?")?"?":"&")+w),g=y,m&&(g=function(t,e){var n=t.split("?");if(n.length>2)throw jn("badjsonp",'Illegal use more than one "?", in url, "{1}"',t);return E(St(n[1]),function(n,r){if("JSON_CALLBACK"===n)throw jn("badjsonp",'Illegal use of JSON_CALLBACK in url, "{0}"',t);if(r===e)throw jn("badjsonp",'Illegal use of callback param, "{0}", in url, "{1}"',e,t)}),t+=(-1===t.indexOf("?")?"?":"&")+e+"=JSON_CALLBACK"}(g,n.jsonpCallbackParam));var y,w;$.pendingRequests.push(n),h.then(_,_),!n.cache&&!t.cache||!1===n.cache||"GET"!==n.method&&"JSONP"!==n.method||(i=H(n.cache)?n.cache:H(t.cache)?t.cache:d);i&&(U(s=i.get(g))?Q(s)?s.then(C,C):z(s)?x(s[1],s[0],Gt(s[2]),s[3],s[4]):x(s,200,{},"OK","complete"):i.put(g,h));if(D(s)){var b=oi(n.url)?a()[n.xsrfCookieName||t.xsrfCookieName]:void 0;b&&(v[n.xsrfHeaderName||t.xsrfHeaderName]=b),o(n.method,g,r,function(t,n,r,o,a){i&&(Fn(t)?i.put(g,[t,n,Un(r),o,a]):i.remove(g));function s(){x(n,t,r,o,a)}e?l.$applyAsync(s):(s(),l.$$phase||l.$apply())},v,n.timeout,n.withCredentials,n.responseType,S(n.eventHandlers),S(n.uploadEventHandlers))}return h;function S(t){if(t){var n={};return E(t,function(t,r){n[r]=function(n){function r(){t(n)}e?l.$applyAsync(r):l.$$phase?r():l.$apply(r)}}),n}}function x(t,e,r,i,o){(Fn(e=e>=-1?e:0)?c.resolve:c.reject)({data:t,status:e,headers:Hn(r),config:n,statusText:i,xhrStatus:o})}function C(t){x(t.data,t.status,Gt(t.headers()),t.statusText,t.xhrStatus)}function _(){var t=$.pendingRequests.indexOf(n);-1!==t&&$.pendingRequests.splice(t,1)}}(n,i).then(b,b)}),g)).finally(function(){r.$$completeOutstandingRequest(j)});function w(t,e){for(var n=0,r=e.length;n<r;){var i=e[n++],o=e[n++];t=t.then(i,o)}return e.length=0,t}function b(t){var e=O({},t);return e.data=qn(t.data,t.headers,t.status,s.transformResponse),Fn(t.status)?e:f.reject(e)}}return E(n,function(t){v.unshift(F(t)?h.get(t):h.invoke(t))}),$.pendingRequests=[],function(t){E(arguments,function(t){$[t]=function(e,n){return $(O({},n||{},{method:t,url:e}))}})}("get","delete","head","jsonp"),function(t){E(arguments,function(t){$[t]=function(e,n,r){return $(O({},r||{},{method:t,url:e,data:n}))}})}("post","put","patch"),$.defaults=t,$}]}function Bn(){this.$get=function(){return function(){return new t.XMLHttpRequest}}}function zn(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(t,e,n,r){return function(t,e,n,r,i){return function(o,a,s,c,l,f,h,p,d,v){if(a=a||t.url(),"jsonp"===u(o))var $=r.createCallback(a),m=function(t,e,n){t=t.replace("JSON_CALLBACK",e);var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=t,o.async=!0,a=function(t){o.removeEventListener("load",a),o.removeEventListener("error",a),i.body.removeChild(o),o=null;var s=-1,u="unknown";t&&("load"!==t.type||r.wasCalled(e)||(t={type:"error"}),u=t.type,s="error"===t.type?404:200),n&&n(s,u)},o.addEventListener("load",a),o.addEventListener("error",a),i.body.appendChild(o),a}(a,$,function(t,e){var n=200===t&&r.getResponse($);b(c,t,n,"",e,"complete"),r.removeCallback($)});else{var g=e(o,a);g.open(o,a,!0),E(l,function(t,e){U(t)&&g.setRequestHeader(e,t)}),g.onload=function(){var t=g.statusText||"",e="response"in g?g.response:g.responseText,n=1223===g.status?204:g.status;0===n&&(n=e?200:"file"===ii(a).protocol?404:0),b(c,n,e,g.getAllResponseHeaders(),t,"complete")};if(g.onerror=function(){b(c,-1,null,null,"","error")},g.onabort=function(){b(c,-1,null,null,"","abort")},g.ontimeout=function(){b(c,-1,null,null,"","timeout")},E(d,function(t,e){g.addEventListener(e,t)}),E(v,function(t,e){g.upload.addEventListener(e,t)}),h&&(g.withCredentials=!0),p)try{g.responseType=p}catch(t){if("json"!==p)throw t}g.send(D(s)?null:s)}if(f>0)var y=n(w,f);else Q(f)&&f.then(w);function w(){m&&m(),g&&g.abort()}function b(t,e,r,i,o,a){U(y)&&n.cancel(y),m=g=null,t(e,r,i,o,a)}}}(t,r,t.defer,e,n[0])}]}var Wn=w.$interpolateMinErr=i("$interpolate");function Gn(){var t="{{",e="}}";this.startSymbol=function(e){return e?(t=e,this):t},this.endSymbol=function(t){return t?(e=t,this):e},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){var o=t.length,a=e.length,s=new RegExp(t.replace(/./g,c),"g"),u=new RegExp(e.replace(/./g,c),"g");function c(t){return"\\\\\\"+t}function l(n){return n.replace(s,t).replace(u,e)}function f(t,e,n,r){var i=t.$watch(function(t){return i(),r(t)},e,n);return i}function h(s,u,c,h){if(!s.length||-1===s.indexOf(t)){var p;if(!u)(p=M(l(s))).exp=s,p.expressions=[],p.$$watchDelegate=f;return p}h=!!h;for(var d,v,$,m=0,g=[],y=[],w=s.length,b=[],S=[];m<w;){if(-1===(d=s.indexOf(t,m))||-1===(v=s.indexOf(e,d+o))){m!==w&&b.push(l(s.substring(m)));break}m!==d&&b.push(l(s.substring(m,d))),$=s.substring(d+o,v),g.push($),y.push(n($,C)),m=v+a,S.push(b.length),b.push("")}if(c&&b.length>1&&Wn.throwNoconcat(s),!u||g.length){var E=function(t){for(var e=0,n=g.length;e<n;e++){if(h&&D(t[e]))return;b[S[e]]=t[e]}return b.join("")},x=function(t){return c?i.getTrusted(c,t):i.valueOf(t)};return O(function(t){var e=0,n=g.length,i=new Array(n);try{for(;e<n;e++)i[e]=y[e](t);return E(i)}catch(t){r(Wn.interr(s,t))}},{exp:s,expressions:g,$$watchDelegate:function(t,e){var n;return t.$watchGroup(y,function(r,i){var o=E(r);e.call(this,o,r!==i?n:o,t),n=o})}})}function C(t){try{return t=x(t),h&&!U(t)?t:qt(t)}catch(t){r(Wn.interr(s,t))}}}return h.startSymbol=function(){return t},h.endSymbol=function(){return e},h}]}function Jn(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(t,e,n,r,i){var o={};function a(a,s,u,c){var l=arguments.length>4,f=l?ht(arguments,4):[],h=e.setInterval,p=e.clearInterval,d=0,v=U(c)&&!c,$=(v?r:n).defer(),m=$.promise;return u=U(u)?u:0,m.$$intervalId=h(function(){v?i.defer(g):t.$evalAsync(g),$.notify(d++),u>0&&d>=u&&($.resolve(d),p(m.$$intervalId),delete o[m.$$intervalId]),v||t.$apply()},s),o[m.$$intervalId]=$,m;function g(){l?a.apply(null,f):a(d)}}return a.cancel=function(t){return!!(t&&t.$$intervalId in o)&&(Hr(o[t.$$intervalId].promise),o[t.$$intervalId].reject("canceled"),e.clearInterval(t.$$intervalId),delete o[t.$$intervalId],!0)},a}]}Wn.throwNoconcat=function(t){throw Wn("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",t)},Wn.interr=function(t,e){return Wn("interr","Can't interpolate: {0}\n{1}",t,e.toString())};var Kn=function(){this.$get=function(){var t=w.callbacks,e={};return{createCallback:function(n){var r,i="_"+(t.$$counter++).toString(36),o="angular.callbacks."+i,a=((r=function(t){r.data=t,r.called=!0}).id=i,r);return e[o]=t[i]=a,o},wasCalled:function(t){return e[t].called},getResponse:function(t){return e[t].data},removeCallback:function(n){var r=e[n];delete t[r.id],delete e[n]}}}},Zn=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,Yn={http:80,https:443,ftp:21},Qn=i("$location");function Xn(t){for(var e=t.split("/"),n=e.length;n--;)e[n]=xt(e[n].replace(/%2F/g,"/"));return e.join("/")}function tr(t,e){var n=ii(t);e.$$protocol=n.protocol,e.$$host=n.hostname,e.$$port=T(n.port)||Yn[n.protocol]||null}var er=/^\s*[\\/]{2,}/;function nr(t,e,n){if(er.test(t))throw Qn("badpath",'Invalid url "{0}".',t);var r="/"!==t.charAt(0);r&&(t="/"+t);var i=ii(t),o=r&&"/"===i.pathname.charAt(0)?i.pathname.substring(1):i.pathname;e.$$path=function(t,e){for(var n=t.split("/"),r=n.length;r--;)n[r]=decodeURIComponent(n[r]),e&&(n[r]=n[r].replace(/\//g,"%2F"));return n.join("/")}(o,n),e.$$search=St(i.search),e.$$hash=decodeURIComponent(i.hash),e.$$path&&"/"!==e.$$path.charAt(0)&&(e.$$path="/"+e.$$path)}function rr(t,e){return t.slice(0,e.length)===e}function ir(t,e){if(rr(e,t))return e.substr(t.length)}function or(t){var e=t.indexOf("#");return-1===e?t:t.substr(0,e)}function ar(t){return t.replace(/(#.+)|#$/,"$1")}function sr(t,e,n){this.$$html5=!0,n=n||"",tr(t,this),this.$$parse=function(t){var n=ir(e,t);if(!F(n))throw Qn("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',t,e);nr(n,this,!0),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var t=Et(this.$$search),n=this.$$hash?"#"+xt(this.$$hash):"";this.$$url=Xn(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+this.$$url.substr(1),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(r,i){return i&&"#"===i[0]?(this.hash(i.slice(1)),!0):(U(o=ir(t,r))?(a=o,s=n&&U(o=ir(n,o))?e+(ir("/",o)||o):t+a):U(o=ir(e,r))?s=e+o:e===r+"/"&&(s=e),s&&this.$$parse(s),!!s);var o,a,s}}function ur(t,e,n){tr(t,this),this.$$parse=function(r){var i,o=ir(t,r)||ir(e,r);D(o)||"#"!==o.charAt(0)?this.$$html5?i=o:(i="",D(o)&&(t=r,this.replace())):D(i=ir(n,o))&&(i=o),nr(i,this,!1),this.$$path=function(t,e,n){var r,i=/^\/[A-Z]:(\/.*)/;rr(e,n)&&(e=e.replace(n,""));if(i.exec(e))return t;return(r=i.exec(t))?r[1]:t}(this.$$path,i,t),this.$$compose()},this.$$compose=function(){var e=Et(this.$$search),r=this.$$hash?"#"+xt(this.$$hash):"";this.$$url=Xn(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+(this.$$url?n+this.$$url:""),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(e,n){return or(t)===or(e)&&(this.$$parse(e),!0)}}function cr(t,e,n){this.$$html5=!0,ur.apply(this,arguments),this.$$parseLinkUrl=function(r,i){return i&&"#"===i[0]?(this.hash(i.slice(1)),!0):(t===or(r)?o=r:(a=ir(e,r))?o=t+n+a:e===r+"/"&&(o=e),o&&this.$$parse(o),!!o);var o,a},this.$$compose=function(){var e=Et(this.$$search),r=this.$$hash?"#"+xt(this.$$hash):"";this.$$url=Xn(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+n+this.$$url,this.$$urlUpdatedByLocation=!0}}var lr={$$absUrl:"",$$html5:!1,$$replace:!1,absUrl:fr("$$absUrl"),url:function(t){if(D(t))return this.$$url;var e=Zn.exec(t);return(e[1]||""===t)&&this.path(decodeURIComponent(e[1])),(e[2]||e[1]||""===t)&&this.search(e[3]||""),this.hash(e[5]||""),this},protocol:fr("$$protocol"),host:fr("$$host"),port:fr("$$port"),path:hr("$$path",function(t){return"/"===(t=null!==t?t.toString():"").charAt(0)?t:"/"+t}),search:function(t,e){switch(arguments.length){case 0:return this.$$search;case 1:if(F(t)||L(t))t=t.toString(),this.$$search=St(t);else{if(!H(t))throw Qn("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");E(t=at(t,{}),function(e,n){null==e&&delete t[n]}),this.$$search=t}break;default:D(e)||null===e?delete this.$$search[t]:this.$$search[t]=e}return this.$$compose(),this},hash:hr("$$hash",function(t){return null!==t?t.toString():""}),replace:function(){return this.$$replace=!0,this}};function fr(t){return function(){return this[t]}}function hr(t,e){return function(n){return D(n)?this[t]:(this[t]=e(n),this.$$compose(),this)}}function pr(){var t="!",e={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(e){return U(e)?(t=e,this):t},this.html5Mode=function(t){return Y(t)?(e.enabled=t,this):H(t)?(Y(t.enabled)&&(e.enabled=t.enabled),Y(t.requireBase)&&(e.requireBase=t.requireBase),(Y(t.rewriteLinks)||F(t.rewriteLinks))&&(e.rewriteLinks=t.rewriteLinks),this):e},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){var s,u,c,l,h=r.baseHref(),p=r.url();if(e.enabled){if(!h&&e.requireBase)throw Qn("nobase","$location in HTML5 mode requires a <base> tag to be present!");c=(l=p).substring(0,l.indexOf("/",l.indexOf("//")+2))+(h||"/"),u=i.history?sr:cr}else c=or(p),u=ur;var d,v=(d=c).substr(0,or(d).lastIndexOf("/")+1);(s=new u(c,v,"#"+t)).$$parseLinkUrl(p,p),s.$$state=r.state();var $=/^\s*(javascript|mailto):/i;function m(t,e,n){var i=s.url(),o=s.$$state;try{r.url(t,e,n),s.$$state=r.state()}catch(t){throw s.url(i),s.$$state=o,t}}o.on("click",function(t){var i=e.rewriteLinks;if(i&&!t.ctrlKey&&!t.metaKey&&!t.shiftKey&&2!==t.which&&2!==t.button){for(var u=f(t.target);"a"!==rt(u[0]);)if(u[0]===o[0]||!(u=u.parent())[0])return;if(!F(i)||!D(u.attr(i))){var c=u.prop("href"),l=u.attr("href")||u.attr("xlink:href");H(c)&&"[object SVGAnimatedString]"===c.toString()&&(c=ii(c.animVal).href),$.test(c)||!c||u.attr("target")||t.isDefaultPrevented()||s.$$parseLinkUrl(c,l)&&(t.preventDefault(),s.absUrl()!==r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}}),ar(s.absUrl())!==ar(p)&&r.url(s.absUrl(),!0);var g=!0;return r.onUrlChange(function(t,e){rr(t,v)?(n.$evalAsync(function(){var r,i=s.absUrl(),o=s.$$state;t=ar(t),s.$$parse(t),s.$$state=e,r=n.$broadcast("$locationChangeStart",t,i,e,o).defaultPrevented,s.absUrl()===t&&(r?(s.$$parse(i),s.$$state=o,m(i,!1,o)):(g=!1,y(i,o)))}),n.$$phase||n.$digest()):a.location.href=t}),n.$watch(function(){if(g||s.$$urlUpdatedByLocation){s.$$urlUpdatedByLocation=!1;var t=ar(r.url()),e=ar(s.absUrl()),o=r.state(),a=s.$$replace,u=t!==e||s.$$html5&&i.history&&o!==s.$$state;(g||u)&&(g=!1,n.$evalAsync(function(){var e=s.absUrl(),r=n.$broadcast("$locationChangeStart",e,t,s.$$state,o).defaultPrevented;s.absUrl()===e&&(r?(s.$$parse(t),s.$$state=o):(u&&m(e,a,o===s.$$state?null:s.$$state),y(t,o)))}))}s.$$replace=!1}),s;function y(t,e){n.$broadcast("$locationChangeSuccess",s.absUrl(),t,s.$$state,e)}}]}function dr(){var t=!0,e=this;this.debugEnabled=function(e){return U(e)?(t=e,this):t},this.$get=["$window",function(n){var r,i=l||/\bEdge\//.test(n.navigator&&n.navigator.userAgent);return{log:o("log"),info:o("info"),warn:o("warn"),error:o("error"),debug:(r=o("debug"),function(){t&&r.apply(e,arguments)})};function o(t){var e=n.console||{},r=e[t]||e.log||j;return function(){var t=[];return E(arguments,function(e){var n;t.push((W(n=e)&&(n.stack&&i?n=n.message&&-1===n.stack.indexOf(n.message)?"Error: "+n.message+"\n"+n.stack:n.stack:n.sourceURL&&(n=n.message+"\n"+n.sourceURL+":"+n.line)),n))}),Function.prototype.apply.call(r,e,t)}}}]}E([cr,ur,sr],function(t){t.prototype=Object.create(lr),t.prototype.state=function(e){if(!arguments.length)return this.$$state;if(t!==sr||!this.$$html5)throw Qn("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=D(e)?null:e,this.$$urlUpdatedByLocation=!0,this}});var vr=i("$parse"),$r={}.constructor.prototype.valueOf;function mr(t){return t+""}var gr=Ht();E("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(t){gr[t]=!0});var yr={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},wr=function(t){this.options=t};wr.prototype={constructor:wr,lex:function(t){for(this.text=t,this.index=0,this.tokens=[];this.index<this.text.length;){var e=this.text.charAt(this.index);if('"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var n=e+this.peek(),r=n+this.peek(2),i=gr[e],o=gr[n],a=gr[r];if(i||o||a){var s=a?r:o?n:e;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(t,e){return-1!==e.indexOf(t)},peek:function(t){var e=t||1;return this.index+e<this.text.length&&this.text.charAt(this.index+e)},isNumber:function(t){return"0"<=t&&t<="9"&&"string"==typeof t},isWhitespace:function(t){return" "===t||"\r"===t||"\t"===t||"\n"===t||"\v"===t||" "===t},isIdentifierStart:function(t){return this.options.isIdentifierStart?this.options.isIdentifierStart(t,this.codePointAt(t)):this.isValidIdentifierStart(t)},isValidIdentifierStart:function(t){return"a"<=t&&t<="z"||"A"<=t&&t<="Z"||"_"===t||"$"===t},isIdentifierContinue:function(t){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(t,this.codePointAt(t)):this.isValidIdentifierContinue(t)},isValidIdentifierContinue:function(t,e){return this.isValidIdentifierStart(t,e)||this.isNumber(t)},codePointAt:function(t){return 1===t.length?t.charCodeAt(0):(t.charCodeAt(0)<<10)+t.charCodeAt(1)-56613888},peekMultichar:function(){var t=this.text.charAt(this.index),e=this.peek();if(!e)return t;var n=t.charCodeAt(0),r=e.charCodeAt(0);return n>=55296&&n<=56319&&r>=56320&&r<=57343?t+e:t},isExpOperator:function(t){return"-"===t||"+"===t||this.isNumber(t)},throwError:function(t,e,n){n=n||this.index;var r=U(e)?"s "+e+"-"+this.index+" ["+this.text.substring(e,n)+"]":" "+n;throw vr("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",t,r,this.text)},readNumber:function(){for(var t="",e=this.index;this.index<this.text.length;){var n=u(this.text.charAt(this.index));if("."===n||this.isNumber(n))t+=n;else{var r=this.peek();if("e"===n&&this.isExpOperator(r))t+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"===t.charAt(t.length-1))t+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!==t.charAt(t.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:e,text:t,constant:!0,value:Number(t)})},readIdent:function(){var t=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var e=this.peekMultichar();if(!this.isIdentifierContinue(e))break;this.index+=e.length}this.tokens.push({index:t,text:this.text.slice(t,this.index),identifier:!0})},readString:function(t){var e=this.index;this.index++;for(var n="",r=t,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{n+=yr[o]||o}i=!1}else if("\\"===o)i=!0;else{if(o===t)return this.index++,void this.tokens.push({index:e,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",e)}};var br=function(t,e){this.lexer=t,this.options=e};function Sr(t,e){return void 0!==t?t:e}function Er(t,e){return void 0===t?e:void 0===e?t:t+e}br.Program="Program",br.ExpressionStatement="ExpressionStatement",br.AssignmentExpression="AssignmentExpression",br.ConditionalExpression="ConditionalExpression",br.LogicalExpression="LogicalExpression",br.BinaryExpression="BinaryExpression",br.UnaryExpression="UnaryExpression",br.CallExpression="CallExpression",br.MemberExpression="MemberExpression",br.Identifier="Identifier",br.Literal="Literal",br.ArrayExpression="ArrayExpression",br.Property="Property",br.ObjectExpression="ObjectExpression",br.ThisExpression="ThisExpression",br.LocalsExpression="LocalsExpression",br.NGValueParameter="NGValueParameter",br.prototype={ast:function(t){this.text=t,this.tokens=this.lexer.lex(t);var e=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var t=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&t.push(this.expressionStatement()),!this.expect(";"))return{type:br.Program,body:t}},expressionStatement:function(){return{type:br.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var t=this.expression();this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var t=this.ternary();if(this.expect("=")){if(!Rr(t))throw vr("lval","Trying to assign a value to a non l-value");t={type:br.AssignmentExpression,left:t,right:this.assignment(),operator:"="}}return t},ternary:function(){var t,e,n=this.logicalOR();return this.expect("?")&&(t=this.expression(),this.consume(":"))?(e=this.expression(),{type:br.ConditionalExpression,test:n,alternate:t,consequent:e}):n},logicalOR:function(){for(var t=this.logicalAND();this.expect("||");)t={type:br.LogicalExpression,operator:"||",left:t,right:this.logicalAND()};return t},logicalAND:function(){for(var t=this.equality();this.expect("&&");)t={type:br.LogicalExpression,operator:"&&",left:t,right:this.equality()};return t},equality:function(){for(var t,e=this.relational();t=this.expect("==","!=","===","!==");)e={type:br.BinaryExpression,operator:t.text,left:e,right:this.relational()};return e},relational:function(){for(var t,e=this.additive();t=this.expect("<",">","<=",">=");)e={type:br.BinaryExpression,operator:t.text,left:e,right:this.additive()};return e},additive:function(){for(var t,e=this.multiplicative();t=this.expect("+","-");)e={type:br.BinaryExpression,operator:t.text,left:e,right:this.multiplicative()};return e},multiplicative:function(){for(var t,e=this.unary();t=this.expect("*","/","%");)e={type:br.BinaryExpression,operator:t.text,left:e,right:this.unary()};return e},unary:function(){var t;return(t=this.expect("+","-","!"))?{type:br.UnaryExpression,operator:t.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var t,e;for(this.expect("(")?(t=this.filterChain(),this.consume(")")):this.expect("[")?t=this.arrayDeclaration():this.expect("{")?t=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?t=at(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?t={type:br.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?t=this.identifier():this.peek().constant?t=this.constant():this.throwError("not a primary expression",this.peek());e=this.expect("(","[",".");)"("===e.text?(t={type:br.CallExpression,callee:t,arguments:this.parseArguments()},this.consume(")")):"["===e.text?(t={type:br.MemberExpression,object:t,property:this.expression(),computed:!0},this.consume("]")):"."===e.text?t={type:br.MemberExpression,object:t,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return t},filter:function(t){for(var e=[t],n={type:br.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return n},parseArguments:function(){var t=[];if(")"!==this.peekToken().text)do{t.push(this.filterChain())}while(this.expect(","));return t},identifier:function(){var t=this.consume();return t.identifier||this.throwError("is not a valid identifier",t),{type:br.Identifier,name:t.text}},constant:function(){return{type:br.Literal,value:this.consume().value}},arrayDeclaration:function(){var t=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;t.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:br.ArrayExpression,elements:t}},object:function(){var t,e=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;t={type:br.Property,kind:"init"},this.peek().constant?(t.key=this.constant(),t.computed=!1,this.consume(":"),t.value=this.expression()):this.peek().identifier?(t.key=this.identifier(),t.computed=!1,this.peek(":")?(this.consume(":"),t.value=this.expression()):t.value=t.key):this.peek("[")?(this.consume("["),t.key=this.expression(),this.consume("]"),t.computed=!0,this.consume(":"),t.value=this.expression()):this.throwError("invalid key",this.peek()),e.push(t)}while(this.expect(","));return this.consume("}"),{type:br.ObjectExpression,properties:e}},throwError:function(t,e){throw vr("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",e.text,t,e.index+1,this.text,this.text.substring(e.index))},consume:function(t){if(0===this.tokens.length)throw vr("ueoe","Unexpected end of expression: {0}",this.text);var e=this.expect(t);return e||this.throwError("is unexpected, expecting ["+t+"]",this.peek()),e},peekToken:function(){if(0===this.tokens.length)throw vr("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(t,e,n,r){return this.peekAhead(0,t,e,n,r)},peekAhead:function(t,e,n,r,i){if(this.tokens.length>t){var o=this.tokens[t],a=o.text;if(a===e||a===n||a===r||a===i||!e&&!n&&!r&&!i)return o}return!1},expect:function(t,e,n,r){var i=this.peek(t,e,n,r);return!!i&&(this.tokens.shift(),i)},selfReferential:{this:{type:br.ThisExpression},$locals:{type:br.LocalsExpression}}};var xr=1,Cr=2;function _r(t,e,n){var r,i,o,a,s,u=t.isPure=function(t,e){switch(t.type){case br.MemberExpression:if(t.computed)return!1;break;case br.UnaryExpression:return xr;case br.BinaryExpression:return"+"!==t.operator&&xr;case br.CallExpression:return!1}return void 0===e?Cr:e}(t,n);switch(t.type){case br.Program:r=!0,E(t.body,function(t){_r(t.expression,e,u),r=r&&t.expression.constant}),t.constant=r;break;case br.Literal:t.constant=!0,t.toWatch=[];break;case br.UnaryExpression:_r(t.argument,e,u),t.constant=t.argument.constant,t.toWatch=t.argument.toWatch;break;case br.BinaryExpression:_r(t.left,e,u),_r(t.right,e,u),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.left.toWatch.concat(t.right.toWatch);break;case br.LogicalExpression:_r(t.left,e,u),_r(t.right,e,u),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.constant?[]:[t];break;case br.ConditionalExpression:_r(t.test,e,u),_r(t.alternate,e,u),_r(t.consequent,e,u),t.constant=t.test.constant&&t.alternate.constant&&t.consequent.constant,t.toWatch=t.constant?[]:[t];break;case br.Identifier:t.constant=!1,t.toWatch=[t];break;case br.MemberExpression:_r(t.object,e,u),t.computed&&_r(t.property,e,u),t.constant=t.object.constant&&(!t.computed||t.property.constant),t.toWatch=t.constant?[]:[t];break;case br.CallExpression:o=!!t.filter&&(a=e,s=t.callee.name,!a(s).$stateful),r=o,i=[],E(t.arguments,function(t){_r(t,e,u),r=r&&t.constant,i.push.apply(i,t.toWatch)}),t.constant=r,t.toWatch=o?i:[t];break;case br.AssignmentExpression:_r(t.left,e,u),_r(t.right,e,u),t.constant=t.left.constant&&t.right.constant,t.toWatch=[t];break;case br.ArrayExpression:r=!0,i=[],E(t.elements,function(t){_r(t,e,u),r=r&&t.constant,i.push.apply(i,t.toWatch)}),t.constant=r,t.toWatch=i;break;case br.ObjectExpression:r=!0,i=[],E(t.properties,function(t){_r(t.value,e,u),r=r&&t.value.constant,i.push.apply(i,t.value.toWatch),t.computed&&(_r(t.key,e,!1),r=r&&t.key.constant,i.push.apply(i,t.key.toWatch))}),t.constant=r,t.toWatch=i;break;case br.ThisExpression:case br.LocalsExpression:t.constant=!1,t.toWatch=[]}}function kr(t){if(1===t.length){var e=t[0].expression,n=e.toWatch;return 1!==n.length?n:n[0]!==e?n:void 0}}function Rr(t){return t.type===br.Identifier||t.type===br.MemberExpression}function Or(t){if(1===t.body.length&&Rr(t.body[0].expression))return{type:br.AssignmentExpression,left:t.body[0].expression,right:{type:br.NGValueParameter},operator:"="}}function Ar(t){this.$filter=t}function Tr(t){this.$filter=t}function Pr(t,e,n){this.ast=new br(t,n),this.astCompiler=n.csp?new Tr(e):new Ar(e)}function Vr(t){return G(t.valueOf)?t.valueOf():$r.call(t)}function jr(){var t,e,n=Ht(),r={true:!0,false:!1,null:null,undefined:void 0};this.addLiteral=function(t,e){r[t]=e},this.setIdentifierFns=function(n,r){return t=n,e=r,this},this.$get=["$filter",function(i){var o={csp:ct().noUnsafeEval,literals:at(r),isIdentifierStart:G(t)&&t,isIdentifierContinue:G(e)&&e};return a.$$getAst=function(t){return new Pr(new wr(o),i,o).getAst(t).ast},a;function a(t,e){var r,a;switch(typeof t){case"string":if(t=t.trim(),!(r=n[a=t]))(r=new Pr(new wr(o),i,o).parse(t)).constant?r.$$watchDelegate=f:r.oneTime?r.$$watchDelegate=r.literal?l:c:r.inputs&&(r.$$watchDelegate=u),n[a]=r;return h(r,e);case"function":return h(t,e);default:return h(j,e)}}function s(t,e,n){return null==t||null==e?t===e:!("object"==typeof t&&"object"==typeof(t=Vr(t))&&!n)&&(t===e||t!=t&&e!=e)}function u(t,e,n,r,i){var o,a=r.inputs;if(1===a.length){var u=s;return a=a[0],t.$watch(function(t){var e=a(t);return s(e,u,a.isPure)||(o=r(t,void 0,void 0,[e]),u=e&&Vr(e)),o},e,n,i)}for(var c=[],l=[],f=0,h=a.length;f<h;f++)c[f]=s,l[f]=null;return t.$watch(function(t){for(var e=!1,n=0,i=a.length;n<i;n++){var u=a[n](t);(e||(e=!s(u,c[n],a[n].isPure)))&&(l[n]=u,c[n]=u&&Vr(u))}return e&&(o=r(t,void 0,void 0,l)),o},e,n,i)}function c(t,e,n,r,i){var o,a;return o=r.inputs?u(t,s,n,r,i):t.$watch(function(t){return r(t)},s,n);function s(t,n,r){a=t,G(e)&&e(t,n,r),U(t)&&r.$$postDigest(function(){U(a)&&o()})}}function l(t,e,n,r){var i,o;return i=t.$watch(function(t){return r(t)},function(t,n,r){o=t,G(e)&&e(t,n,r),a(t)&&r.$$postDigest(function(){a(o)&&i()})},n);function a(t){var e=!0;return E(t,function(t){U(t)||(e=!1)}),e}}function f(t,e,n,r){var i=t.$watch(function(t){return i(),r(t)},e,n);return i}function h(t,e){if(!e)return t;var n=t.$$watchDelegate,r=!1,i=n!==l&&n!==c?function(n,i,o,a){var s=r&&a?a[0]:t(n,i,o,a);return e(s,n,i)}:function(n,r,i,o){var a=t(n,r,i,o),s=e(a,n,r);return U(a)?s:a};return r=!t.inputs,n&&n!==u?(i.$$watchDelegate=n,i.inputs=t.inputs):e.$stateful||(i.$$watchDelegate=u,i.inputs=t.inputs?t.inputs:[t]),i.inputs&&(i.inputs=i.inputs.map(function(t){return t.isPure===Cr?function(e){return t(e)}:t})),i}}]}function Ir(){var t=!0;this.$get=["$rootScope","$exceptionHandler",function(e,n){return Nr(function(t){e.$evalAsync(t)},n,t)}],this.errorOnUnhandledRejections=function(e){return U(e)?(t=e,this):t}}function Mr(){var t=!0;this.$get=["$browser","$exceptionHandler",function(e,n){return Nr(function(t){e.defer(t)},n,t)}],this.errorOnUnhandledRejections=function(e){return U(e)?(t=e,this):t}}function Nr(t,e,n){var r=i("$q",TypeError),o=0,a=[];function s(){return new function(){var t=this.promise=new u;this.resolve=function(e){f(t,e)},this.reject=function(e){h(t,e)},this.notify=function(e){d(t,e)}}}function u(){this.$$state={status:0}}function c(){for(;!o&&a.length;){var t=a.shift();if(!Dr(t)){Ur(t);var n="Possibly unhandled rejection: "+Jt(t.value);W(t.value)?e(t.value,n):e(n)}}}function l(r){!n||r.pending||2!==r.status||Dr(r)||(0===o&&0===a.length&&t(c),a.push(r)),!r.processScheduled&&r.pending&&(r.processScheduled=!0,++o,t(function(){!function(r){var i,a,s;s=r.pending,r.processScheduled=!1,r.pending=void 0;try{for(var u=0,l=s.length;u<l;++u){Ur(r),a=s[u][0],i=s[u][r.status];try{G(i)?f(a,i(r.value)):1===r.status?f(a,r.value):h(a,r.value)}catch(t){h(a,t),t&&!0===t.$$passToExceptionHandler&&e(t)}}}finally{--o,n&&0===o&&t(c)}}(r)}))}function f(t,e){t.$$state.status||(e===t?p(t,r("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):function t(e,n){var r;var i=!1;try{(H(n)||G(n))&&(r=n.then),G(r)?(e.$$state.status=-1,r.call(n,function o(t){if(i)return;i=!0,function t(e,n){var r;var i=!1;try{(H(n)||G(n))&&(r=n.then),G(r)?(e.$$state.status=-1,r.call(n,o,a,function(t){d(e,t)})):(e.$$state.value=n,e.$$state.status=1,l(e.$$state))}catch(t){a(t)}function o(n){i||(i=!0,t(e,n))}function a(t){i||(i=!0,p(e,t))}}(e,t)},a,function(t){d(e,t)})):(e.$$state.value=n,e.$$state.status=1,l(e.$$state))}catch(t){a(t)}function o(n){i||(i=!0,t(e,n))}function a(t){i||(i=!0,p(e,t))}}(t,e))}function h(t,e){t.$$state.status||p(t,e)}function p(t,e){t.$$state.value=e,t.$$state.status=2,l(t.$$state)}function d(n,r){var i=n.$$state.pending;n.$$state.status<=0&&i&&i.length&&t(function(){for(var t,n,o=0,a=i.length;o<a;o++){n=i[o][0],t=i[o][3];try{d(n,G(t)?t(r):r)}catch(t){e(t)}}})}function v(t){var e=new u;return h(e,t),e}function $(t,e,n){var r=null;try{G(n)&&(r=n())}catch(t){return v(t)}return Q(r)?r.then(function(){return e(t)},v):e(t)}function m(t,e,n,r){var i=new u;return f(i,t),i.then(e,n,r)}O(u.prototype,{then:function(t,e,n){if(D(t)&&D(e)&&D(n))return this;var r=new u;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,t,e,n]),this.$$state.status>0&&l(this.$$state),r},catch:function(t){return this.then(null,t)},finally:function(t,e){return this.then(function(e){return $(e,g,t)},function(e){return $(e,v,t)},e)}});var g=m;function y(t){if(!G(t))throw r("norslvr","Expected resolverFn, got '{0}'",t);var e=new u;return t(function(t){f(e,t)},function(t){h(e,t)}),e}return y.prototype=u.prototype,y.defer=s,y.reject=v,y.when=m,y.resolve=g,y.all=function(t){var e=new u,n=0,r=z(t)?[]:{};return E(t,function(t,i){n++,m(t).then(function(t){r[i]=t,--n||f(e,r)},function(t){h(e,t)})}),0===n&&f(e,r),e},y.race=function(t){var e=s();return E(t,function(t){m(t).then(e.resolve,e.reject)}),e.promise},y}function Dr(t){return!!t.pur}function Ur(t){t.pur=!0}function Hr(t){Ur(t.$$state)}function qr(){this.$get=["$window","$timeout",function(t,e){var n=t.requestAnimationFrame||t.webkitRequestAnimationFrame,r=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(t){var e=n(t);return function(){r(e)}}:function(t){var n=e(t,16.66,!1);return function(){e.cancel(n)}};return o.supported=i,o}]}function Fr(){var t=10,e=i("$rootScope"),n=null,r=null;this.digestTtl=function(e){return arguments.length&&(t=e),t},this.$get=["$exceptionHandler","$parse","$browser",function(i,o,a){function u(t){t.currentScope.$$destroyed=!0}function c(){this.$id=_(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}c.prototype={constructor:c,$new:function(t,e){var n;return e=e||this,t?(n=new c).$root=this.$root:(this.$$ChildScope||(this.$$ChildScope=function(t){function e(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=_(),this.$$ChildScope=null}return e.prototype=t,e}(this)),n=new this.$$ChildScope),n.$parent=e,n.$$prevSibling=e.$$childTail,e.$$childHead?(e.$$childTail.$$nextSibling=n,e.$$childTail=n):e.$$childHead=e.$$childTail=n,(t||e!==this)&&n.$on("$destroy",u),n},$watch:function(t,e,r,i){var a=o(t),s=G(e)?e:j;if(a.$$watchDelegate)return a.$$watchDelegate(this,s,r,a,t);var u=this,c=u.$$watchers,l={fn:s,last:w,get:a,exp:i||t,eq:!!r};return n=null,c||((c=u.$$watchers=[]).$$digestWatchIndex=-1),c.unshift(l),c.$$digestWatchIndex++,g(this,1),function(){var t=ot(c,l);t>=0&&(g(u,-1),t<c.$$digestWatchIndex&&c.$$digestWatchIndex--),n=null}},$watchGroup:function(t,e){var n=new Array(t.length),r=new Array(t.length),i=[],o=this,a=!1,s=!0;if(!t.length){var u=!0;return o.$evalAsync(function(){u&&e(r,r,o)}),function(){u=!1}}if(1===t.length)return this.$watch(t[0],function(t,i,o){r[0]=t,n[0]=i,e(r,t===i?r:n,o)});function c(){a=!1,s?(s=!1,e(r,r,o)):e(r,n,o)}return E(t,function(t,e){var s=o.$watch(t,function(t,i){r[e]=t,n[e]=i,a||(a=!0,o.$evalAsync(c))});i.push(s)}),function(){for(;i.length;)i.shift()()}},$watchCollection:function(t,e){v.$stateful=!0;var n,r,i,a=this,u=e.length>1,c=0,l=o(t,v),f=[],h={},p=!0,d=0;function v(t){var e,i,o,a;if(!D(n=t)){if(H(n))if(S(n)){r!==f&&(d=(r=f).length=0,c++),e=n.length,d!==e&&(c++,r.length=d=e);for(var u=0;u<e;u++)a=r[u],o=n[u],a!=a&&o!=o||a===o||(c++,r[u]=o)}else{for(i in r!==h&&(r=h={},d=0,c++),e=0,n)s.call(n,i)&&(e++,o=n[i],a=r[i],i in r?a!=a&&o!=o||a===o||(c++,r[i]=o):(d++,r[i]=o,c++));if(d>e)for(i in c++,r)s.call(n,i)||(d--,delete r[i])}else r!==n&&(r=n,c++);return c}}return this.$watch(l,function(){if(p?(p=!1,e(n,n,a)):e(n,i,a),u)if(H(n))if(S(n)){i=new Array(n.length);for(var t=0;t<n.length;t++)i[t]=n[t]}else for(var r in i={},n)s.call(n,r)&&(i[r]=n[r]);else i=n})},$digest:function(){var o,s,u,c,l,d,g,y,S,E=t,x=[];$("$digest"),a.$$checkUrlChange(),this===f&&null!==r&&(a.defer.cancel(r),b()),n=null;do{l=!1,g=this;for(var C=0;C<h.length;C++){try{(0,(S=h[C]).fn)(S.scope,S.locals)}catch(t){i(t)}n=null}h.length=0;t:do{if(c=g.$$watchers)for(c.$$digestWatchIndex=c.length;c.$$digestWatchIndex--;)try{if(o=c[c.$$digestWatchIndex])if((s=(0,o.get)(g))===(u=o.last)||(o.eq?ut(s,u):P(s)&&P(u))){if(o===n){l=!1;break t}}else l=!0,n=o,o.last=o.eq?at(s,null):s,(0,o.fn)(s,u===w?s:u,g),E<5&&(x[y=4-E]||(x[y]=[]),x[y].push({msg:G(o.exp)?"fn: "+(o.exp.name||o.exp.toString()):o.exp,newVal:s,oldVal:u}))}catch(t){i(t)}if(!(d=g.$$watchersCount&&g.$$childHead||g!==this&&g.$$nextSibling))for(;g!==this&&!(d=g.$$nextSibling);)g=g.$parent}while(g=d);if((l||h.length)&&!E--)throw m(),e("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",t,x)}while(l||h.length);for(m();v<p.length;)try{p[v++]()}catch(t){i(t)}p.length=v=0,a.$$checkUrlChange()},$destroy:function(){if(!this.$$destroyed){var t=this.$parent;for(var e in this.$broadcast("$destroy"),this.$$destroyed=!0,this===f&&a.$$applicationDestroyed(),g(this,-this.$$watchersCount),this.$$listenerCount)y(this,this.$$listenerCount[e],e);t&&t.$$childHead===this&&(t.$$childHead=this.$$nextSibling),t&&t.$$childTail===this&&(t.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=j,this.$on=this.$watch=this.$watchGroup=function(){return j},this.$$listeners={},this.$$nextSibling=null,function t(e){9===l&&(e.$$childHead&&t(e.$$childHead),e.$$nextSibling&&t(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}(this)}},$eval:function(t,e){return o(t)(this,e)},$evalAsync:function(t,e){f.$$phase||h.length||a.defer(function(){h.length&&f.$digest()}),h.push({scope:this,fn:o(t),locals:e})},$$postDigest:function(t){p.push(t)},$apply:function(t){try{$("$apply");try{return this.$eval(t)}finally{m()}}catch(t){i(t)}finally{try{f.$digest()}catch(t){throw i(t),t}}},$applyAsync:function(t){var e=this;t&&d.push(function(){e.$eval(t)}),t=o(t),null===r&&(r=a.defer(function(){f.$apply(b)}))},$on:function(t,e){var n=this.$$listeners[t];n||(this.$$listeners[t]=n=[]),n.push(e);var r=this;do{r.$$listenerCount[t]||(r.$$listenerCount[t]=0),r.$$listenerCount[t]++}while(r=r.$parent);var i=this;return function(){var r=n.indexOf(e);-1!==r&&(delete n[r],y(i,1,t))}},$emit:function(t,e){var n,r,o,a=[],s=this,u=!1,c={name:t,targetScope:s,stopPropagation:function(){u=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},l=ft([c],arguments,1);do{for(n=s.$$listeners[t]||a,c.currentScope=s,r=0,o=n.length;r<o;r++)if(n[r])try{n[r].apply(null,l)}catch(t){i(t)}else n.splice(r,1),r--,o--;if(u)break;s=s.$parent}while(s);return c.currentScope=null,c},$broadcast:function(t,e){var n=this,r=n,o=n,a={name:t,targetScope:n,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[t])return a;for(var s,u,c,l=ft([a],arguments,1);r=o;){for(a.currentScope=r,u=0,c=(s=r.$$listeners[t]||[]).length;u<c;u++)if(s[u])try{s[u].apply(null,l)}catch(t){i(t)}else s.splice(u,1),u--,c--;if(!(o=r.$$listenerCount[t]&&r.$$childHead||r!==n&&r.$$nextSibling))for(;r!==n&&!(o=r.$$nextSibling);)r=r.$parent}return a.currentScope=null,a}};var f=new c,h=f.$$asyncQueue=[],p=f.$$postDigestQueue=[],d=f.$$applyAsyncQueue=[],v=0;return f;function $(t){if(f.$$phase)throw e("inprog","{0} already in progress",f.$$phase);f.$$phase=t}function m(){f.$$phase=null}function g(t,e){do{t.$$watchersCount+=e}while(t=t.$parent)}function y(t,e,n){do{t.$$listenerCount[n]-=e,0===t.$$listenerCount[n]&&delete t.$$listenerCount[n]}while(t=t.$parent)}function w(){}function b(){for(;d.length;)try{d.shift()()}catch(t){i(t)}r=null}}]}function Lr(){var t=/^\s*(https?|s?ftp|mailto|tel|file):/,e=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(e){return U(e)?(t=e,this):t},this.imgSrcSanitizationWhitelist=function(t){return U(t)?(e=t,this):e},this.$get=function(){return function(n,r){var i,o=r?e:t;return""===(i=ii(n&&n.trim()).href)||i.match(o)?n:"unsafe:"+i}}}Ar.prototype={compile:function(t){var e=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},_r(t,e.$filter);var n,r="";if(this.stage="assign",n=Or(t)){this.state.computing="assign";var i=this.nextId();this.recurse(n,i),this.return_(i),r="fn.assign="+this.generateFunction("assign","s,v,l")}var o=kr(t.body);e.stage="inputs",E(o,function(t,n){var r="fn"+n;e.state[r]={vars:[],body:[],own:{}},e.state.computing=r;var i=e.nextId();e.recurse(t,i),e.return_(i),e.state.inputs.push({name:r,isPure:t.isPure}),t.watchId=n}),this.state.computing="fn",this.stage="main",this.recurse(t);var a='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+r+this.watchFns()+"return fn;",s=new Function("$filter","getStringValue","ifDefined","plus",a)(this.$filter,mr,Sr,Er);return this.state=this.stage=void 0,s},USE:"use",STRICT:"strict",watchFns:function(){var t=[],e=this.state.inputs,n=this;return E(e,function(e){t.push("var "+e.name+"="+n.generateFunction(e.name,"s")),e.isPure&&t.push(e.name,".isPure="+JSON.stringify(e.isPure)+";")}),e.length&&t.push("fn.inputs=["+e.map(function(t){return t.name}).join(",")+"];"),t.join("")},generateFunction:function(t,e){return"function("+e+"){"+this.varsPrefix(t)+this.body(t)+"};"},filterPrefix:function(){var t=[],e=this;return E(this.state.filters,function(n,r){t.push(n+"=$filter("+e.escape(r)+")")}),t.length?"var "+t.join(",")+";":""},varsPrefix:function(t){return this.state[t].vars.length?"var "+this.state[t].vars.join(",")+";":""},body:function(t){return this.state[t].body.join("")},recurse:function(t,e,n,r,i,o){var a,s,u,c,l,f=this;if(r=r||j,!o&&U(t.watchId))return e=e||this.nextId(),void this.if_("i",this.lazyAssign(e,this.computedMember("i",t.watchId)),this.lazyRecurse(t,e,n,r,i,!0));switch(t.type){case br.Program:E(t.body,function(e,n){f.recurse(e.expression,void 0,void 0,function(t){s=t}),n!==t.body.length-1?f.current().body.push(s,";"):f.return_(s)});break;case br.Literal:c=this.escape(t.value),this.assign(e,c),r(e||c);break;case br.UnaryExpression:this.recurse(t.argument,void 0,void 0,function(t){s=t}),c=t.operator+"("+this.ifDefined(s,0)+")",this.assign(e,c),r(c);break;case br.BinaryExpression:this.recurse(t.left,void 0,void 0,function(t){a=t}),this.recurse(t.right,void 0,void 0,function(t){s=t}),c="+"===t.operator?this.plus(a,s):"-"===t.operator?this.ifDefined(a,0)+t.operator+this.ifDefined(s,0):"("+a+")"+t.operator+"("+s+")",this.assign(e,c),r(c);break;case br.LogicalExpression:e=e||this.nextId(),f.recurse(t.left,e),f.if_("&&"===t.operator?e:f.not(e),f.lazyRecurse(t.right,e)),r(e);break;case br.ConditionalExpression:e=e||this.nextId(),f.recurse(t.test,e),f.if_(e,f.lazyRecurse(t.alternate,e),f.lazyRecurse(t.consequent,e)),r(e);break;case br.Identifier:e=e||this.nextId(),n&&(n.context="inputs"===f.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",t.name)+"?l:s"),n.computed=!1,n.name=t.name),f.if_("inputs"===f.stage||f.not(f.getHasOwnProperty("l",t.name)),function(){f.if_("inputs"===f.stage||"s",function(){i&&1!==i&&f.if_(f.isNull(f.nonComputedMember("s",t.name)),f.lazyAssign(f.nonComputedMember("s",t.name),"{}")),f.assign(e,f.nonComputedMember("s",t.name))})},e&&f.lazyAssign(e,f.nonComputedMember("l",t.name))),r(e);break;case br.MemberExpression:a=n&&(n.context=this.nextId())||this.nextId(),e=e||this.nextId(),f.recurse(t.object,a,void 0,function(){f.if_(f.notNull(a),function(){t.computed?(s=f.nextId(),f.recurse(t.property,s),f.getStringValue(s),i&&1!==i&&f.if_(f.not(f.computedMember(a,s)),f.lazyAssign(f.computedMember(a,s),"{}")),c=f.computedMember(a,s),f.assign(e,c),n&&(n.computed=!0,n.name=s)):(i&&1!==i&&f.if_(f.isNull(f.nonComputedMember(a,t.property.name)),f.lazyAssign(f.nonComputedMember(a,t.property.name),"{}")),c=f.nonComputedMember(a,t.property.name),f.assign(e,c),n&&(n.computed=!1,n.name=t.property.name))},function(){f.assign(e,"undefined")}),r(e)},!!i);break;case br.CallExpression:e=e||this.nextId(),t.filter?(s=f.filter(t.callee.name),u=[],E(t.arguments,function(t){var e=f.nextId();f.recurse(t,e),u.push(e)}),c=s+"("+u.join(",")+")",f.assign(e,c),r(e)):(s=f.nextId(),a={},u=[],f.recurse(t.callee,s,a,function(){f.if_(f.notNull(s),function(){E(t.arguments,function(e){f.recurse(e,t.constant?void 0:f.nextId(),void 0,function(t){u.push(t)})}),c=a.name?f.member(a.context,a.name,a.computed)+"("+u.join(",")+")":s+"("+u.join(",")+")",f.assign(e,c)},function(){f.assign(e,"undefined")}),r(e)}));break;case br.AssignmentExpression:s=this.nextId(),a={},this.recurse(t.left,void 0,a,function(){f.if_(f.notNull(a.context),function(){f.recurse(t.right,s),c=f.member(a.context,a.name,a.computed)+t.operator+s,f.assign(e,c),r(e||c)})},1);break;case br.ArrayExpression:u=[],E(t.elements,function(e){f.recurse(e,t.constant?void 0:f.nextId(),void 0,function(t){u.push(t)})}),c="["+u.join(",")+"]",this.assign(e,c),r(e||c);break;case br.ObjectExpression:u=[],l=!1,E(t.properties,function(t){t.computed&&(l=!0)}),l?(e=e||this.nextId(),this.assign(e,"{}"),E(t.properties,function(t){t.computed?(a=f.nextId(),f.recurse(t.key,a)):a=t.key.type===br.Identifier?t.key.name:""+t.key.value,s=f.nextId(),f.recurse(t.value,s),f.assign(f.member(e,a,t.computed),s)})):(E(t.properties,function(e){f.recurse(e.value,t.constant?void 0:f.nextId(),void 0,function(t){u.push(f.escape(e.key.type===br.Identifier?e.key.name:""+e.key.value)+":"+t)})}),c="{"+u.join(",")+"}",this.assign(e,c)),r(e||c);break;case br.ThisExpression:this.assign(e,"s"),r(e||"s");break;case br.LocalsExpression:this.assign(e,"l"),r(e||"l");break;case br.NGValueParameter:this.assign(e,"v"),r(e||"v")}},getHasOwnProperty:function(t,e){var n=t+"."+e,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,t+"&&("+this.escape(e)+" in "+t+")")),r[n]},assign:function(t,e){if(t)return this.current().body.push(t,"=",e,";"),t},filter:function(t){return this.state.filters.hasOwnProperty(t)||(this.state.filters[t]=this.nextId(!0)),this.state.filters[t]},ifDefined:function(t,e){return"ifDefined("+t+","+this.escape(e)+")"},plus:function(t,e){return"plus("+t+","+e+")"},return_:function(t){this.current().body.push("return ",t,";")},if_:function(t,e,n){if(!0===t)e();else{var r=this.current().body;r.push("if(",t,"){"),e(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(t){return"!("+t+")"},isNull:function(t){return t+"==null"},notNull:function(t){return t+"!=null"},nonComputedMember:function(t,e){return/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(e)?t+"."+e:t+'["'+e.replace(/[^$_a-zA-Z0-9]/g,this.stringEscapeFn)+'"]'},computedMember:function(t,e){return t+"["+e+"]"},member:function(t,e,n){return n?this.computedMember(t,e):this.nonComputedMember(t,e)},getStringValue:function(t){this.assign(t,"getStringValue("+t+")")},lazyRecurse:function(t,e,n,r,i,o){var a=this;return function(){a.recurse(t,e,n,r,i,o)}},lazyAssign:function(t,e){var n=this;return function(){n.assign(t,e)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)},escape:function(t){if(F(t))return"'"+t.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(L(t))return t.toString();if(!0===t)return"true";if(!1===t)return"false";if(null===t)return"null";if(void 0===t)return"undefined";throw vr("esc","IMPOSSIBLE")},nextId:function(t,e){var n="v"+this.state.nextId++;return t||this.current().vars.push(n+(e?"="+e:"")),n},current:function(){return this.state[this.state.computing]}},Tr.prototype={compile:function(t){var e,n,r=this;_r(t,r.$filter),(e=Or(t))&&(n=this.recurse(e));var i,o=kr(t.body);o&&(i=[],E(o,function(t,e){var n=r.recurse(t);n.isPure=t.isPure,t.input=n,i.push(n),t.watchId=e}));var a=[];E(t.body,function(t){a.push(r.recurse(t.expression))});var s=0===t.body.length?j:1===t.body.length?a[0]:function(t,e){var n;return E(a,function(r){n=r(t,e)}),n};return n&&(s.assign=function(t,e,r){return n(t,r,e)}),i&&(s.inputs=i),s},recurse:function(t,e,n){var r,i,o,a=this;if(t.input)return this.inputs(t.input,t.watchId);switch(t.type){case br.Literal:return this.value(t.value,e);case br.UnaryExpression:return i=this.recurse(t.argument),this["unary"+t.operator](i,e);case br.BinaryExpression:case br.LogicalExpression:return r=this.recurse(t.left),i=this.recurse(t.right),this["binary"+t.operator](r,i,e);case br.ConditionalExpression:return this["ternary?:"](this.recurse(t.test),this.recurse(t.alternate),this.recurse(t.consequent),e);case br.Identifier:return a.identifier(t.name,e,n);case br.MemberExpression:return r=this.recurse(t.object,!1,!!n),t.computed||(i=t.property.name),t.computed&&(i=this.recurse(t.property)),t.computed?this.computedMember(r,i,e,n):this.nonComputedMember(r,i,e,n);case br.CallExpression:return o=[],E(t.arguments,function(t){o.push(a.recurse(t))}),t.filter&&(i=this.$filter(t.callee.name)),t.filter||(i=this.recurse(t.callee,!0)),t.filter?function(t,n,r,a){for(var s=[],u=0;u<o.length;++u)s.push(o[u](t,n,r,a));var c=i.apply(void 0,s,a);return e?{context:void 0,name:void 0,value:c}:c}:function(t,n,r,a){var s,u=i(t,n,r,a);if(null!=u.value){for(var c=[],l=0;l<o.length;++l)c.push(o[l](t,n,r,a));s=u.value.apply(u.context,c)}return e?{value:s}:s};case br.AssignmentExpression:return r=this.recurse(t.left,!0,1),i=this.recurse(t.right),function(t,n,o,a){var s=r(t,n,o,a),u=i(t,n,o,a);return s.context[s.name]=u,e?{value:u}:u};case br.ArrayExpression:return o=[],E(t.elements,function(t){o.push(a.recurse(t))}),function(t,n,r,i){for(var a=[],s=0;s<o.length;++s)a.push(o[s](t,n,r,i));return e?{value:a}:a};case br.ObjectExpression:return o=[],E(t.properties,function(t){t.computed?o.push({key:a.recurse(t.key),computed:!0,value:a.recurse(t.value)}):o.push({key:t.key.type===br.Identifier?t.key.name:""+t.key.value,computed:!1,value:a.recurse(t.value)})}),function(t,n,r,i){for(var a={},s=0;s<o.length;++s)o[s].computed?a[o[s].key(t,n,r,i)]=o[s].value(t,n,r,i):a[o[s].key]=o[s].value(t,n,r,i);return e?{value:a}:a};case br.ThisExpression:return function(t){return e?{value:t}:t};case br.LocalsExpression:return function(t,n){return e?{value:n}:n};case br.NGValueParameter:return function(t,n,r){return e?{value:r}:r}}},"unary+":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=U(a)?+a:0,e?{value:a}:a}},"unary-":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=U(a)?-a:-0,e?{value:a}:a}},"unary!":function(t,e){return function(n,r,i,o){var a=!t(n,r,i,o);return e?{value:a}:a}},"binary+":function(t,e,n){return function(r,i,o,a){var s=Er(t(r,i,o,a),e(r,i,o,a));return n?{value:s}:s}},"binary-":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=(U(s)?s:0)-(U(u)?u:0);return n?{value:c}:c}},"binary*":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)*e(r,i,o,a);return n?{value:s}:s}},"binary/":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)/e(r,i,o,a);return n?{value:s}:s}},"binary%":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)%e(r,i,o,a);return n?{value:s}:s}},"binary===":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)===e(r,i,o,a);return n?{value:s}:s}},"binary!==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!==e(r,i,o,a);return n?{value:s}:s}},"binary==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)==e(r,i,o,a);return n?{value:s}:s}},"binary!=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!=e(r,i,o,a);return n?{value:s}:s}},"binary<":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<e(r,i,o,a);return n?{value:s}:s}},"binary>":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>e(r,i,o,a);return n?{value:s}:s}},"binary<=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<=e(r,i,o,a);return n?{value:s}:s}},"binary>=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>=e(r,i,o,a);return n?{value:s}:s}},"binary&&":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)&&e(r,i,o,a);return n?{value:s}:s}},"binary||":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)||e(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(t,e,n,r){return function(i,o,a,s){var u=t(i,o,a,s)?e(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(t,e){return function(){return e?{context:void 0,name:void 0,value:t}:t}},identifier:function(t,e,n){return function(r,i,o,a){var s=i&&t in i?i:r;n&&1!==n&&s&&null==s[t]&&(s[t]={});var u=s?s[t]:void 0;return e?{context:s,name:t,value:u}:u}},computedMember:function(t,e,n,r){return function(i,o,a,s){var u,c,l=t(i,o,a,s);return null!=l&&(u=mr(u=e(i,o,a,s)),r&&1!==r&&l&&!l[u]&&(l[u]={}),c=l[u]),n?{context:l,name:u,value:c}:c}},nonComputedMember:function(t,e,n,r){return function(i,o,a,s){var u=t(i,o,a,s);r&&1!==r&&u&&null==u[e]&&(u[e]={});var c=null!=u?u[e]:void 0;return n?{context:u,name:e,value:c}:c}},inputs:function(t,e){return function(n,r,i,o){return o?o[e]:t(n,r,i)}}},Pr.prototype={constructor:Pr,parse:function(t){var e,n=this.getAst(t),r=this.astCompiler.compile(n.ast);return r.literal=0===(e=n.ast).body.length||1===e.body.length&&(e.body[0].expression.type===br.Literal||e.body[0].expression.type===br.ArrayExpression||e.body[0].expression.type===br.ObjectExpression),r.constant=n.ast.constant,r.oneTime=n.oneTime,r},getAst:function(t){var e=!1;return":"===(t=t.trim()).charAt(0)&&":"===t.charAt(1)&&(e=!0,t=t.substring(2)),{ast:this.ast.ast(t),oneTime:e}}};var Br=i("$sce"),zr={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Wr=/_([a-z])/g;function Gr(t){return t.replace(Wr,ne)}function Jr(t){var e=[];return U(t)&&E(t,function(t){e.push(function(t){if("self"===t)return t;if(F(t)){if(t.indexOf("***")>-1)throw Br("iwcard","Illegal sequence *** in string matcher.  String: {0}",t);return t=et(t).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*"),new RegExp("^"+t+"$")}if(J(t))return new RegExp("^"+t.source+"$");throw Br("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}(t))}),e}function Kr(){this.SCE_CONTEXTS=zr;var t=["self"],e=[];this.resourceUrlWhitelist=function(e){return arguments.length&&(t=Jr(e)),t},this.resourceUrlBlacklist=function(t){return arguments.length&&(e=Jr(t)),e},this.$get=["$injector",function(n){var r=function(t){throw Br("unsafe","Attempting to use an unsafe value in a safe context.")};function i(t,e){return"self"===t?oi(e):!!t.exec(e.href)}function o(t){var e=function(t){this.$$unwrapTrustedValue=function(){return t}};return t&&(e.prototype=new t),e.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},e.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},e}n.has("$sanitize")&&(r=n.get("$sanitize"));var a=o(),s={};return s[zr.HTML]=o(a),s[zr.CSS]=o(a),s[zr.URL]=o(a),s[zr.JS]=o(a),s[zr.RESOURCE_URL]=o(s[zr.URL]),{trustAs:function(t,e){var n=s.hasOwnProperty(t)?s[t]:null;if(!n)throw Br("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",t,e);if(null===e||D(e)||""===e)return e;if("string"!=typeof e)throw Br("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",t);return new n(e)},getTrusted:function(n,o){if(null===o||D(o)||""===o)return o;var a=s.hasOwnProperty(n)?s[n]:null;if(a&&o instanceof a)return o.$$unwrapTrustedValue();if(n===zr.RESOURCE_URL){if(function(n){var r,o,a=ii(n.toString()),s=!1;for(r=0,o=t.length;r<o;r++)if(i(t[r],a)){s=!0;break}if(s)for(r=0,o=e.length;r<o;r++)if(i(e[r],a)){s=!1;break}return s}(o))return o;throw Br("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",o.toString())}if(n===zr.HTML)return r(o);throw Br("unsafe","Attempting to use an unsafe value in a safe context.")},valueOf:function(t){return t instanceof a?t.$$unwrapTrustedValue():t}}}]}function Zr(){var t=!0;this.enabled=function(e){return arguments.length&&(t=!!e),t},this.$get=["$parse","$sceDelegate",function(e,n){if(t&&l<8)throw Br("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=Gt(zr);r.isEnabled=function(){return t},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,t||(r.trustAs=r.getTrusted=function(t,e){return e},r.valueOf=I),r.parseAs=function(t,n){var i=e(n);return i.literal&&i.constant?i:e(n,function(e){return r.getTrusted(t,e)})};var i=r.parseAs,o=r.getTrusted,a=r.trustAs;return E(zr,function(t,e){var n=u(e);r[Gr("parse_as_"+n)]=function(e){return i(t,e)},r[Gr("get_trusted_"+n)]=function(e){return o(t,e)},r[Gr("trust_as_"+n)]=function(e){return a(t,e)}}),r}]}function Yr(){this.$get=["$window","$document",function(t,e){var n={},r=!(!(t.nw&&t.nw.process)&&t.chrome&&(t.chrome.app&&t.chrome.app.runtime||!t.chrome.app&&t.chrome.runtime&&t.chrome.runtime.id))&&t.history&&t.history.pushState,i=T((/android (\d+)/.exec(u((t.navigator||{}).userAgent))||[])[1]),o=/Boxee/i.test((t.navigator||{}).userAgent),a=e[0]||{},s=a.body&&a.body.style,c=!1,f=!1;return s&&(c=!!("transition"in s||"webkitTransition"in s),f=!!("animation"in s||"webkitAnimation"in s)),{history:!(!r||i<4||o),hasEvent:function(t){if("input"===t&&l)return!1;if(D(n[t])){var e=a.createElement("div");n[t]="on"+t in e}return n[t]},csp:ct(),transitions:c,animations:f,android:i}}]}var Qr=i("$compile");function Xr(){var t;this.httpOptions=function(e){return e?(t=e,this):t},this.$get=["$exceptionHandler","$templateCache","$http","$q","$sce",function(e,n,r,i,o){function a(s,u){a.totalPendingRequests++,F(s)&&!D(n.get(s))||(s=o.getTrustedResourceUrl(s));var c=r.defaults&&r.defaults.transformResponse;return z(c)?c=c.filter(function(t){return t!==Dn}):c===Dn&&(c=null),r.get(s,O({cache:n,transformResponse:c},t)).finally(function(){a.totalPendingRequests--}).then(function(t){return n.put(s,t.data),t.data},function(t){u||(t=Qr("tpload","Failed to load template: {0} (HTTP status: {1} {2})",s,t.status,t.statusText),e(t));return i.reject(t)})}return a.totalPendingRequests=0,a}]}function ti(){this.$get=["$rootScope","$browser","$location",function(t,e,n){var r={findBindings:function(t,e,n){var r=[];return E(t.getElementsByClassName("ng-binding"),function(t){var i=w.element(t).data("$binding");i&&E(i,function(i){n?new RegExp("(^|\\s)"+et(e)+"(\\s|\\||$)").test(i)&&r.push(t):-1!==i.indexOf(e)&&r.push(t)})}),r},findModels:function(t,e,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o="["+r[i]+"model"+(n?"=":"*=")+'"'+e+'"]',a=t.querySelectorAll(o);if(a.length)return a}},getLocation:function(){return n.url()},setLocation:function(e){e!==n.url()&&(n.url(e),t.$digest())},whenStable:function(t){e.notifyWhenNoOutstandingRequests(t)}};return r}]}function ei(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(t,e,n,r,i){var o={};function a(a,s,u){G(a)||(u=s,s=a,a=j);var c,l=ht(arguments,3),f=U(u)&&!u,h=(f?r:n).defer(),p=h.promise;return c=e.defer(function(){try{h.resolve(a.apply(null,l))}catch(t){h.reject(t),i(t)}finally{delete o[p.$$timeoutId]}f||t.$apply()},s),p.$$timeoutId=c,o[c]=h,p}return a.cancel=function(t){return!!(t&&t.$$timeoutId in o)&&(Hr(o[t.$$timeoutId].promise),o[t.$$timeoutId].reject("canceled"),delete o[t.$$timeoutId],e.defer.cancel(t.$$timeoutId))},a}]}var ni=t.document.createElement("a"),ri=ii(t.location.href);function ii(t){var e=t;return l&&(ni.setAttribute("href",e),e=ni.href),ni.setAttribute("href",e),{href:ni.href,protocol:ni.protocol?ni.protocol.replace(/:$/,""):"",host:ni.host,search:ni.search?ni.search.replace(/^\?/,""):"",hash:ni.hash?ni.hash.replace(/^#/,""):"",hostname:ni.hostname,port:ni.port,pathname:"/"===ni.pathname.charAt(0)?ni.pathname:"/"+ni.pathname}}function oi(t){var e=F(t)?ii(t):t;return e.protocol===ri.protocol&&e.host===ri.host}function ai(){this.$get=M(t)}function si(t){var e=t[0]||{},n={},r="";function i(t){try{return decodeURIComponent(t)}catch(e){return t}}return function(){var t,o,a,s,u,c=function(t){try{return t.cookie||""}catch(t){return""}}(e);if(c!==r)for(t=(r=c).split("; "),n={},a=0;a<t.length;a++)(s=(o=t[a]).indexOf("="))>0&&(u=i(o.substring(0,s)),D(n[u])&&(n[u]=i(o.substring(s+1))));return n}}function ui(){this.$get=si}function ci(t){var e="Filter";function n(r,i){if(H(r)){var o={};return E(r,function(t,e){o[e]=n(e,t)}),o}return t.factory(r+e,i)}this.register=n,this.$get=["$injector",function(t){return function(n){return t.get(n+e)}}],n("currency",$i),n("date",Ri),n("filter",li),n("json",Oi),n("limitTo",Pi),n("lowercase",Ai),n("number",mi),n("orderBy",ji),n("uppercase",Ti)}function li(){return function(t,e,n,r){if(!S(t)){if(null==t)return t;throw i("filter")("notarray","Expected array but received: {0}",t)}var o,a;switch(r=r||"$",hi(e)){case"function":o=e;break;case"boolean":case"null":case"number":case"string":a=!0;case"object":o=function(t,e,n,r){var i=H(t)&&n in t;!0===e?e=ut:G(e)||(e=function(t,e){return!D(t)&&(null===t||null===e?t===e:!(H(e)||H(t)&&!N(t))&&(t=u(""+t),e=u(""+e),-1!==t.indexOf(e)))});return function(o){return i&&!H(o)?fi(o,t[n],e,n,!1):fi(o,t,e,n,r)}}(e,n,r,a);break;default:return t}return Array.prototype.filter.call(t,o)}}function fi(t,e,n,r,i,o){var a=hi(t),s=hi(e);if("string"===s&&"!"===e.charAt(0))return!fi(t,e.substring(1),n,r,i);if(z(t))return t.some(function(t){return fi(t,e,n,r,i)});switch(a){case"object":var u;if(i){for(u in t)if(u.charAt&&"$"!==u.charAt(0)&&fi(t[u],e,n,r,!0))return!0;return!o&&fi(t,e,n,r,!1)}if("object"===s){for(u in e){var c=e[u];if(!G(c)&&!D(c)){var l=u===r;if(!fi(l?t:t[u],c,n,r,l,l))return!1}}return!0}return n(t,e);case"function":return!1;default:return n(t,e)}}function hi(t){return null===t?"null":typeof t}si.$inject=["$document"],ci.$inject=["$provide"];var pi=22,di=".",vi="0";function $i(t){var e=t.NUMBER_FORMATS;return function(t,n,r){return D(n)&&(n=e.CURRENCY_SYM),D(r)&&(r=e.PATTERNS[1].maxFrac),null==t?t:gi(t,e.PATTERNS[1],e.GROUP_SEP,e.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function mi(t){var e=t.NUMBER_FORMATS;return function(t,n){return null==t?t:gi(t,e.PATTERNS[0],e.GROUP_SEP,e.DECIMAL_SEP,n)}}function gi(t,e,n,r,i){if(!F(t)&&!L(t)||isNaN(t))return"";var o,a=!isFinite(t),s=!1,u=Math.abs(t)+"",c="";if(a)c="∞";else{(function(t,e,n,r){var i=t.d,o=i.length-t.i,a=(e=D(e)?Math.min(Math.max(n,o),r):+e)+t.i,s=i[a];if(a>0){i.splice(Math.max(t.i,a));for(var u=a;u<i.length;u++)i[u]=0}else{o=Math.max(0,o),t.i=1,i.length=Math.max(1,a=e+1),i[0]=0;for(var c=1;c<a;c++)i[c]=0}if(s>=5)if(a-1<0){for(var l=0;l>a;l--)i.unshift(0),t.i++;i.unshift(1),t.i++}else i[a-1]++;for(;o<Math.max(0,e);o++)i.push(0);var f=i.reduceRight(function(t,e,n,r){return e+=t,r[n]=e%10,Math.floor(e/10)},0);f&&(i.unshift(f),t.i++)})(o=function(t){var e,n,r,i,o,a=0;for((n=t.indexOf(di))>-1&&(t=t.replace(di,"")),(r=t.search(/e/i))>0?(n<0&&(n=r),n+=+t.slice(r+1),t=t.substring(0,r)):n<0&&(n=t.length),r=0;t.charAt(r)===vi;r++);if(r===(o=t.length))e=[0],n=1;else{for(o--;t.charAt(o)===vi;)o--;for(n-=r,e=[],i=0;r<=o;r++,i++)e[i]=+t.charAt(r)}return n>pi&&(e=e.splice(0,pi-1),a=n-1,n=1),{d:e,e:a,i:n}}(u),i,e.minFrac,e.maxFrac);var l=o.d,f=o.i,h=o.e,p=[];for(s=l.reduce(function(t,e){return t&&!e},!0);f<0;)l.unshift(0),f++;f>0?p=l.splice(f,l.length):(p=l,l=[0]);var d=[];for(l.length>=e.lgSize&&d.unshift(l.splice(-e.lgSize,l.length).join(""));l.length>e.gSize;)d.unshift(l.splice(-e.gSize,l.length).join(""));l.length&&d.unshift(l.join("")),c=d.join(n),p.length&&(c+=r+p.join("")),h&&(c+="e+"+h)}return t<0&&!s?e.negPre+c+e.negSuf:e.posPre+c+e.posSuf}function yi(t,e,n,r){var i="";for((t<0||r&&t<=0)&&(r?t=1-t:(t=-t,i="-")),t=""+t;t.length<e;)t=vi+t;return n&&(t=t.substr(t.length-e)),i+t}function wi(t,e,n,r,i){return n=n||0,function(o){var a=o["get"+t]();return(n>0||a>-n)&&(a+=n),0===a&&-12===n&&(a=12),yi(a,e,r,i)}}function bi(t,e,n){return function(r,i){var o=r["get"+t]();return i[c((n?"STANDALONE":"")+(e?"SHORT":"")+t)][o]}}function Si(t){var e=new Date(t,0,1).getDay();return new Date(t,0,(e<=4?5:12)-e)}function Ei(t){return function(e){var n,r=Si(e.getFullYear()),i=+(n=e,new Date(n.getFullYear(),n.getMonth(),n.getDate()+(4-n.getDay())))-+r;return yi(1+Math.round(i/6048e5),t)}}function xi(t,e){return t.getFullYear()<=0?e.ERAS[0]:e.ERAS[1]}$i.$inject=["$locale"],mi.$inject=["$locale"];var Ci={yyyy:wi("FullYear",4,0,!1,!0),yy:wi("FullYear",2,0,!0,!0),y:wi("FullYear",1,0,!1,!0),MMMM:bi("Month"),MMM:bi("Month",!0),MM:wi("Month",2,1),M:wi("Month",1,1),LLLL:bi("Month",!1,!0),dd:wi("Date",2),d:wi("Date",1),HH:wi("Hours",2),H:wi("Hours",1),hh:wi("Hours",2,-12),h:wi("Hours",1,-12),mm:wi("Minutes",2),m:wi("Minutes",1),ss:wi("Seconds",2),s:wi("Seconds",1),sss:wi("Milliseconds",3),EEEE:bi("Day"),EEE:bi("Day",!0),a:function(t,e){return t.getHours()<12?e.AMPMS[0]:e.AMPMS[1]},Z:function(t,e,n){var r=-1*n,i=r>=0?"+":"";return i+=yi(Math[r>0?"floor":"ceil"](r/60),2)+yi(Math.abs(r%60),2)},ww:Ei(2),w:Ei(1),G:xi,GG:xi,GGG:xi,GGGG:function(t,e){return t.getFullYear()<=0?e.ERANAMES[0]:e.ERANAMES[1]}},_i=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,ki=/^-?\d+$/;function Ri(t){var e=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var o,a,s="",u=[];if(r=r||"mediumDate",r=t.DATETIME_FORMATS[r]||r,F(n)&&(n=ki.test(n)?T(n):function(t){var n;if(n=t.match(e)){var r=new Date(0),i=0,o=0,a=n[8]?r.setUTCFullYear:r.setFullYear,s=n[8]?r.setUTCHours:r.setHours;n[9]&&(i=T(n[9]+n[10]),o=T(n[9]+n[11])),a.call(r,T(n[1]),T(n[2])-1,T(n[3]));var u=T(n[4]||0)-i,c=T(n[5]||0)-o,l=T(n[6]||0),f=Math.round(1e3*parseFloat("0."+(n[7]||0)));return s.call(r,u,c,l,f),r}return t}(n)),L(n)&&(n=new Date(n)),!B(n)||!isFinite(n.getTime()))return n;for(;r;)(a=_i.exec(r))?r=(u=ft(u,a,1)).pop():(u.push(r),r=null);var c=n.getTimezoneOffset();return i&&(c=gt(i,c),n=yt(n,i,!0)),E(u,function(e){o=Ci[e],s+=o?o(n,t.DATETIME_FORMATS,c):"''"===e?"'":e.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),s}}function Oi(){return function(t,e){return D(e)&&(e=2),vt(t,e)}}Ri.$inject=["$locale"];var Ai=M(u),Ti=M(c);function Pi(){return function(t,e,n){return e=Math.abs(Number(e))===1/0?Number(e):T(e),P(e)?t:(L(t)&&(t=t.toString()),S(t)?(n=(n=!n||isNaN(n)?0:T(n))<0?Math.max(0,t.length+n):n,e>=0?Vi(t,n,n+e):0===n?Vi(t,e,t.length):Vi(t,Math.max(0,n+e),n)):t)}}function Vi(t,e,n){return F(t)?t.slice(e,n):d.call(t,e,n)}function ji(t){return function(r,o,a,s){if(null==r)return r;if(!S(r))throw i("orderBy")("notarray","Expected array but received: {0}",r);z(o)||(o=[o]),0===o.length&&(o=["+"]);var u=o.map(function(e){var n=1,r=I;if(G(e))r=e;else if(F(e)&&("+"!==e.charAt(0)&&"-"!==e.charAt(0)||(n="-"===e.charAt(0)?-1:1,e=e.substring(1)),""!==e&&(r=t(e)).constant)){var i=r();r=function(t){return t[i]}}return{get:r,descending:n}}),c=a?-1:1,l=G(s)?s:n,f=Array.prototype.map.call(r,function(t,n){return{value:t,tieBreaker:{value:n,type:"number",index:n},predicateValues:u.map(function(r){return function(t,n){var r=typeof t;null===t?(r="string",t="null"):"object"===r&&(t=function(t){if(G(t.valueOf)&&e(t=t.valueOf()))return t;if(N(t)&&e(t=t.toString()))return t;return t}(t));return{value:t,type:r,index:n}}(r.get(t),n)})}});return f.sort(function(t,e){for(var r=0,i=u.length;r<i;r++){var o=l(t.predicateValues[r],e.predicateValues[r]);if(o)return o*u[r].descending*c}return(l(t.tieBreaker,e.tieBreaker)||n(t.tieBreaker,e.tieBreaker))*c}),r=f.map(function(t){return t.value})};function e(t){switch(typeof t){case"number":case"boolean":case"string":return!0;default:return!1}}function n(t,e){var n=0,r=t.type,i=e.type;if(r===i){var o=t.value,a=e.value;"string"===r?(o=o.toLowerCase(),a=a.toLowerCase()):"object"===r&&(H(o)&&(o=t.index),H(a)&&(a=e.index)),o!==a&&(n=o<a?-1:1)}else n=r<i?-1:1;return n}}function Ii(t){return G(t)&&(t={link:t}),t.restrict=t.restrict||"AC",M(t)}ji.$inject=["$parse"];var Mi=M({restrict:"E",compile:function(t,e){if(!e.href&&!e.xlinkHref)return function(t,e){if("a"===e[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===m.call(e.prop("href"))?"xlink:href":"href";e.on("click",function(t){e.attr(n)||t.preventDefault()})}}}}),Ni={};E(Ae,function(t,e){if("multiple"!==t){var n=yn("ng-"+e),r=i;"checked"===t&&(r=function(t,e,r){r.ngModel!==r[n]&&i(t,0,r)}),Ni[n]=function(){return{restrict:"A",priority:100,link:r}}}function i(t,r,i){t.$watch(i[n],function(t){i.$set(e,!!t)})}}),E(Pe,function(t,e){Ni[e]=function(){return{priority:100,link:function(t,n,r){if("ngPattern"===e&&"/"===r.ngPattern.charAt(0)){var i=r.ngPattern.match(o);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}t.$watch(r[e],function(t){r.$set(e,t)})}}}}),E(["src","srcset","href"],function(t){var e=yn("ng-"+t);Ni[e]=function(){return{priority:99,link:function(n,r,i){var o=t,a=t;"href"===t&&"[object SVGAnimatedString]"===m.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(e,function(e){e?(i.$set(a,e),l&&o&&r.prop(o,i[a])):"href"===t&&i.$set(a,null)})}}}});var Di={$addControl:j,$$renameControl:function(t,e){t.$name=e},$removeControl:j,$setValidity:j,$setDirty:j,$setPristine:j,$setSubmitted:j},Ui="ng-pending",Hi="ng-submitted";function qi(t,e,n,r,i){this.$$controls=[],this.$error={},this.$$success={},this.$pending=void 0,this.$name=i(e.name||e.ngForm||"")(n),this.$dirty=!1,this.$pristine=!0,this.$valid=!0,this.$invalid=!1,this.$submitted=!1,this.$$parentForm=Di,this.$$element=t,this.$$animate=r,zi(this)}qi.$inject=["$element","$attrs","$scope","$animate","$interpolate"],qi.prototype={$rollbackViewValue:function(){E(this.$$controls,function(t){t.$rollbackViewValue()})},$commitViewValue:function(){E(this.$$controls,function(t){t.$commitViewValue()})},$addControl:function(t){Nt(t.$name,"input"),this.$$controls.push(t),t.$name&&(this[t.$name]=t),t.$$parentForm=this},$$renameControl:function(t,e){var n=t.$name;this[n]===t&&delete this[n],this[e]=t,t.$name=e},$removeControl:function(t){t.$name&&this[t.$name]===t&&delete this[t.$name],E(this.$pending,function(e,n){this.$setValidity(n,null,t)},this),E(this.$error,function(e,n){this.$setValidity(n,null,t)},this),E(this.$$success,function(e,n){this.$setValidity(n,null,t)},this),ot(this.$$controls,t),t.$$parentForm=Di},$setDirty:function(){this.$$animate.removeClass(this.$$element,Ho),this.$$animate.addClass(this.$$element,qo),this.$dirty=!0,this.$pristine=!1,this.$$parentForm.$setDirty()},$setPristine:function(){this.$$animate.setClass(this.$$element,Ho,qo+" "+Hi),this.$dirty=!1,this.$pristine=!0,this.$submitted=!1,E(this.$$controls,function(t){t.$setPristine()})},$setUntouched:function(){E(this.$$controls,function(t){t.$setUntouched()})},$setSubmitted:function(){this.$$animate.addClass(this.$$element,Hi),this.$submitted=!0,this.$$parentForm.$setSubmitted()}},Wi({clazz:qi,set:function(t,e,n){var r=t[e];r?-1===r.indexOf(n)&&r.push(n):t[e]=[n]},unset:function(t,e,n){var r=t[e];r&&(ot(r,n),0===r.length&&delete t[e])}});var Fi=function(t){return["$timeout","$parse",function(e,n){return{name:"form",restrict:t?"EAC":"E",require:["form","^^?form"],controller:qi,compile:function(n,i){n.addClass(Ho).addClass(Do);var o=i.name?"name":!(!t||!i.ngForm)&&"ngForm";return{pre:function(t,n,i,a){var s=a[0];if(!("action"in i)){var u=function(e){t.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),e.preventDefault()};n[0].addEventListener("submit",u),n.on("$destroy",function(){e(function(){n[0].removeEventListener("submit",u)},0,!1)})}(a[1]||s.$$parentForm).$addControl(s);var c=o?r(s.$name):j;o&&(c(t,s),i.$observe(o,function(e){s.$name!==e&&(c(t,void 0),s.$$parentForm.$$renameControl(s,e),(c=r(s.$name))(t,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),c(t,void 0),O(s,Di)})}}}};function r(t){return""===t?n('this[""]').assign:n(t).assign||j}}]},Li=Fi(),Bi=Fi(!0);function zi(t){t.$$classCache={},t.$$classCache[Uo]=!(t.$$classCache[Do]=t.$$element.hasClass(Do))}function Wi(t){var e=t.clazz,n=t.set,r=t.unset;function i(t,e,n){n&&!t.$$classCache[e]?(t.$$animate.addClass(t.$$element,e),t.$$classCache[e]=!0):!n&&t.$$classCache[e]&&(t.$$animate.removeClass(t.$$element,e),t.$$classCache[e]=!1)}function o(t,e,n){e=e?"-"+Vt(e,"-"):"",i(t,Do+e,!0===n),i(t,Uo+e,!1===n)}e.prototype.$setValidity=function(t,e,a){var s;D(e)?function(t,e,r,i){t[e]||(t[e]={});n(t[e],r,i)}(this,"$pending",t,a):function(t,e,n,i){t[e]&&r(t[e],n,i);Gi(t[e])&&(t[e]=void 0)}(this,"$pending",t,a),Y(e)?e?(r(this.$error,t,a),n(this.$$success,t,a)):(n(this.$error,t,a),r(this.$$success,t,a)):(r(this.$error,t,a),r(this.$$success,t,a)),this.$pending?(i(this,Ui,!0),this.$valid=this.$invalid=void 0,o(this,"",null)):(i(this,Ui,!1),this.$valid=Gi(this.$error),this.$invalid=!this.$valid,o(this,"",this.$valid)),o(this,t,s=this.$pending&&this.$pending[t]?void 0:!this.$error[t]&&(!!this.$$success[t]||null)),this.$$parentForm.$setValidity(t,s,this)}}function Gi(t){if(t)for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}var Ji=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,Ki=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Zi=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,Yi=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Qi=/^(\d{4,})-(\d{2})-(\d{2})$/,Xi=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,to=/^(\d{4,})-W(\d\d)$/,eo=/^(\d{4,})-(\d\d)$/,no=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,ro="keydown wheel mousedown",io=Ht();E("date,datetime-local,month,time,week".split(","),function(t){io[t]=!0});var oo={text:function(t,e,n,r,i,o){so(t,e,n,r,i,o),ao(r)},date:co("date",Qi,uo(Qi,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":co("datetimelocal",Xi,uo(Xi,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:co("time",no,uo(no,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:co("week",to,function(t,e){if(B(t))return t;if(F(t)){to.lastIndex=0;var n=to.exec(t);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,c=Si(r),l=7*(i-1);return e&&(o=e.getHours(),a=e.getMinutes(),s=e.getSeconds(),u=e.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,s,u)}}return NaN},"yyyy-Www"),month:co("month",eo,uo(eo,["yyyy","MM"]),"yyyy-MM"),number:function(t,e,n,r,i,o){var a,s;lo(t,e,n,r),fo(r),so(t,e,n,r,i,o),(U(n.min)||n.ngMin)&&(r.$validators.min=function(t){return r.$isEmpty(t)||D(a)||t>=a},n.$observe("min",function(t){a=ho(t),r.$validate()}));(U(n.max)||n.ngMax)&&(r.$validators.max=function(t){return r.$isEmpty(t)||D(s)||t<=s},n.$observe("max",function(t){s=ho(t),r.$validate()}));if(U(n.step)||n.ngStep){var u;r.$validators.step=function(t,e){return r.$isEmpty(e)||D(u)||$o(e,a||0,u)},n.$observe("step",function(t){u=ho(t),r.$validate()})}},url:function(t,e,n,r,i,o){so(t,e,n,r,i,o),ao(r),r.$$parserName="url",r.$validators.url=function(t,e){var n=t||e;return r.$isEmpty(n)||Ki.test(n)}},email:function(t,e,n,r,i,o){so(t,e,n,r,i,o),ao(r),r.$$parserName="email",r.$validators.email=function(t,e){var n=t||e;return r.$isEmpty(n)||Zi.test(n)}},radio:function(t,e,n,r){var i=!n.ngTrim||"false"!==tt(n.ngTrim);D(n.name)&&e.attr("name",_());e.on("click",function(t){var o;e[0].checked&&(o=n.value,i&&(o=tt(o)),r.$setViewValue(o,t&&t.type))}),r.$render=function(){var t=n.value;i&&(t=tt(t)),e[0].checked=t===r.$viewValue},n.$observe("value",r.$render)},range:function(t,e,n,r,i,o){lo(t,e,n,r),fo(r),so(t,e,n,r,i,o);var a=r.$$hasNativeValidators&&"range"===e[0].type,s=a?0:void 0,u=a?100:void 0,c=a?1:void 0,l=e[0].validity,f=U(n.min),h=U(n.max),p=U(n.step),d=r.$render;r.$render=a&&U(l.rangeUnderflow)&&U(l.rangeOverflow)?function(){d(),r.$setViewValue(e.val())}:d,f&&(r.$validators.min=a?function(){return!0}:function(t,e){return r.$isEmpty(e)||D(s)||e>=s},v("min",function(t){if(s=ho(t),P(r.$modelValue))return;if(a){var n=e.val();s>n&&(n=s,e.val(n)),r.$setViewValue(n)}else r.$validate()}));h&&(r.$validators.max=a?function(){return!0}:function(t,e){return r.$isEmpty(e)||D(u)||e<=u},v("max",function(t){if(u=ho(t),P(r.$modelValue))return;if(a){var n=e.val();u<n&&(e.val(u),n=u<s?s:u),r.$setViewValue(n)}else r.$validate()}));p&&(r.$validators.step=a?function(){return!l.stepMismatch}:function(t,e){return r.$isEmpty(e)||D(c)||$o(e,s||0,c)},v("step",function(t){if(c=ho(t),P(r.$modelValue))return;a&&r.$viewValue!==e.val()?r.$setViewValue(e.val()):r.$validate()}));function v(t,r){e.attr(t,n[t]),n.$observe(t,r)}},checkbox:function(t,e,n,r,i,o,a,s){var u=mo(s,t,"ngTrueValue",n.ngTrueValue,!0),c=mo(s,t,"ngFalseValue",n.ngFalseValue,!1);e.on("click",function(t){r.$setViewValue(e[0].checked,t&&t.type)}),r.$render=function(){e[0].checked=r.$viewValue},r.$isEmpty=function(t){return!1===t},r.$formatters.push(function(t){return ut(t,u)}),r.$parsers.push(function(t){return t?u:c})},hidden:j,button:j,submit:j,reset:j,file:j};function ao(t){t.$formatters.push(function(e){return t.$isEmpty(e)?e:e.toString()})}function so(t,e,n,r,i,o){var s,c=u(e[0].type);if(!i.android){var l=!1;e.on("compositionstart",function(){l=!0}),e.on("compositionend",function(){l=!1,f()})}var f=function(t){if(s&&(o.defer.cancel(s),s=null),!l){var i=e.val(),a=t&&t.type;"password"===c||n.ngTrim&&"false"===n.ngTrim||(i=tt(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,a)}};if(i.hasEvent("input"))e.on("input",f);else{var h=function(t,e,n){s||(s=o.defer(function(){s=null,e&&e.value===n||f(t)}))};e.on("keydown",function(t){var e=t.keyCode;91===e||15<e&&e<19||37<=e&&e<=40||h(t,this,this.value)}),i.hasEvent("paste")&&e.on("paste cut",h)}e.on("change",f),io[c]&&r.$$hasNativeValidators&&c===n.type&&e.on(ro,function(t){if(!s){var e=this[a],n=e.badInput,r=e.typeMismatch;s=o.defer(function(){s=null,e.badInput===n&&e.typeMismatch===r||f(t)})}}),r.$render=function(){var t=r.$isEmpty(r.$viewValue)?"":r.$viewValue;e.val()!==t&&e.val(t)}}function uo(t,e){return function(n,r){var i,o;if(B(n))return n;if(F(n)){if('"'===n.charAt(0)&&'"'===n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),Ji.test(n))return new Date(n);if(t.lastIndex=0,i=t.exec(n))return i.shift(),o=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},E(i,function(t,n){n<e.length&&(o[e[n]]=+t)}),new Date(o.yyyy,o.MM-1,o.dd,o.HH,o.mm,o.ss||0,1e3*o.sss||0)}return NaN}}function co(t,e,n,r){return function(i,o,a,s,u,c,l){lo(i,o,a,s),so(0,o,a,s,u,c);var f,h,p,d=s&&s.$options.getOption("timezone");(s.$$parserName=t,s.$parsers.push(function(t){if(s.$isEmpty(t))return null;if(e.test(t)){var r=n(t,f);return d&&(r=yt(r,d)),r}}),s.$formatters.push(function(t){if(t&&!B(t))throw Wo("datefmt","Expected `{0}` to be a date",t);return v(t)?((f=t)&&d&&(f=yt(f,d,!0)),l("date")(t,r,d)):(f=null,"")}),U(a.min)||a.ngMin)&&(s.$validators.min=function(t){return!v(t)||D(h)||n(t)>=h},a.$observe("min",function(t){h=$(t),s.$validate()}));(U(a.max)||a.ngMax)&&(s.$validators.max=function(t){return!v(t)||D(p)||n(t)<=p},a.$observe("max",function(t){p=$(t),s.$validate()}));function v(t){return t&&!(t.getTime&&t.getTime()!=t.getTime())}function $(t){return U(t)&&!B(t)?n(t)||void 0:t}}}function lo(t,e,n,r){var i=e[0];(r.$$hasNativeValidators=H(i.validity))&&r.$parsers.push(function(t){var n=e.prop(a)||{};return n.badInput||n.typeMismatch?void 0:t})}function fo(t){t.$$parserName="number",t.$parsers.push(function(e){return t.$isEmpty(e)?null:Yi.test(e)?parseFloat(e):void 0}),t.$formatters.push(function(e){if(!t.$isEmpty(e)){if(!L(e))throw Wo("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e})}function ho(t){return U(t)&&!L(t)&&(t=parseFloat(t)),P(t)?void 0:t}function po(t){return(0|t)===t}function vo(t){var e=t.toString(),n=e.indexOf(".");if(-1===n){if(-1<t&&t<1){var r=/e-(\d+)$/.exec(e);if(r)return Number(r[1])}return 0}return e.length-n-1}function $o(t,e,n){var r=Number(t),i=!po(r),o=!po(e),a=!po(n);if(i||o||a){var s=i?vo(r):0,u=o?vo(e):0,c=a?vo(n):0,l=Math.max(s,u,c),f=Math.pow(10,l);r*=f,e*=f,n*=f,i&&(r=Math.round(r)),o&&(e=Math.round(e)),a&&(n=Math.round(n))}return(r-e)%n==0}function mo(t,e,n,r,i){var o;if(U(r)){if(!(o=t(r)).constant)throw Wo("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(e)}return i}var go=["$browser","$sniffer","$filter","$parse",function(t,e,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(oo[u(a.type)]||oo.text)(i,o,a,s[0],e,t,n,r)}}}}],yo=/^(true|false|\d+)$/,wo=function(){function t(t,e,n){var r=U(n)?n:9===l?"":null;t.prop("value",r),e.$set("value",n)}return{restrict:"A",priority:100,compile:function(e,n){return yo.test(n.ngValue)?function(e,n,r){t(n,r,e.$eval(r.ngValue))}:function(e,n,r){e.$watch(r.ngValue,function(e){t(n,r,e)})}}}},bo=["$compile",function(t){return{restrict:"AC",compile:function(e){return t.$$addBindingClass(e),function(e,n,r){t.$$addBindingInfo(n,r.ngBind),n=n[0],e.$watch(r.ngBind,function(t){n.textContent=qt(t)})}}}}],So=["$interpolate","$compile",function(t,e){return{compile:function(n){return e.$$addBindingClass(n),function(n,r,i){var o=t(r.attr(i.$attr.ngBindTemplate));e.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(t){r.textContent=D(t)?"":t})}}}}],Eo=["$sce","$parse","$compile",function(t,e,n){return{restrict:"A",compile:function(r,i){var o=e(i.ngBindHtml),a=e(i.ngBindHtml,function(e){return t.valueOf(e)});return n.$$addBindingClass(r),function(e,r,i){n.$$addBindingInfo(r,i.ngBindHtml),e.$watch(a,function(){var n=o(e);r.html(t.getTrustedHtml(n)||"")})}}}}],xo=M({restrict:"A",require:"ngModel",link:function(t,e,n,r){r.$viewChangeListeners.push(function(){t.$eval(n.ngChange)})}});function Co(t,e){var n;return t="ngClass"+t,["$parse",function(s){return{restrict:"AC",link:function(u,c,l){var f,h=l[t].trim(),p=":"===h.charAt(0)&&":"===h.charAt(1),d=s(h,p?a:o),v=p?function(t){var e=o(t);e!==f&&y(e)}:y,$=c.data("$classCounts"),m=!0;function g(t,e){var n=[];return E(t,function(t){(e>0||$[t])&&($[t]=($[t]||0)+e,$[t]===+(e>0)&&n.push(t))}),n.join(" ")}function y(t){var n,o,a,s,u,c,h;m===e&&(n=t,o=i(f),a=i(n),s=r(o,a),u=r(a,o),c=g(s,-1),h=g(u,1),l.$addClass(h),l.$removeClass(c)),f=t}$||($=Ht(),c.data("$classCounts",$)),"ngClass"!==t&&(n||(n=s("$index",function(t){return 1&t})),u.$watch(n,function(t){t===e?(r=g(i(r=f),1),l.$addClass(r)):(n=g(i(n=f),-1),l.$removeClass(n));var n;var r;m=t})),u.$watch(d,v,p)}}}];function r(t,e){if(!t||!t.length)return[];if(!e||!e.length)return t;var n=[];t:for(var r=0;r<t.length;r++){for(var i=t[r],o=0;o<e.length;o++)if(i===e[o])continue t;n.push(i)}return n}function i(t){return t&&t.split(" ")}function o(t){var e=t;return z(t)?e=t.map(o).join(" "):H(t)&&(e=Object.keys(t).filter(function(e){return t[e]}).join(" ")),e}function a(t){var e=t;if(z(t))e=t.map(a);else if(H(t)){var n=!1;e=Object.keys(t).filter(function(e){var r=t[e];return!n&&D(r)&&(n=!0),r}),n&&e.push(void 0)}return e}}var _o=Co("",!0),ko=Co("Odd",0),Ro=Co("Even",1),Oo=Ii({compile:function(t,e){e.$set("ngCloak",void 0),t.removeClass("ng-cloak")}}),Ao=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],To={},Po={blur:!0,focus:!0};E("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(t){var e=yn("ng-"+t);To[e]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[e]);return function(e,n){n.on(t,function(n){var i=function(){a(e,{$event:n})};Po[t]&&r.$$phase?e.$evalAsync(i):e.$apply(i)})}}}}]});var Vo=["$animate","$compile",function(t,e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=e.$$createComment("end ngIf",i.ngIf),s={clone:n},t.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=Ut(s.clone),t.leave(c).done(function(t){!1!==t&&(c=null)}),s=null))})}}}],jo=["$templateRequest","$anchorScroll","$animate",function(t,e,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:w.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,h,p,d=0,v=function(){h&&(h.remove(),h=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).done(function(t){!1!==t&&(h=null)}),h=p,p=null)};r.$watch(o,function(o){var u=function(t){!1===t||!U(s)||s&&!r.$eval(s)||e()},h=++d;o?(t(o,!0).then(function(t){if(!r.$$destroyed&&h===d){var e=r.$new();c.template=t;var s=l(e,function(t){v(),n.enter(t,null,i).done(u)});p=s,(f=e).$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||h===d&&(v(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(v(),c.template=null)})}}}}],Io=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){if(m.call(r[0]).match(/SVG/))return r.empty(),void e(fe(o.template,t.document).childNodes)(n,function(t){r.append(t)},{futureParentElement:r});r.html(o.template),e(r.contents())(n)}}}],Mo=Ii({priority:450,compile:function(){return{pre:function(t,e,n){t.$eval(n.ngInit)}}}}),No=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(t,e,n,r){var i=n.ngList||", ",o="false"!==n.ngTrim,a=o?tt(i):i;r.$parsers.push(function(t){if(!D(t)){var e=[];return t&&E(t.split(a),function(t){t&&e.push(o?tt(t):t)}),e}}),r.$formatters.push(function(t){if(z(t))return t.join(i)}),r.$isEmpty=function(t){return!t||!t.length}}}},Do="ng-valid",Uo="ng-invalid",Ho="ng-pristine",qo="ng-dirty",Fo="ng-untouched",Lo="ng-touched",Bo="ng-empty",zo="ng-not-empty",Wo=i("ngModel");function Go(t,e,n,r,i,o,a,s,u){var c;this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=u(n.name||"",!1)(t),this.$$parentForm=Di,this.$options=Jo,this.$$updateEvents="",this.$$updateEventHandler=this.$$updateEventHandler.bind(this),this.$$parsedNgModel=i(n.ngModel),this.$$parsedNgModelAssign=this.$$parsedNgModel.assign,this.$$ngModelGet=this.$$parsedNgModel,this.$$ngModelSet=this.$$parsedNgModelAssign,this.$$pendingDebounce=null,this.$$parserValid=void 0,this.$$currentValidationRunId=0,Object.defineProperty(this,"$$scope",{value:t}),this.$$attr=n,this.$$element=r,this.$$animate=o,this.$$timeout=a,this.$$parse=i,this.$$q=s,this.$$exceptionHandler=e,zi(this),(c=this).$$scope.$watch(function(t){var e=c.$$ngModelGet(t);return e===c.$modelValue||c.$modelValue!=c.$modelValue&&e!=e||c.$$setModelValue(e),e})}Go.$inject=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$q","$interpolate"],Go.prototype={$$initGetterSetters:function(){if(this.$options.getOption("getterSetter")){var t=this.$$parse(this.$$attr.ngModel+"()"),e=this.$$parse(this.$$attr.ngModel+"($$$p)");this.$$ngModelGet=function(e){var n=this.$$parsedNgModel(e);return G(n)&&(n=t(e)),n},this.$$ngModelSet=function(t,n){G(this.$$parsedNgModel(t))?e(t,{$$$p:n}):this.$$parsedNgModelAssign(t,n)}}else if(!this.$$parsedNgModel.assign)throw Wo("nonassign","Expression '{0}' is non-assignable. Element: {1}",this.$$attr.ngModel,wt(this.$$element))},$render:j,$isEmpty:function(t){return D(t)||""===t||null===t||t!=t},$$updateEmptyClasses:function(t){this.$isEmpty(t)?(this.$$animate.removeClass(this.$$element,zo),this.$$animate.addClass(this.$$element,Bo)):(this.$$animate.removeClass(this.$$element,Bo),this.$$animate.addClass(this.$$element,zo))},$setPristine:function(){this.$dirty=!1,this.$pristine=!0,this.$$animate.removeClass(this.$$element,qo),this.$$animate.addClass(this.$$element,Ho)},$setDirty:function(){this.$dirty=!0,this.$pristine=!1,this.$$animate.removeClass(this.$$element,Ho),this.$$animate.addClass(this.$$element,qo),this.$$parentForm.$setDirty()},$setUntouched:function(){this.$touched=!1,this.$untouched=!0,this.$$animate.setClass(this.$$element,Fo,Lo)},$setTouched:function(){this.$touched=!0,this.$untouched=!1,this.$$animate.setClass(this.$$element,Lo,Fo)},$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce),this.$viewValue=this.$$lastCommittedViewValue,this.$render()},$validate:function(){if(!P(this.$modelValue)){var t=this.$$lastCommittedViewValue,e=this.$$rawModelValue,n=this.$valid,r=this.$modelValue,i=this.$options.getOption("allowInvalid"),o=this;this.$$runValidators(e,t,function(t){i||n===t||(o.$modelValue=t?e:void 0,o.$modelValue!==r&&o.$$writeModelToScope())})}},$$runValidators:function(t,e,n){this.$$currentValidationRunId++;var r,i,o=this.$$currentValidationRunId,a=this;(function(){var t=a.$$parserName||"parse";{if(!D(a.$$parserValid))return a.$$parserValid||(E(a.$validators,function(t,e){s(e,null)}),E(a.$asyncValidators,function(t,e){s(e,null)})),s(t,a.$$parserValid),a.$$parserValid;s(t,null)}return!0})()?!function(){var n=!0;if(E(a.$validators,function(r,i){var o=Boolean(r(t,e));n=n&&o,s(i,o)}),!n)return E(a.$asyncValidators,function(t,e){s(e,null)}),!1;return!0}()?u(!1):(r=[],i=!0,E(a.$asyncValidators,function(n,o){var a=n(t,e);if(!Q(a))throw Wo("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",a);s(o,void 0),r.push(a.then(function(){s(o,!0)},function(){i=!1,s(o,!1)}))}),r.length?a.$$q.all(r).then(function(){u(i)},j):u(!0)):u(!1);function s(t,e){o===a.$$currentValidationRunId&&a.$setValidity(t,e)}function u(t){o===a.$$currentValidationRunId&&n(t)}},$commitViewValue:function(){var t=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce),(this.$$lastCommittedViewValue!==t||""===t&&this.$$hasNativeValidators)&&(this.$$updateEmptyClasses(t),this.$$lastCommittedViewValue=t,this.$pristine&&this.$setDirty(),this.$$parseAndValidate())},$$parseAndValidate:function(){var t=this.$$lastCommittedViewValue,e=this;if(this.$$parserValid=!D(t)||void 0,this.$$parserValid)for(var n=0;n<this.$parsers.length;n++)if(D(t=this.$parsers[n](t))){this.$$parserValid=!1;break}P(this.$modelValue)&&(this.$modelValue=this.$$ngModelGet(this.$$scope));var r=this.$modelValue,i=this.$options.getOption("allowInvalid");function o(){e.$modelValue!==r&&e.$$writeModelToScope()}this.$$rawModelValue=t,i&&(this.$modelValue=t,o()),this.$$runValidators(t,this.$$lastCommittedViewValue,function(n){i||(e.$modelValue=n?t:void 0,o())})},$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue),E(this.$viewChangeListeners,function(t){try{t()}catch(t){this.$$exceptionHandler(t)}},this)},$setViewValue:function(t,e){this.$viewValue=t,this.$options.getOption("updateOnDefault")&&this.$$debounceViewValueCommit(e)},$$debounceViewValueCommit:function(t){var e=this.$options.getOption("debounce");L(e[t])?e=e[t]:L(e.default)&&(e=e.default),this.$$timeout.cancel(this.$$pendingDebounce);var n=this;e>0?this.$$pendingDebounce=this.$$timeout(function(){n.$commitViewValue()},e):this.$$scope.$root.$$phase?this.$commitViewValue():this.$$scope.$apply(function(){n.$commitViewValue()})},$overrideModelOptions:function(t){this.$options=this.$options.createChild(t),this.$$setUpdateOnEvents()},$processModelValue:function(){var t=this.$$format();this.$viewValue!==t&&(this.$$updateEmptyClasses(t),this.$viewValue=this.$$lastCommittedViewValue=t,this.$render(),this.$$runValidators(this.$modelValue,this.$viewValue,j))},$$format:function(){for(var t=this.$formatters,e=t.length,n=this.$modelValue;e--;)n=t[e](n);return n},$$setModelValue:function(t){this.$modelValue=this.$$rawModelValue=t,this.$$parserValid=void 0,this.$processModelValue()},$$setUpdateOnEvents:function(){this.$$updateEvents&&this.$$element.off(this.$$updateEvents,this.$$updateEventHandler),this.$$updateEvents=this.$options.getOption("updateOn"),this.$$updateEvents&&this.$$element.on(this.$$updateEvents,this.$$updateEventHandler)},$$updateEventHandler:function(t){this.$$debounceViewValueCommit(t&&t.type)}},Wi({clazz:Go,set:function(t,e){t[e]=!0},unset:function(t,e){delete t[e]}});var Jo,Ko=["$rootScope",function(t){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Go,priority:1,compile:function(e){return e.addClass(Ho).addClass(Fo).addClass(Do),{pre:function(t,e,n,r){var i=r[0],o=r[1]||i.$$parentForm,a=r[2];a&&(i.$options=a.$options),i.$$initGetterSetters(),o.$addControl(i),n.$observe("name",function(t){i.$name!==t&&i.$$parentForm.$$renameControl(i,t)}),t.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(e,n,r,i){var o=i[0];function a(){o.$setTouched()}o.$$setUpdateOnEvents(),n.on("blur",function(){o.$touched||(t.$$phase?e.$evalAsync(a):e.$apply(a))})}}}}}],Zo=/(\s+|^)default(\s+|$)/;function Yo(t){this.$$options=t}Yo.prototype={getOption:function(t){return this.$$options[t]},createChild:function(t){var e=!1;return E(t=O({},t),function(n,r){"$inherit"===n?"*"===r?e=!0:(t[r]=this.$$options[r],"updateOn"===r&&(t.updateOnDefault=this.$$options.updateOnDefault)):"updateOn"===r&&(t.updateOnDefault=!1,t[r]=tt(n.replace(Zo,function(){return t.updateOnDefault=!0," "})))},this),e&&(delete t["*"],Xo(t,this.$$options)),Xo(t,Jo.$$options),new Yo(t)}},Jo=new Yo({updateOn:"",updateOnDefault:!0,debounce:0,getterSetter:!1,allowInvalid:!1,timezone:null});var Qo=function(){function t(t,e){this.$$attrs=t,this.$$scope=e}return t.$inject=["$attrs","$scope"],t.prototype={$onInit:function(){var t=this.parentCtrl?this.parentCtrl.$options:Jo,e=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=t.createChild(e)}},{restrict:"A",priority:10,require:{parentCtrl:"?^^ngModelOptions"},bindToController:!0,controller:t}};function Xo(t,e){E(e,function(e,n){U(t[n])||(t[n]=e)})}var ta=Ii({terminal:!0,priority:1e3}),ea=i("ngOptions"),na=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,ra=["$compile","$document","$parse",function(e,n,r){var i=t.document.createElement("option"),o=t.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(t,e,n,r){r[0].registerOption=j},post:function(t,a,s,u){for(var c=u[0],l=u[1],h=s.multiple,p=0,d=a.children(),v=d.length;p<v;p++)if(""===d[p].value){c.hasEmptyOption=!0,c.emptyOption=d.eq(p);break}a.empty();var $,m=!!c.emptyOption;f(i.cloneNode(!1)).val("?");var g=function(t,e,n){var i=t.match(na);if(!i)throw ea("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",t,wt(e));var o=i[5]||i[7],a=i[6],s=/ as /.test(i[0])&&i[1],u=i[9],c=r(i[2]?i[1]:o),l=s&&r(s)||c,f=u&&r(u),h=u?function(t,e){return f(n,e)}:function(t){return Ne(t)},p=function(t,e){return h(t,y(t,e))},d=r(i[2]||i[1]),v=r(i[3]||""),$=r(i[4]||""),m=r(i[8]),g={},y=a?function(t,e){return g[a]=e,g[o]=t,g}:function(t){return g[o]=t,g};function w(t,e,n,r,i){this.selectValue=t,this.viewValue=e,this.label=n,this.group=r,this.disabled=i}function b(t){var e;if(!a&&S(t))e=t;else for(var n in e=[],t)t.hasOwnProperty(n)&&"$"!==n.charAt(0)&&e.push(n);return e}return{trackBy:u,getTrackByValue:p,getWatchables:r(m,function(t){for(var e=[],r=b(t=t||[]),o=r.length,a=0;a<o;a++){var s=t===r?a:r[a],u=t[s],c=y(u,s),l=h(u,c);if(e.push(l),i[2]||i[1]){var f=d(n,c);e.push(f)}if(i[4]){var p=$(n,c);e.push(p)}}return e}),getOptions:function(){for(var t=[],e={},r=m(n)||[],i=b(r),o=i.length,a=0;a<o;a++){var s=r===i?a:i[a],c=r[s],f=y(c,s),g=l(n,f),S=h(g,f),E=new w(S,g,d(n,f),v(n,f),$(n,f));t.push(E),e[S]=E}return{items:t,selectValueMap:e,getOptionFromViewValue:function(t){return e[p(t)]},getViewValueFromOption:function(t){return u?at(t.viewValue):t.viewValue}}}}}(s.ngOptions,a,t),y=n[0].createDocumentFragment();function w(t,e){var n,r,o=i.cloneNode(!1);e.appendChild(o),r=o,(n=t).element=r,r.disabled=n.disabled,n.label!==r.label&&(r.label=n.label,r.textContent=n.label),r.value=n.selectValue}function b(t){var e=$.getOptionFromViewValue(t),n=e&&e.element;return n&&!n.selected&&(n.selected=!0),e}c.generateUnknownOptionValue=function(t){return"?"},h?(c.writeValue=function(t){if($){var e=t&&t.map(b)||[];$.items.forEach(function(t){t.element.selected&&!it(e,t)&&(t.element.selected=!1)})}},c.readValue=function(){var t=[];return E(a.val()||[],function(e){var n=$.selectValueMap[e];n&&!n.disabled&&t.push($.getViewValueFromOption(n))}),t},g.trackBy&&t.$watchCollection(function(){if(z(l.$viewValue))return l.$viewValue.map(function(t){return g.getTrackByValue(t)})},function(){l.$render()})):(c.writeValue=function(t){if($){var e=a[0].options[a[0].selectedIndex],n=$.getOptionFromViewValue(t);e&&e.removeAttribute("selected"),n?(a[0].value!==n.selectValue&&(c.removeUnknownOption(),a[0].value=n.selectValue,n.element.selected=!0),n.element.setAttribute("selected","selected")):c.selectUnknownOrEmptyOption(t)}},c.readValue=function(){var t=$.selectValueMap[a.val()];return t&&!t.disabled?(c.unselectEmptyOption(),c.removeUnknownOption(),$.getViewValueFromOption(t)):null},g.trackBy&&t.$watch(function(){return g.getTrackByValue(l.$viewValue)},function(){l.$render()})),m&&(e(c.emptyOption)(t),a.prepend(c.emptyOption),c.emptyOption[0].nodeType===Bt?(c.hasEmptyOption=!1,c.registerOption=function(t,e){""===e.val()&&(c.hasEmptyOption=!0,c.emptyOption=e,c.emptyOption.removeClass("ng-scope"),l.$render(),e.on("$destroy",function(){var t=c.$isEmptyOptionSelected();c.hasEmptyOption=!1,c.emptyOption=void 0,t&&l.$render()}))}):c.emptyOption.removeClass("ng-scope")),t.$watchCollection(g.getWatchables,function(){var t=$&&c.readValue();if($)for(var e=$.items.length-1;e>=0;e--){var n=$.items[e];U(n.group)?ke(n.element.parentNode):ke(n.element)}var r={};if(($=g.getOptions()).items.forEach(function(t){var e;U(t.group)?((e=r[t.group])||(e=o.cloneNode(!1),y.appendChild(e),e.label=null===t.group?"null":t.group,r[t.group]=e),w(t,e)):w(t,y)}),a[0].appendChild(y),l.$render(),!l.$isEmpty(t)){var i=c.readValue(),s=g.trackBy||h;(s?ut(t,i):t===i)||(l.$setViewValue(i),l.$render())}})}}}}],ia=["$locale","$interpolate","$log",function(t,e,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(o,a,s){var c,l=s.count,f=s.$attr.when&&a.attr(s.$attr.when),h=s.offset||0,p=o.$eval(f)||{},d={},v=e.startSymbol(),$=e.endSymbol(),m=v+l+"-"+h+$,g=w.noop;function y(t){a.text(t||"")}E(s,function(t,e){var n=i.exec(e);if(n){var r=(n[1]?"-":"")+u(n[2]);p[r]=a.attr(s.$attr[e])}}),E(p,function(t,n){d[n]=e(t.replace(r,m))}),o.$watch(l,function(e){var r=parseFloat(e),i=P(r);if(i||r in p||(r=t.pluralCat(r-h)),!(r===c||i&&P(c))){g();var a=d[r];D(a)?(null!=e&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+f),g=j,y()):g=o.$watch(a,y),c=r}})}}}],oa=["$parse","$animate","$compile",function(t,e,n){var r="$$NG_REMOVED",o=i("ngRepeat"),a=function(t,e,n,r,i,o,a){t[n]=r,i&&(t[i]=o),t.$index=e,t.$first=0===e,t.$last=e===a-1,t.$middle=!(t.$first||t.$last),t.$odd=!(t.$even=0==(1&e))};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(i,u){var c=u.ngRepeat,l=n.$$createComment("end ngRepeat",c),f=c.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!f)throw o("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",c);var h=f[1],p=f[2],d=f[3],v=f[4];if(!(f=h.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/)))throw o("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",h);var $,m,g,y,w=f[3]||f[1],b=f[2];if(d&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(d)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(d)))throw o("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",d);var x={$id:Ne};return v?$=t(v):(g=function(t,e){return Ne(e)},y=function(t){return t}),function(t,n,i,u,f){$&&(m=function(e,n,r){return b&&(x[b]=e),x[w]=n,x.$index=r,$(t,x)});var h=Ht();t.$watchCollection(p,function(i){var u,p,v,$,x,C,_,k,R,O,A,T,P,V=n[0],j=Ht();if(d&&(t[d]=i),S(i))R=i,k=m||g;else for(var I in k=m||y,R=[],i)s.call(i,I)&&"$"!==I.charAt(0)&&R.push(I);for($=R.length,A=new Array($),u=0;u<$;u++)if(x=i===R?u:R[u],C=i[x],_=k(x,C,u),h[_])O=h[_],delete h[_],j[_]=O,A[u]=O;else{if(j[_])throw E(A,function(t){t&&t.scope&&(h[t.id]=t)}),o("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",c,_,C);A[u]={id:_,scope:void 0,clone:void 0},j[_]=!0}for(var M in h){if(T=Ut((O=h[M]).clone),e.leave(T),T[0].parentNode)for(u=0,p=T.length;u<p;u++)T[u][r]=!0;O.scope.$destroy()}for(u=0;u<$;u++)if(x=i===R?u:R[u],C=i[x],(O=A[u]).scope){v=V;do{v=v.nextSibling}while(v&&v[r]);O.clone[0]!==v&&e.move(Ut(O.clone),null,V),V=(P=O).clone[P.clone.length-1],a(O.scope,u,w,C,b,x,$)}else f(function(t,n){O.scope=n;var r=l.cloneNode(!1);t[t.length++]=r,e.enter(t,null,V),V=r,O.clone=t,j[O.id]=O,a(O.scope,u,w,C,b,x,$)});h=j})}}}}],aa="ng-hide",sa="ng-hide-animate",ua=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngShow,function(e){t[e?"removeClass":"addClass"](n,aa,{tempClasses:sa})})}}}],ca=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngHide,function(e){t[e?"addClass":"removeClass"](n,aa,{tempClasses:sa})})}}}],la=Ii(function(t,e,n){t.$watch(n.ngStyle,function(t,n){n&&t!==n&&E(n,function(t,n){e.css(n,"")}),t&&e.css(t)},!0)}),fa=["$animate","$compile",function(t,e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,o){var a=i.ngSwitch||i.on,s=[],u=[],c=[],l=[],f=function(t,e){return function(n){!1!==n&&t.splice(e,1)}};n.$watch(a,function(n){for(var r,i;c.length;)t.cancel(c.pop());for(r=0,i=l.length;r<i;++r){var a=Ut(u[r].clone);l[r].$destroy(),(c[r]=t.leave(a)).done(f(c,r))}u.length=0,l.length=0,(s=o.cases["!"+n]||o.cases["?"])&&E(s,function(n){n.transclude(function(r,i){l.push(i);var o=n.element;r[r.length++]=e.$$createComment("end ngSwitchWhen");var a={clone:r};u.push(a),t.enter(r,o.parent(),o)})})})}}}],ha=Ii({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){E(n.ngSwitchWhen.split(n.ngSwitchWhenSeparator).sort().filter(function(t,e,n){return n[e-1]!==t}),function(t){r.cases["!"+t]=r.cases["!"+t]||[],r.cases["!"+t].push({transclude:i,element:e})})}}),pa=Ii({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:e})}}),da=i("ngTransclude"),va=["$compile",function(t){return{restrict:"EAC",terminal:!0,compile:function(e){var n=t(e.contents());return e.empty(),function(t,e,r,i,o){if(!o)throw da("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",wt(e));r.ngTransclude===r.$attr.ngTransclude&&(r.ngTransclude="");var a=r.ngTransclude||r.ngTranscludeSlot;function s(){n(t,function(t){e.append(t)})}o(function(t,n){t.length&&function(t){for(var e=0,n=t.length;e<n;e++){var r=t[e];if(r.nodeType!==Lt||r.nodeValue.trim())return!0}}(t)?e.append(t):(s(),n.$destroy())},null,a),a&&!o.isSlotFilled(a)&&s()}}}}],$a=["$templateCache",function(t){return{restrict:"E",terminal:!0,compile:function(e,n){if("text/ng-template"===n.type){var r=n.id,i=e[0].text;t.put(r,i)}}}}],ma={$setViewValue:j,$render:j};function ga(t,e){t.prop("selected",e),t.attr("selected",e)}var ya=["$element","$scope",function(e,n){var r=this,i=new He;r.selectValueMap={},r.ngModelCtrl=ma,r.multiple=!1,r.unknownOption=f(t.document.createElement("option")),r.hasEmptyOption=!1,r.emptyOption=void 0,r.renderUnknownOption=function(t){var n=r.generateUnknownOptionValue(t);r.unknownOption.val(n),e.prepend(r.unknownOption),ga(r.unknownOption,!0),e.val(n)},r.updateUnknownOption=function(t){var n=r.generateUnknownOptionValue(t);r.unknownOption.val(n),ga(r.unknownOption,!0),e.val(n)},r.generateUnknownOptionValue=function(t){return"? "+Ne(t)+" ?"},r.removeUnknownOption=function(){r.unknownOption.parent()&&r.unknownOption.remove()},r.selectEmptyOption=function(){r.emptyOption&&(e.val(""),ga(r.emptyOption,!0))},r.unselectEmptyOption=function(){r.hasEmptyOption&&ga(r.emptyOption,!1)},n.$on("$destroy",function(){r.renderUnknownOption=j}),r.readValue=function(){var t=e.val(),n=t in r.selectValueMap?r.selectValueMap[t]:t;return r.hasOption(n)?n:null},r.writeValue=function(t){var n=e[0].options[e[0].selectedIndex];if(n&&ga(f(n),!1),r.hasOption(t)){r.removeUnknownOption();var i=Ne(t);e.val(i in r.selectValueMap?i:t);var o=e[0].options[e[0].selectedIndex];ga(f(o),!0)}else r.selectUnknownOrEmptyOption(t)},r.addOption=function(t,e){if(e[0].nodeType!==Bt){Nt(t,'"option value"'),""===t&&(r.hasEmptyOption=!0,r.emptyOption=e);var n=i.get(t)||0;i.set(t,n+1),a()}},r.removeOption=function(t){var e=i.get(t);e&&(1===e?(i.delete(t),""===t&&(r.hasEmptyOption=!1,r.emptyOption=void 0)):i.set(t,e-1))},r.hasOption=function(t){return!!i.get(t)},r.$hasEmptyOption=function(){return r.hasEmptyOption},r.$isUnknownOptionSelected=function(){return e[0].options[0]===r.unknownOption[0]},r.$isEmptyOptionSelected=function(){return r.hasEmptyOption&&e[0].options[e[0].selectedIndex]===r.emptyOption[0]},r.selectUnknownOrEmptyOption=function(t){null==t&&r.emptyOption?(r.removeUnknownOption(),r.selectEmptyOption()):r.unknownOption.parent().length?r.updateUnknownOption(t):r.renderUnknownOption(t)};var o=!1;function a(){o||(o=!0,n.$$postDigest(function(){o=!1,r.ngModelCtrl.$render()}))}var s=!1;function u(t){s||(s=!0,n.$$postDigest(function(){n.$$destroyed||(s=!1,r.ngModelCtrl.$setViewValue(r.readValue()),t&&r.ngModelCtrl.$render())}))}r.registerOption=function(t,e,n,i,o){if(n.$attr.ngValue){var s,c=NaN;n.$observe("value",function(t){var n,i=e.prop("selected");U(c)&&(r.removeOption(s),delete r.selectValueMap[c],n=!0),c=Ne(t),s=t,r.selectValueMap[c]=t,r.addOption(t,e),e.attr("value",c),n&&i&&u()})}else i?n.$observe("value",function(t){var n;r.readValue();var i=e.prop("selected");U(s)&&(r.removeOption(s),n=!0),s=t,r.addOption(t,e),n&&i&&u()}):o?t.$watch(o,function(t,i){n.$set("value",t);var o=e.prop("selected");i!==t&&r.removeOption(i),r.addOption(t,e),i&&o&&u()}):r.addOption(n.value,e);n.$observe("disabled",function(t){("true"===t||t&&e.prop("selected"))&&(r.multiple?u(!0):(r.ngModelCtrl.$setViewValue(null),r.ngModelCtrl.$render()))}),e.on("$destroy",function(){var t=r.readValue(),e=n.value;r.removeOption(e),a(),(r.multiple&&t&&-1!==t.indexOf(e)||t===e)&&u(!0)})}}],wa=function(){return{restrict:"E",require:["select","?ngModel"],controller:ya,priority:1,link:{pre:function(t,e,n,r){var i=r[0],o=r[1];if(!o)return void(i.registerOption=j);if(i.ngModelCtrl=o,e.on("change",function(){i.removeUnknownOption(),t.$apply(function(){o.$setViewValue(i.readValue())})}),n.multiple){i.multiple=!0,i.readValue=function(){var t=[];return E(e.find("option"),function(e){if(e.selected&&!e.disabled){var n=e.value;t.push(n in i.selectValueMap?i.selectValueMap[n]:n)}}),t},i.writeValue=function(t){E(e.find("option"),function(e){var n=!!t&&(it(t,e.value)||it(t,i.selectValueMap[e.value])),r=e.selected;n!==r&&ga(f(e),n)})};var a,s=NaN;t.$watch(function(){s!==o.$viewValue||ut(a,o.$viewValue)||(a=Gt(o.$viewValue),o.$render()),s=o.$viewValue}),o.$isEmpty=function(t){return!t||0===t.length}}},post:function(t,e,n,r){var i=r[1];if(!i)return;var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}}},ba=["$interpolate",function(t){return{restrict:"E",priority:100,compile:function(e,n){var r,i;return U(n.ngValue)||(U(n.value)?r=t(n.value,!0):(i=t(e.text(),!0))||n.$set("value",e.text())),function(t,e,n){var o="$selectController",a=e.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(t,e,n,r,i)}}}}],Sa=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){r&&(n.required=!0,r.$validators.required=function(t,e){return!n.required||!r.$isEmpty(e)},n.$observe("required",function(){r.$validate()}))}}},Ea=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var o,a=n.ngPattern||n.pattern;n.$observe("pattern",function(t){if(F(t)&&t.length>0&&(t=new RegExp("^"+t+"$")),t&&!t.test)throw i("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,t,wt(e));o=t||void 0,r.$validate()}),r.$validators.pattern=function(t,e){return r.$isEmpty(e)||D(o)||o.test(e)}}}}},xa=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=-1;n.$observe("maxlength",function(t){var e=T(t);i=P(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(t,e){return i<0||r.$isEmpty(e)||e.length<=i}}}}},Ca=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=0;n.$observe("minlength",function(t){i=T(t)||0,r.$validate()}),r.$validators.minlength=function(t,e){return r.$isEmpty(e)||e.length>=i}}}}};t.angular.bootstrap?t.console&&console.log("WARNING: Tried to load angular more than once."):(!function(){var e;if(!jt){var n=lt();(h=D(n)?t.jQuery:n?t[n]:void 0)&&h.fn.on?(f=h,O(h.fn,{scope:Oe.scope,isolateScope:Oe.isolateScope,controller:Oe.controller,injector:Oe.injector,inheritedData:Oe.inheritedData}),e=h.cleanData,h.cleanData=function(t){for(var n,r,i=0;null!=(r=t[i]);i++)(n=h._data(r,"events"))&&n.$destroy&&h(r).triggerHandler("$destroy");e(t)}):f=pe,w.element=f,jt=!0}}(),O(w,{errorHandlingConfig:n,bootstrap:Ot,copy:at,extend:O,merge:A,equals:ut,element:f,forEach:E,injector:Ze,noop:j,bind:pt,toJson:vt,fromJson:$t,identity:I,isUndefined:D,isDefined:U,isString:F,isFunction:G,isObject:H,isNumber:L,isElement:nt,isArray:z,version:Kt,isDate:B,lowercase:u,uppercase:c,callbacks:{$$counter:0},getTestability:Tt,reloadWithDebugInfo:At,$$minErr:i,$$csp:ct,$$encodeUriSegment:xt,$$encodeUriQuery:Ct,$$stringify:qt}),(p=function(t){var e=i("$injector"),n=i("ng");function r(t,e,n){return t[e]||(t[e]=n())}var o=r(t,"angular",Object);return o.$$minErr=o.$$minErr||i,r(o,"module",function(){var t={};return function(i,o,a){var s={};return function(t,e){if("hasOwnProperty"===t)throw n("badname","hasOwnProperty is not a valid {0} name",e)}(i,"module"),o&&t.hasOwnProperty(i)&&(t[i]=null),r(t,i,function(){if(!o)throw e("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",i);var t=[],r=[],u=[],c=f("$injector","invoke","push",r),l={_invokeQueue:t,_configBlocks:r,_runBlocks:u,info:function(t){if(U(t)){if(!H(t))throw n("aobj","Argument '{0}' must be an object","value");return s=t,this}return s},requires:o,name:i,provider:h("$provide","provider"),factory:h("$provide","factory"),service:h("$provide","service"),value:f("$provide","value"),constant:f("$provide","constant","unshift"),decorator:h("$provide","decorator",r),animation:h("$animateProvider","register"),filter:h("$filterProvider","register"),controller:h("$controllerProvider","register"),directive:h("$compileProvider","directive"),component:h("$compileProvider","component"),config:c,run:function(t){return u.push(t),this}};return a&&c(a),l;function f(e,n,r,i){return i||(i=t),function(){return i[r||"push"]([e,n,arguments]),l}}function h(e,n,r){return r||(r=t),function(t,o){return o&&G(o)&&(o.$$moduleName=i),r.push([e,n,arguments]),l}}})}})}(t))("ng",["ngLocale"],["$provide",function(t){t.provider({$$sanitizeUri:Lr}),t.provider("$compile",vn).directive({a:Mi,input:go,textarea:go,form:Li,script:$a,select:wa,option:ba,ngBind:bo,ngBindHtml:Eo,ngBindTemplate:So,ngClass:_o,ngClassEven:Ro,ngClassOdd:ko,ngCloak:Oo,ngController:Ao,ngForm:Bi,ngHide:ca,ngIf:Vo,ngInclude:jo,ngInit:Mo,ngNonBindable:ta,ngPluralize:ia,ngRepeat:oa,ngShow:ua,ngStyle:la,ngSwitch:fa,ngSwitchWhen:ha,ngSwitchDefault:pa,ngOptions:ra,ngTransclude:va,ngModel:Ko,ngList:No,ngChange:xo,pattern:Ea,ngPattern:Ea,required:Sa,ngRequired:Sa,minlength:Ca,ngMinlength:Ca,maxlength:xa,ngMaxlength:xa,ngValue:wo,ngModelOptions:Qo}).directive({ngInclude:Io}).directive(Ni).directive(To),t.provider({$anchorScroll:Ye,$animate:an,$animateCss:cn,$$animateJs:rn,$$animateQueue:on,$$AnimateRunner:un,$$animateAsyncRun:sn,$browser:ln,$cacheFactory:fn,$controller:xn,$document:Cn,$$isDocumentHidden:_n,$exceptionHandler:kn,$filter:ci,$$forceReflow:Rn,$interpolate:Gn,$interval:Jn,$http:Ln,$httpParamSerializer:Mn,$httpParamSerializerJQLike:Nn,$httpBackend:zn,$xhrFactory:Bn,$jsonpCallbacks:Kn,$location:pr,$log:dr,$parse:jr,$rootScope:Fr,$q:Ir,$$q:Mr,$sce:Zr,$sceDelegate:Kr,$sniffer:Yr,$templateCache:hn,$templateRequest:Xr,$$testability:ti,$timeout:ei,$window:ai,$$rAF:qr,$$jqLite:Me,$$Map:qe,$$cookieReader:ui})}]).info({angularVersion:"1.6.8"}),w.module("ngLocale",[],["$provide",function(t){var e="one",n="other";t.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a",short:"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(t,r){var i=0|t,o=function(t,e){var n,r,i=e;void 0===i&&(i=Math.min((n=t,-1==(r=(n+="").indexOf("."))?0:n.length-r-1),3));var o=Math.pow(10,i);return{v:i,f:(t*o|0)%o}}(t,r);return 1==i&&0==o.v?e:n}})}]),f(function(){Rt(t.document,Ot)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("angular")):"function"==typeof define&&define.amd?define(["exports","angular"],e):e(t["@uirouter/angularjs"]={},t.angular)}(this,function(t,e){"use strict";var n=angular,r=e&&e.module?e:n;function i(t){var e=[].slice.apply(arguments,[1]),n=t.length;return function e(r){return r.length>=n?t.apply(null,r):function(){return e(r.concat([].slice.apply(arguments)))}}(e)}function o(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}}function a(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o.apply(null,[].slice.call(arguments).reverse())}var s=function(t){return function(e){return e&&e[t]}},u=i(function(t,e,n){return n&&n[t]===e}),c=function(t){return a.apply(null,t.split(".").map(s))},l=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return!t.apply(null,e)}};function f(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return t.apply(null,n)&&e.apply(null,n)}}function h(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return t.apply(null,n)||e.apply(null,n)}}var p=function(t){return function(e){return e.reduce(function(e,n){return e&&!!t(n)},!0)}},d=function(t){return function(e){return e.reduce(function(e,n){return e||!!t(n)},!1)}},v=function(t){return function(e){return null!=e&&e.constructor===t||e instanceof t}},$=function(t){return function(e){return t===e}},m=function(t){return function(){return t}};function g(t,e){return function(n){return n[t].apply(n,e)}}function y(t){return function(e){for(var n=0;n<t.length;n++)if(t[n][0](e))return t[n][1](e)}}var w=function(){function t(t){this.text=t,this.glob=t.split(".");var e=this.text.split(".").map(function(t){return"**"===t?"(?:|(?:\\.[^.]*)*)":"*"===t?"\\.[^.]*":"\\."+t}).join("");this.regexp=new RegExp("^"+e+"$")}return t.is=function(t){return!!/[!,*]+/.exec(t)},t.fromString=function(e){return t.is(e)?new t(e):null},t.prototype.matches=function(t){return this.regexp.test("."+t)},t}(),b=function(){function t(e){return t.create(e||{})}return t.create=function(e){e=t.isStateClass(e)?new e:e;var n=Z(Z(e,t.prototype));return e.$$state=function(){return n},n.self=e,n.__stateObjectCache={nameGlob:w.fromString(n.name)},n},t.prototype.is=function(t){return this===t||this.self===t||this.fqn()===t},t.prototype.fqn=function(){if(!(this.parent&&this.parent instanceof this.constructor))return this.name;var t=this.parent.fqn();return t?t+"."+this.name:this.name},t.prototype.root=function(){return this.parent&&this.parent.root()||this},t.prototype.parameters=function(t){return((t=it(t,{inherit:!0,matchingKeys:null})).inherit&&this.parent&&this.parent.parameters()||[]).concat(dt(this.params)).filter(function(e){return!t.matchingKeys||t.matchingKeys.hasOwnProperty(e.id)})},t.prototype.parameter=function(t,e){return void 0===e&&(e={}),this.url&&this.url.parameter(t,e)||ft(dt(this.params),u("id",t))||e.inherit&&this.parent&&this.parent.parameter(t)},t.prototype.toString=function(){return this.fqn()},t.isStateClass=function(t){return R(t)&&!0===t.__uiRouterState},t.isState=function(t){return T(t.__stateObjectCache)},t}(),S=Object.prototype.toString,E=function(t){return function(e){return typeof e===t}},x=E("undefined"),C=l(x),_=function(t){return null===t},k=h(_,x),R=E("function"),O=E("number"),A=E("string"),T=function(t){return null!==t&&"object"==typeof t},P=Array.isArray,V=function(t){return"[object Date]"===S.call(t)},j=function(t){return"[object RegExp]"===S.call(t)},I=b.isState;function M(t){if(P(t)&&t.length){var e=t.slice(0,-1),n=t.slice(-1);return!(e.filter(l(A)).length||n.filter(l(R)).length)}return R(t)}var N=f(T,a(s("then"),R)),D=function(t){return function(){throw new Error(t+"(): No coreservices implementation for UI-Router is loaded.")}},U={$q:void 0,$injector:void 0},H="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||void 0,q=H.angular||{},F=q.fromJson||JSON.parse.bind(JSON),L=q.toJson||JSON.stringify.bind(JSON),B=q.forEach||function(t,e,n){if(P(t))return t.forEach(e,n);Object.keys(t).forEach(function(n){return e(t[n],n)})},z=Object.assign||Tt,W=q.equals||Pt;function G(t){return t}function J(){}function K(t,e,n,r,i){void 0===i&&(i=!1);var o=function(e){return t()[e].bind(n())};return(r=r||Object.keys(t())).reduce(function(t,n){var r;return t[n]=i?(r=n,function(){return e[r]=o(r),e[r].apply(null,arguments)}):o(n),t},e)}var Z=function(t,e){return z(Object.create(t),e)},Y=i(Q);function Q(t,e){return-1!==t.indexOf(e)}var X=i(tt);function tt(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),t}var et=i(nt);function nt(t,e){return t.push(e),e}var rt=function(t){return t.slice().forEach(function(e){"function"==typeof e&&e(),X(t,e)})};function it(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=e.concat({}).reverse(),i=z.apply(null,r);return z({},i,st(t||{},Object.keys(i)))}var ot=function(t,e){return z(t,e)};function at(t,e){var n=[];for(var r in t.path){if(t.path[r]!==e.path[r])break;n.push(t.path[r])}return n}function st(t,e){var n={};for(var r in t)-1!==e.indexOf(r)&&(n[r]=t[r]);return n}function ut(t,e){return Object.keys(t).filter(l(Y(e))).reduce(function(e,n){return e[n]=t[n],e},{})}function ct(t,e){return pt(t,s(e))}function lt(t,e){var n=P(t),r=n?[]:{},i=n?function(t){return r.push(t)}:function(t,e){return r[e]=t};return B(t,function(t,n){e(t,n)&&i(t,n)}),r}function ft(t,e){var n;return B(t,function(t,r){n||e(t,r)&&(n=t)}),n}var ht=pt;function pt(t,e,n){return n=n||(P(t)?[]:{}),B(t,function(t,r){return n[r]=e(t,r)}),n}var dt=function(t){return Object.keys(t).map(function(e){return t[e]})},vt=function(t,e){return t&&e},$t=function(t,e){return t||e},mt=function(t,e){return t.concat(e)},gt=function(t,e){return P(e)?t.concat(e.reduce(gt,[])):yt(t,e)};function yt(t,e){return t.push(e),t}var wt=function(t,e){return Y(t,e)?t:yt(t,e)},bt=function(t){return t.reduce(mt,[])},St=function(t){return t.reduce(gt,[])},Et=Ct,xt=Ct;function Ct(t,e){return void 0===e&&(e="assert failure"),function(n){var r=t(n);if(!r)throw new Error(R(e)?e(n):e);return r}}var _t=function(t){return Object.keys(t).map(function(e){return[e,t[e]]})};function kt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return[];for(var n=t.reduce(function(t,e){return Math.min(e.length,t)},9007199254740991),r=[],i=function(e){switch(t.length){case 1:r.push([t[0][e]]);break;case 2:r.push([t[0][e],t[1][e]]);break;case 3:r.push([t[0][e],t[1][e],t[2][e]]);break;case 4:r.push([t[0][e],t[1][e],t[2][e],t[3][e]]);break;default:r.push(t.map(function(t){return t[e]}))}},o=0;o<n;o++)i(o);return r}function Rt(t,e){var n,r;if(P(e)&&(n=e[0],r=e[1]),!A(n))throw new Error("invalid parameters to applyPairs");return t[n]=r,t}function Ot(t){return t.length&&t[t.length-1]||void 0}function At(t,e){return e&&Object.keys(e).forEach(function(t){return delete e[t]}),e||(e={}),z(e,t)}function Tt(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];if(n)for(var r=Object.keys(n),i=0;i<r.length;i++)t[r[i]]=n[r[i]]}return t}function Pt(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!=t&&e!=e)return!0;var n=typeof t;if(n!==typeof e||"object"!==n)return!1;var r,i,o=[t,e];if(p(P)(o))return i=e,(r=t).length===i.length&&kt(r,i).reduce(function(t,e){return t&&Pt(e[0],e[1])},!0);if(p(V)(o))return t.getTime()===e.getTime();if(p(j)(o))return t.toString()===e.toString();if(p(R)(o))return!0;if([R,P,V,j].map(d).reduce(function(t,e){return t||!!e(o)},!1))return!1;var a={};for(var s in t){if(!Pt(t[s],e[s]))return!1;a[s]=!0}for(var s in e)if(!a[s])return!1;return!0}var Vt,jt=function(t){return t.catch(function(t){return 0})&&t},It=function(t){return jt(U.$q.reject(t))},Mt=function(){function t(t,e){void 0===t&&(t=[]),void 0===e&&(e=null),this._items=t,this._limit=e,this._evictListeners=[],this.onEvict=et(this._evictListeners)}return t.prototype.enqueue=function(t){var e=this._items;return e.push(t),this._limit&&e.length>this._limit&&this.evict(),t},t.prototype.evict=function(){var t=this._items.shift();return this._evictListeners.forEach(function(e){return e(t)}),t},t.prototype.dequeue=function(){if(this.size())return this._items.splice(0,1)[0]},t.prototype.clear=function(){var t=this._items;return this._items=[],t},t.prototype.size=function(){return this._items.length},t.prototype.remove=function(t){var e=this._items.indexOf(t);return e>-1&&this._items.splice(e,1)[0]},t.prototype.peekTail=function(){return this._items[this._items.length-1]},t.prototype.peekHead=function(){if(this.size())return this._items[0]},t}();(Vt=t.RejectType||(t.RejectType={}))[Vt.SUPERSEDED=2]="SUPERSEDED",Vt[Vt.ABORTED=3]="ABORTED",Vt[Vt.INVALID=4]="INVALID",Vt[Vt.IGNORED=5]="IGNORED",Vt[Vt.ERROR=6]="ERROR";var Nt=0,Dt=function(){function e(t,e,n){this.$id=Nt++,this.type=t,this.message=e,this.detail=n}return e.isRejectionPromise=function(t){return t&&"function"==typeof t.then&&v(e)(t._transitionRejection)},e.superseded=function(n,r){var i=new e(t.RejectType.SUPERSEDED,"The transition has been superseded by a different transition",n);return r&&r.redirected&&(i.redirected=!0),i},e.redirected=function(t){return e.superseded(t,{redirected:!0})},e.invalid=function(n){return new e(t.RejectType.INVALID,"This transition is invalid",n)},e.ignored=function(n){return new e(t.RejectType.IGNORED,"The transition was ignored",n)},e.aborted=function(n){return new e(t.RejectType.ABORTED,"The transition has been aborted",n)},e.errored=function(n){return new e(t.RejectType.ERROR,"The transition errored",n)},e.normalize=function(t){return v(e)(t)?t:e.errored(t)},e.prototype.toString=function(){var t,e=(t=this.detail)&&t.toString!==Object.prototype.toString?t.toString():Oe(t);return"Transition Rejection($id: "+this.$id+" type: "+this.type+", message: "+this.message+", detail: "+e+")"},e.prototype.toPromise=function(){return z(It(this),{_transitionRejection:this})},e}();function Ut(t){if(!t)return"ui-view (defunct)";var e=t.creationContext?t.creationContext.name||"(root)":"(none)";return"[ui-view#"+t.id+" "+t.$type+":"+t.fqn+" ("+t.name+"@"+e+")]"}function Ht(e){return O(e)?t.Category[e]:t.Category[t.Category[e]]}var qt,Ft=Function.prototype.bind.call(console.log,console),Lt=R(console.table)?console.table.bind(console):Ft.bind(console);(qt=t.Category||(t.Category={}))[qt.RESOLVE=0]="RESOLVE",qt[qt.TRANSITION=1]="TRANSITION",qt[qt.HOOK=2]="HOOK",qt[qt.UIVIEW=3]="UIVIEW",qt[qt.VIEWCONFIG=4]="VIEWCONFIG";var Bt,zt,Wt=c("$id"),Gt=c("router.$id"),Jt=function(t){return"Transition #"+Wt(t)+"-"+Gt(t)},Kt=function(){function e(){this._enabled={},this.approximateDigests=0}return e.prototype._set=function(e,n){var r=this;n.length||(n=Object.keys(t.Category).map(function(t){return parseInt(t,10)}).filter(function(t){return!isNaN(t)}).map(function(e){return t.Category[e]})),n.map(Ht).forEach(function(t){return r._enabled[t]=e})},e.prototype.enable=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._set(!0,t)},e.prototype.disable=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._set(!1,t)},e.prototype.enabled=function(t){return!!this._enabled[Ht(t)]},e.prototype.traceTransitionStart=function(e){this.enabled(t.Category.TRANSITION)&&console.log(Jt(e)+": Started  -> "+Oe(e))},e.prototype.traceTransitionIgnored=function(e){this.enabled(t.Category.TRANSITION)&&console.log(Jt(e)+": Ignored  <> "+Oe(e))},e.prototype.traceHookInvocation=function(e,n,r){if(this.enabled(t.Category.HOOK)){var i=c("traceData.hookType")(r)||"internal",o=c("traceData.context.state.name")(r)||c("traceData.context")(r)||"unknown",a=Ce(e.registeredHook.callback);console.log(Jt(n)+":   Hook -> "+i+" context: "+o+", "+Se(200,a))}},e.prototype.traceHookResult=function(e,n,r){this.enabled(t.Category.HOOK)&&console.log(Jt(n)+":   <- Hook returned: "+Se(200,Oe(e)))},e.prototype.traceResolvePath=function(e,n,r){this.enabled(t.Category.RESOLVE)&&console.log(Jt(r)+":         Resolving "+e+" ("+n+")")},e.prototype.traceResolvableResolved=function(e,n){this.enabled(t.Category.RESOLVE)&&console.log(Jt(n)+":               <- Resolved  "+e+" to: "+Se(200,Oe(e.data)))},e.prototype.traceError=function(e,n){this.enabled(t.Category.TRANSITION)&&console.log(Jt(n)+": <- Rejected "+Oe(n)+", reason: "+e)},e.prototype.traceSuccess=function(e,n){this.enabled(t.Category.TRANSITION)&&console.log(Jt(n)+": <- Success  "+Oe(n)+", final state: "+e.name)},e.prototype.traceUIViewEvent=function(e,n,r){void 0===r&&(r=""),this.enabled(t.Category.UIVIEW)&&console.log("ui-view: "+Ee(30,e)+" "+Ut(n)+r)},e.prototype.traceUIViewConfigUpdated=function(e,n){this.enabled(t.Category.UIVIEW)&&this.traceUIViewEvent("Updating",e," with ViewConfig from context='"+n+"'")},e.prototype.traceUIViewFill=function(e,n){this.enabled(t.Category.UIVIEW)&&this.traceUIViewEvent("Fill",e," with: "+Se(200,n))},e.prototype.traceViewSync=function(e){if(this.enabled(t.Category.VIEWCONFIG)){var n="uiview component fqn",r=e.map(function(t){var e,r=t.uiView,i=t.viewConfig,o=r&&r.fqn,a=i&&i.viewDecl.$context.name+": ("+i.viewDecl.$name+")";return(e={})[n]=o,e["view config state (view name)"]=a,e}).sort(function(t,e){return(t[n]||"").localeCompare(e[n]||"")});Lt(r)}},e.prototype.traceViewServiceEvent=function(e,n){var r,i,o;this.enabled(t.Category.VIEWCONFIG)&&console.log("VIEWCONFIG: "+e+" "+(i=(r=n).viewDecl,o=i.$context.name||"(root)","[View#"+r.$id+" from '"+o+"' state]: target ui-view: '"+i.$uiViewName+"@"+i.$uiViewContextAnchor+"'"))},e.prototype.traceViewServiceUIViewEvent=function(e,n){this.enabled(t.Category.VIEWCONFIG)&&console.log("VIEWCONFIG: "+e+" "+Ut(n))},e}(),Zt=new Kt;(Bt=t.TransitionHookPhase||(t.TransitionHookPhase={}))[Bt.CREATE=0]="CREATE",Bt[Bt.BEFORE=1]="BEFORE",Bt[Bt.RUN=2]="RUN",Bt[Bt.SUCCESS=3]="SUCCESS",Bt[Bt.ERROR=4]="ERROR",(zt=t.TransitionHookScope||(t.TransitionHookScope={}))[zt.TRANSITION=0]="TRANSITION",zt[zt.STATE=1]="STATE";var Yt=function(){function t(t,e,n,r){this._stateRegistry=t,this._identifier=e,this._identifier=e,this._params=z({},n||{}),this._options=z({},r||{}),this._definition=t.matcher.find(e,this._options.relative)}return t.prototype.name=function(){return this._definition&&this._definition.name||this._identifier},t.prototype.identifier=function(){return this._identifier},t.prototype.params=function(){return this._params},t.prototype.$state=function(){return this._definition},t.prototype.state=function(){return this._definition&&this._definition.self},t.prototype.options=function(){return this._options},t.prototype.exists=function(){return!(!this._definition||!this._definition.self)},t.prototype.valid=function(){return!this.error()},t.prototype.error=function(){var t=this.options().relative;if(!this._definition&&t){var e=t.name?t.name:t;return"Could not resolve '"+this.name()+"' from state '"+e+"'"}return this._definition?this._definition.self?void 0:"State '"+this.name()+"' has an invalid definition":"No such state '"+this.name()+"'"},t.prototype.toString=function(){return"'"+this.name()+"'"+Oe(this.params())},t.prototype.withState=function(e){return new t(this._stateRegistry,e,this._params,this._options)},t.prototype.withParams=function(e,n){void 0===n&&(n=!1);var r=n?e:z({},this._params,e);return new t(this._stateRegistry,this._identifier,r,this._options)},t.prototype.withOptions=function(e,n){void 0===n&&(n=!1);var r=n?e:z({},this._options,e);return new t(this._stateRegistry,this._identifier,this._params,r)},t.isDef=function(t){return t&&t.state&&(A(t.state)||A(t.state.name))},t}(),Qt={current:J,transition:null,traceData:{},bind:null},Xt=function(){function e(e,n,r,i){var o=this;this.transition=e,this.stateContext=n,this.registeredHook=r,this.options=i,this.isSuperseded=function(){return o.type.hookPhase===t.TransitionHookPhase.RUN&&!o.options.transition.isActive()},this.options=it(i,Qt),this.type=r.eventType}return e.chain=function(t,e){return t.reduce(function(t,e){return t.then(function(){return e.invokeHook()})},e||U.$q.when())},e.invokeHooks=function(t,n){for(var r=0;r<t.length;r++){var i=t[r].invokeHook();if(N(i)){var o=t.slice(r+1);return e.chain(o,i).then(n)}}return n()},e.runAllHooks=function(t){t.forEach(function(t){return t.invokeHook()})},e.prototype.logError=function(t){this.transition.router.stateService.defaultErrorHandler()(t)},e.prototype.invokeHook=function(){var t=this,e=this.registeredHook;if(!e._deregistered){var n=this.getNotCurrentRejection();if(n)return n;var r=this.options;Zt.traceHookInvocation(this,this.transition,r);var i=function(n){return e.eventType.getErrorHandler(t)(n)},o=function(n){return e.eventType.getResultHandler(t)(n)};try{var a=e.callback.call(r.bind,t.transition,t.stateContext);return!this.type.synchronous&&N(a)?a.catch(function(t){return Dt.normalize(t).toPromise()}).then(o,i):o(a)}catch(t){return i(Dt.normalize(t))}finally{e.invokeLimit&&++e.invokeCount>=e.invokeLimit&&e.deregister()}}},e.prototype.handleHookResult=function(t){var e=this,n=this.getNotCurrentRejection();return n||(N(t)?t.then(function(t){return e.handleHookResult(t)}):(Zt.traceHookResult(t,this.transition,this.options),!1===t?Dt.aborted("Hook aborted transition").toPromise():v(Yt)(t)?Dt.redirected(t).toPromise():void 0))},e.prototype.getNotCurrentRejection=function(){var t=this.transition.router;return t._disposed?Dt.aborted("UIRouter instance #"+t.$id+" has been stopped (disposed)").toPromise():this.transition._aborted?Dt.aborted().toPromise():this.isSuperseded()?Dt.superseded(this.options.current()).toPromise():void 0},e.prototype.toString=function(){var t=this.options,e=this.registeredHook;return(c("traceData.hookType")(t)||"internal")+" context: "+(c("traceData.context.state.name")(t)||c("traceData.context")(t)||"unknown")+", "+Se(200,_e(e.callback))},e.HANDLE_RESULT=function(t){return function(e){return t.handleHookResult(e)}},e.LOG_REJECTED_RESULT=function(t){return function(e){N(e)&&e.catch(function(e){return t.logError(Dt.normalize(e))})}},e.LOG_ERROR=function(t){return function(e){return t.logError(e)}},e.REJECT_ERROR=function(t){return function(t){return It(t)}},e.THROW_ERROR=function(t){return function(t){throw t}},e}();function te(t,e){var n=A(e)?[e]:e;return!!(R(n)?n:function(t){for(var e=n,r=0;r<e.length;r++){var i=new w(e[r]);if(i&&i.matches(t.name)||!i&&e[r]===t.name)return!0}return!1})(t)}var ee=function(){function e(t,e,n,r,i,o){void 0===o&&(o={}),this.tranSvc=t,this.eventType=e,this.callback=n,this.matchCriteria=r,this.removeHookFromRegistry=i,this.invokeCount=0,this._deregistered=!1,this.priority=o.priority||0,this.bind=o.bind||null,this.invokeLimit=o.invokeLimit}return e.prototype._matchingNodes=function(t,e){if(!0===e)return t;var n=t.filter(function(t){return te(t.state,e)});return n.length?n:null},e.prototype._getDefaultMatchCriteria=function(){return ht(this.tranSvc._pluginapi._getPathTypes(),function(){return!0})},e.prototype._getMatchingNodes=function(e){var n=this,r=z(this._getDefaultMatchCriteria(),this.matchCriteria);return dt(this.tranSvc._pluginapi._getPathTypes()).reduce(function(i,o){var a=o.scope===t.TransitionHookScope.STATE,s=e[o.name]||[],u=a?s:[Ot(s)];return i[o.name]=n._matchingNodes(u,r[o.name]),i},{})},e.prototype.matches=function(t){var e=this._getMatchingNodes(t);return dt(e).every(G)?e:null},e.prototype.deregister=function(){this.removeHookFromRegistry(this),this._deregistered=!0},e}();function ne(t,e,n){var r=(t._registeredHooks=t._registeredHooks||{})[n.name]=[],i=X(r);function o(t,o,a){void 0===a&&(a={});var s=new ee(e,n,o,t,i,a);return r.push(s),s.deregister.bind(s)}return t[n.name]=o,o}var re=function(){function e(t){this.transition=t}return e.prototype.buildHooksForPhase=function(t){var e=this;return this.transition.router.transitionService._pluginapi._getEvents(t).map(function(t){return e.buildHooks(t)}).reduce(mt,[]).filter(G)},e.prototype.buildHooks=function(e){var n=this.transition,r=n.treeChanges(),i=this.getMatchingHooks(e,r);if(!i)return[];var o={transition:n,current:n.options().current};return i.map(function(i){return i.matches(r)[e.criteriaMatchPath.name].map(function(r){var a=z({bind:i.bind,traceData:{hookType:e.name,context:r}},o),s=e.criteriaMatchPath.scope===t.TransitionHookScope.STATE?r.state.self:null,u=new Xt(n,s,i,a);return{hook:i,node:r,transitionHook:u}})}).reduce(mt,[]).sort(function(t){void 0===t&&(t=!1);return function(e,n){var r=t?-1:1,i=(e.node.state.path.length-n.node.state.path.length)*r;return 0!==i?i:n.hook.priority-e.hook.priority}}(e.reverseSort)).map(function(t){return t.transitionHook})},e.prototype.getMatchingHooks=function(e,n){var r=e.hookPhase===t.TransitionHookPhase.CREATE,i=this.transition.router.transitionService;return(r?[i]:[this.transition,i]).map(function(t){return t.getHooks(e.name)}).filter(Et(P,"broken event named: "+e.name)).reduce(mt,[]).filter(function(t){return t.matches(n)})},e}();var ie=function(){function t(t){this.pattern=/.*/,this.inherit=!0,z(this,t)}return t.prototype.is=function(t,e){return!0},t.prototype.encode=function(t,e){return t},t.prototype.decode=function(t,e){return t},t.prototype.equals=function(t,e){return t==e},t.prototype.$subPattern=function(){var t=this.pattern.toString();return t.substr(1,t.length-2)},t.prototype.toString=function(){return"{ParamType:"+this.name+"}"},t.prototype.$normalize=function(t){return this.is(t)?t:this.decode(t)},t.prototype.$asArray=function(t,e){if(!t)return this;if("auto"===t&&!e)throw new Error("'auto' array mode is for query parameters only");return new function(t,e){var n=this;function r(t){return P(t)?t:C(t)?[t]:[]}function i(t,n){return function(i){if(P(i)&&0===i.length)return i;var o=r(i),a=pt(o,t);return!0===n?0===lt(a,function(t){return!t}).length:function(t){switch(t.length){case 0:return;case 1:return"auto"===e?t[0]:t;default:return t}}(a)}}function o(t){return function(e,n){var i=r(e),o=r(n);if(i.length!==o.length)return!1;for(var a=0;a<i.length;a++)if(!t(i[a],o[a]))return!1;return!0}}["encode","decode","equals","$normalize"].forEach(function(e){var r=t[e].bind(t),a="equals"===e?o:i;n[e]=a(r)}),z(this,{dynamic:t.dynamic,name:t.name,pattern:t.pattern,inherit:t.inherit,is:i(t.is.bind(t),!0),$arrayMode:e})}(this,t)},t}();var oe,ae=Object.prototype.hasOwnProperty,se=function(t){return 0===["value","type","squash","array","dynamic"].filter(ae.bind(t||{})).length};(oe=t.DefType||(t.DefType={}))[oe.PATH=0]="PATH",oe[oe.SEARCH=1]="SEARCH",oe[oe.CONFIG=2]="CONFIG";var ue=function(){function e(e,n,r,i,o){n=function(e,n,r,i,o){if(e.type&&n&&"string"!==n.name)throw new Error("Param '"+i+"' has two type configurations.");if(e.type&&n&&"string"===n.name&&o.type(e.type))return o.type(e.type);if(n)return n;if(!e.type){var a=r===t.DefType.CONFIG?"any":r===t.DefType.PATH?"path":r===t.DefType.SEARCH?"query":"string";return o.type(a)}return e.type instanceof ie?e.type:o.type(e.type)}(r=function(t){function e(){return t.value}return t=se(t)&&{value:t}||t,e.__cacheable=!0,z(t,{$$fn:M(t.value)?t.value:e})}(r),n,i,e,o.paramTypes);var a,u,c=(a={array:i===t.DefType.SEARCH&&"auto"},u=e.match(/\[\]$/)?{array:!0}:{},z(a,u,r).array);n=c?n.$asArray(c,i===t.DefType.SEARCH):n;var l=void 0!==r.value||i===t.DefType.SEARCH,f=C(r.dynamic)?!!r.dynamic:!!n.dynamic,h=C(r.raw)?!!r.raw:!!n.raw,p=function(t,e,n){var r=t.squash;if(!e||!1===r)return!1;if(!C(r)||null==r)return n;if(!0===r||A(r))return r;throw new Error("Invalid squash policy: '"+r+"'. Valid policies: false, true, or arbitrary string")}(r,l,o.defaultSquashPolicy()),d=function(t,e,n,r){var i=[{from:"",to:n||e?void 0:""},{from:null,to:n||e?void 0:""}],o=P(t.replace)?t.replace:[];A(r)&&o.push({from:r,to:void 0});var a=pt(o,s("from"));return lt(i,function(t){return-1===a.indexOf(t.from)}).concat(o)}(r,c,l,p),v=C(r.inherit)?!!r.inherit:!!n.inherit;z(this,{id:e,type:n,location:i,isOptional:l,dynamic:f,raw:h,squash:p,replace:d,inherit:v,array:c,config:r})}return e.values=function(t,e){void 0===e&&(e={});for(var n={},r=0,i=t;r<i.length;r++){var o=i[r];n[o.id]=o.value(e[o.id])}return n},e.changed=function(t,e,n){return void 0===e&&(e={}),void 0===n&&(n={}),t.filter(function(t){return!t.type.equals(e[t.id],n[t.id])})},e.equals=function(t,n,r){return void 0===n&&(n={}),void 0===r&&(r={}),0===e.changed(t,n,r).length},e.validates=function(t,e){return void 0===e&&(e={}),t.map(function(t){return t.validates(e[t.id])}).reduce(vt,!0)},e.prototype.isDefaultValue=function(t){return this.isOptional&&this.type.equals(this.value(),t)},e.prototype.value=function(t){var e=this;return t=function(t){for(var n=0,r=e.replace;n<r.length;n++){var i=r[n];if(i.from===t)return i.to}return t}(t),x(t)?function(){if(e._defaultValueCache)return e._defaultValueCache.defaultValue;if(!U.$injector)throw new Error("Injectable functions cannot be called at configuration time");var t=U.$injector.invoke(e.config.$$fn);if(null!==t&&void 0!==t&&!e.type.is(t))throw new Error("Default value ("+t+") for parameter '"+e.id+"' is not an instance of ParamType ("+e.type.name+")");return e.config.$$fn.__cacheable&&(e._defaultValueCache={defaultValue:t}),t}():this.type.$normalize(t)},e.prototype.isSearch=function(){return this.location===t.DefType.SEARCH},e.prototype.validates=function(t){if((x(t)||null===t)&&this.isOptional)return!0;var e=this.type.$normalize(t);if(!this.type.is(e))return!1;var n=this.type.encode(e);return!(A(n)&&!this.type.pattern.exec(n))},e.prototype.toString=function(){return"{Param:"+this.id+" "+this.type+" squash: '"+this.squash+"' optional: "+this.isOptional+"}"},e}(),ce=function(){function t(e){if(e instanceof t){var n=e;this.state=n.state,this.paramSchema=n.paramSchema.slice(),this.paramValues=z({},n.paramValues),this.resolvables=n.resolvables.slice(),this.views=n.views&&n.views.slice()}else{var r=e;this.state=r,this.paramSchema=r.parameters({inherit:!1}),this.paramValues={},this.resolvables=r.resolvables.map(function(t){return t.clone()})}}return t.prototype.clone=function(){return new t(this)},t.prototype.applyRawParams=function(t){return this.paramValues=this.paramSchema.reduce(function(e,n){return Rt(e,[(r=n).id,r.value(t[r.id])]);var r},{}),this},t.prototype.parameter=function(t){return ft(this.paramSchema,u("id",t))},t.prototype.equals=function(t,e){var n=this.diff(t,e);return n&&0===n.length},t.prototype.diff=function(t,e){if(this.state!==t.state)return!1;var n=e?e(this):this.paramSchema;return ue.changed(n,this.paramValues,t.paramValues)},t.clone=function(t){return t.clone()},t}(),le=function(){function t(){}return t.makeTargetState=function(t,e){var n=Ot(e).state;return new Yt(t,n,e.map(s("paramValues")).reduce(ot,{}),{})},t.buildPath=function(t){var e=t.params();return t.$state().path.map(function(t){return new ce(t).applyRawParams(e)})},t.buildToPath=function(e,n){var r=t.buildPath(n);return n.options().inherit?t.inheritParams(e,r,Object.keys(n.params())):r},t.applyViewConfigs=function(e,n,r){n.filter(function(t){return Y(r,t.state)}).forEach(function(r){var i=dt(r.state.views||{}),o=t.subPath(n,function(t){return t===r}),a=i.map(function(t){return e.createViewConfig(o,t)});r.views=a.reduce(mt,[])})},t.inheritParams=function(t,e,n){void 0===n&&(n=[]);var r=t.map(function(t){return t.paramSchema}).reduce(mt,[]).filter(function(t){return!t.inherit}).map(s("id"));return e.map(function(e){var i=z({},e&&e.paramValues),o=st(i,n);i=ut(i,n);var a,s,c,l=ut((a=t,s=e.state,c=ft(a,u("state",s)),z({},c&&c.paramValues)||{}),r),f=z(i,l,o);return new ce(e.state).applyRawParams(f)})},t.treeChanges=function(e,n,r){for(var i,o,a,s,u,c,l=Math.min(e.length,n.length),f=0;f<l&&e[f].state!==r&&(i=e[f],o=n[f],i.equals(o,t.nonDynamicParams));)f++;s=(a=e).slice(0,f),u=a.slice(f);var h=s.map(function(t,e){var r=t.clone();return r.paramValues=n[e].paramValues,r});return c=n.slice(f),{from:a,to:h.concat(c),retained:s,retainedWithToParams:h,exiting:u,entering:c}},t.matching=function(t,e,n){var r=!1;return kt(t,e).reduce(function(t,e){var i=e[0],o=e[1];return(r=r||!i.equals(o,n))?t:t.concat(i)},[])},t.equals=function(e,n,r){return e.length===n.length&&t.matching(e,n,r).length===e.length},t.subPath=function(t,e){var n=ft(t,e),r=t.indexOf(n);return-1===r?void 0:t.slice(0,r+1)},t.nonDynamicParams=function(t){return t.state.parameters({inherit:!1}).filter(function(t){return!t.dynamic})},t.paramValues=function(t){return t.reduce(function(t,e){return z(t,e.paramValues)},{})},t}(),fe={when:"LAZY",async:"WAIT"},he=function(){function t(e,n,r,i,o){if(this.resolved=!1,this.promise=void 0,e instanceof t)z(this,e);else if(R(n)){if(k(e))throw new Error("new Resolvable(): token argument is required");if(!R(n))throw new Error("new Resolvable(): resolveFn argument must be a function");this.token=e,this.policy=i,this.resolveFn=n,this.deps=r||[],this.data=o,this.resolved=void 0!==o,this.promise=this.resolved?U.$q.when(this.data):void 0}else if(T(e)&&e.token&&(e.hasOwnProperty("resolveFn")||e.hasOwnProperty("data"))){var a=e;return new t(a.token,a.resolveFn,a.deps,a.policy,a.data)}}return t.prototype.getPolicy=function(t){var e=this.policy||{},n=t&&t.resolvePolicy||{};return{when:e.when||n.when||fe.when,async:e.async||n.async||fe.async}},t.prototype.resolve=function(t,e){var n=this,r=U.$q,i=t.findNode(this),o=i&&i.state,a="RXWAIT"===this.getPolicy(o).async?function(t){var e=t.cache(1);return e.take(1).toPromise().then(function(){return e})}:G;return this.promise=r.when().then(function(){return r.all(t.getDependencies(n).map(function(n){return n.get(t,e)}))}).then(function(t){return n.resolveFn.apply(null,t)}).then(a).then(function(t){return n.data=t,n.resolved=!0,n.resolveFn=null,Zt.traceResolvableResolved(n,e),n.data})},t.prototype.get=function(t,e){return this.promise||this.resolve(t,e)},t.prototype.toString=function(){return"Resolvable(token: "+Oe(this.token)+", requires: ["+this.deps.map(Oe)+"])"},t.prototype.clone=function(){return new t(this)},t.fromData=function(e,n){return new t(e,function(){return n},null,null,n)},t}(),pe={when:{LAZY:"LAZY",EAGER:"EAGER"},async:{WAIT:"WAIT",NOWAIT:"NOWAIT",RXWAIT:"RXWAIT"}},de=pe.when,ve=[de.EAGER,de.LAZY],$e=[de.EAGER],me="Native Injector",ge=function(){function t(t){this._path=t}return t.prototype.getTokens=function(){return this._path.reduce(function(t,e){return t.concat(e.resolvables.map(function(t){return t.token}))},[]).reduce(wt,[])},t.prototype.getResolvable=function(t){return Ot(this._path.map(function(t){return t.resolvables}).reduce(mt,[]).filter(function(e){return e.token===t}))},t.prototype.getPolicy=function(t){var e=this.findNode(t);return t.getPolicy(e.state)},t.prototype.subContext=function(e){return new t(le.subPath(this._path,function(t){return t.state===e}))},t.prototype.addResolvables=function(t,e){var n=ft(this._path,u("state",e)),r=t.map(function(t){return t.token});n.resolvables=n.resolvables.filter(function(t){return-1===r.indexOf(t.token)}).concat(t)},t.prototype.resolvePath=function(t,e){var n=this;void 0===t&&(t="LAZY");var r=(Y(ve,t)?t:"LAZY")===pe.when.EAGER?$e:ve;Zt.traceResolvePath(this._path,t,e);var i=function(t,e){return function(r){return Y(t,n.getPolicy(r)[e])}},o=this._path.reduce(function(t,o){var a=o.resolvables.filter(i(r,"when")),s=a.filter(i(["NOWAIT"],"async")),u=a.filter(l(i(["NOWAIT"],"async"))),c=n.subContext(o.state),f=function(t){return t.get(c,e).then(function(e){return{token:t.token,value:e}})};return s.forEach(f),t.concat(u.map(f))},[]);return U.$q.all(o)},t.prototype.injector=function(){return this._injector||(this._injector=new ye(this))},t.prototype.findNode=function(t){return ft(this._path,function(e){return Y(e.resolvables,t)})},t.prototype.getDependencies=function(t){var e=this,n=this.findNode(t),r=(le.subPath(this._path,function(t){return t===n})||this._path).reduce(function(t,e){return t.concat(e.resolvables)},[]).filter(function(e){return e!==t});return t.deps.map(function(t){var n=r.filter(function(e){return e.token===t});if(n.length)return Ot(n);var i=e.injector().getNative(t);if(x(i))throw new Error("Could not find Dependency Injection token: "+Oe(t));return new he(t,function(){return i},[],i)})},t}(),ye=function(){function t(t){this.context=t,this.native=this.get(me)||U.$injector}return t.prototype.get=function(t){var e=this.context.getResolvable(t);if(e){if("NOWAIT"===this.context.getPolicy(e).async)return e.get(this.context);if(!e.resolved)throw new Error("Resolvable async .get() not complete:"+Oe(e.token));return e.data}return this.getNative(t)},t.prototype.getAsync=function(t){var e=this.context.getResolvable(t);return e?e.get(this.context):U.$q.when(this.native.get(t))},t.prototype.getNative=function(t){return this.native&&this.native.get(t)},t}(),we=s("self"),be=function(){function e(e,n,r){var i=this;if(this._deferred=U.$q.defer(),this.promise=this._deferred.promise,this._registeredHooks={},this._hookBuilder=new re(this),this.isActive=function(){return i.router.globals.transition===i},this.router=r,this._targetState=n,!n.valid())throw new Error(n.error());this._options=z({current:m(this)},n.options()),this.$id=r.transitionService._transitionCount++;var o=le.buildToPath(e,n);this._treeChanges=le.treeChanges(e,o,this._options.reloadState),this.createTransitionHookRegFns();var a=this._hookBuilder.buildHooksForPhase(t.TransitionHookPhase.CREATE);Xt.invokeHooks(a,function(){return null}),this.applyViewConfigs(r)}return e.prototype.onBefore=function(t,e,n){},e.prototype.onStart=function(t,e,n){},e.prototype.onExit=function(t,e,n){},e.prototype.onRetain=function(t,e,n){},e.prototype.onEnter=function(t,e,n){},e.prototype.onFinish=function(t,e,n){},e.prototype.onSuccess=function(t,e,n){},e.prototype.onError=function(t,e,n){},e.prototype.createTransitionHookRegFns=function(){var e=this;this.router.transitionService._pluginapi._getEvents().filter(function(e){return e.hookPhase!==t.TransitionHookPhase.CREATE}).forEach(function(t){return ne(e,e.router.transitionService,t)})},e.prototype.getHooks=function(t){return this._registeredHooks[t]},e.prototype.applyViewConfigs=function(t){var e=this._treeChanges.entering.map(function(t){return t.state});le.applyViewConfigs(t.transitionService.$view,this._treeChanges.to,e)},e.prototype.$from=function(){return Ot(this._treeChanges.from).state},e.prototype.$to=function(){return Ot(this._treeChanges.to).state},e.prototype.from=function(){return this.$from().self},e.prototype.to=function(){return this.$to().self},e.prototype.targetState=function(){return this._targetState},e.prototype.is=function(t){return t instanceof e?this.is({to:t.$to().name,from:t.$from().name}):!(t.to&&!te(this.$to(),t.to)||t.from&&!te(this.$from(),t.from))},e.prototype.params=function(t){return void 0===t&&(t="to"),Object.freeze(this._treeChanges[t].map(s("paramValues")).reduce(ot,{}))},e.prototype.injector=function(t,e){void 0===e&&(e="to");var n=this._treeChanges[e];return t&&(n=le.subPath(n,function(e){return e.state===t||e.state.name===t})),new ge(n).injector()},e.prototype.getResolveTokens=function(t){return void 0===t&&(t="to"),new ge(this._treeChanges[t]).getTokens()},e.prototype.addResolvable=function(t,e){void 0===e&&(e=""),t=v(he)(t)?t:new he(t);var n="string"==typeof e?e:e.name,r=this._treeChanges.to,i=ft(r,function(t){return t.state.name===n});new ge(r).addResolvables([t],i.state)},e.prototype.redirectedFrom=function(){return this._options.redirectedFrom||null},e.prototype.originalTransition=function(){var t=this.redirectedFrom();return t&&t.originalTransition()||this},e.prototype.options=function(){return this._options},e.prototype.entering=function(){return pt(this._treeChanges.entering,s("state")).map(we)},e.prototype.exiting=function(){return pt(this._treeChanges.exiting,s("state")).map(we).reverse()},e.prototype.retained=function(){return pt(this._treeChanges.retained,s("state")).map(we)},e.prototype.views=function(t,e){void 0===t&&(t="entering");var n=this._treeChanges[t];return(n=e?n.filter(u("state",e)):n).map(s("views")).filter(G).reduce(mt,[])},e.prototype.treeChanges=function(t){return t?this._treeChanges[t]:this._treeChanges},e.prototype.redirect=function(t){for(var e=1,n=this;null!=(n=n.redirectedFrom());)if(++e>20)throw new Error("Too many consecutive Transition redirects (20+)");var r={redirectedFrom:this,source:"redirect"};"url"===this.options().source&&!1!==t.options().location&&(r.location="replace");var i=z({},this.options(),t.options(),r);t=t.withOptions(i,!0);var o,a=this.router.transitionService.create(this._treeChanges.from,t),s=this._treeChanges.entering,u=a._treeChanges.entering;return le.matching(u,s,le.nonDynamicParams).filter(l((o=t.options().reloadState,function(t){return o&&t.state.includes[o.name]}))).forEach(function(t,e){t.resolvables=s[e].resolvables}),a},e.prototype._changedParams=function(){var t=this._treeChanges;if(!this._options.reload&&(!t.exiting.length&&!t.entering.length&&t.to.length===t.from.length&&!kt(t.to,t.from).map(function(t){return t[0].state!==t[1].state}).reduce($t,!1))){var e=t.to.map(function(t){return t.paramSchema}),n=[t.to,t.from].map(function(t){return t.map(function(t){return t.paramValues})});return kt(e,n[0],n[1]).map(function(t){var e=t[0],n=t[1],r=t[2];return ue.changed(e,n,r)}).reduce(mt,[])}},e.prototype.dynamic=function(){var t=this._changedParams();return!!t&&t.map(function(t){return t.dynamic}).reduce($t,!1)},e.prototype.ignored=function(){return!!this._ignoredReason()},e.prototype._ignoredReason=function(){var t=this.router.globals.transition,e=this._options.reloadState,n=function(t,n){if(t.length!==n.length)return!1;var r=le.matching(t,n);return t.length===r.filter(function(t){return!e||!t.state.includes[e.name]}).length},r=this.treeChanges(),i=t&&t.treeChanges();return i&&n(i.to,r.to)&&n(i.exiting,r.exiting)?"SameAsPending":0===r.exiting.length&&0===r.entering.length&&n(r.from,r.to)?"SameAsCurrent":void 0},e.prototype.run=function(){var e=this,n=Xt.runAllHooks,r=function(t){return e._hookBuilder.buildHooksForPhase(t)},i=r(t.TransitionHookPhase.BEFORE);return Xt.invokeHooks(i,function(){var t=e.router.globals;return t.lastStartedTransitionId=e.$id,t.transition=e,t.transitionHistory.enqueue(e),Zt.traceTransitionStart(e),U.$q.when(void 0)}).then(function(){var e=r(t.TransitionHookPhase.RUN);return Xt.invokeHooks(e,function(){return U.$q.when(void 0)})}).then(function(){Zt.traceSuccess(e.$to(),e),e.success=!0,e._deferred.resolve(e.to()),n(r(t.TransitionHookPhase.SUCCESS))},function(i){Zt.traceError(i,e),e.success=!1,e._deferred.reject(i),e._error=i,n(r(t.TransitionHookPhase.ERROR))}),this.promise},e.prototype.valid=function(){return!this.error()||void 0!==this.success},e.prototype.abort=function(){x(this.success)&&(this._aborted=!0)},e.prototype.error=function(){var t=this.$to();if(t.self.abstract)return"Cannot transition to abstract state '"+t.name+"'";var e=t.parameters(),n=this.params(),r=e.filter(function(t){return!t.validates(n[t.id])});return r.length?"Param values not valid for state '"+t.name+"'. Invalid params: [ "+r.map(function(t){return t.id}).join(", ")+" ]":!1===this.success?this._error:void 0},e.prototype.toString=function(){var t=this.from(),e=this.to(),n=function(t){return null!==t["#"]&&void 0!==t["#"]?t:ut(t,["#"])};return"Transition#"+this.$id+"( '"+(T(t)?t.name:t)+"'"+Oe(n(this._treeChanges.from.map(s("paramValues")).reduce(ot,{})))+" -> "+(this.valid()?"":"(X) ")+"'"+(T(e)?e.name:e)+"'"+Oe(n(this.params()))+" )"},e.diToken=e,e}();function Se(t,e){return e.length<=t?e:e.substr(0,t-3)+"..."}function Ee(t,e){for(;e.length<t;)e+=" ";return e}function xe(t){return t.replace(/^([A-Z])/,function(t){return t.toLowerCase()}).replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}function Ce(t){var e=_e(t),n=e.match(/^(function [^ ]+\([^)]*\))/),r=n?n[1]:e,i=t.name||"";return i&&r.match(/function \(/)?"function "+i+r.substr(9):r}function _e(t){var e=P(t)?t.slice(-1)[0]:t;return e&&e.toString()||"undefined"}var ke=null,Re=function(t){var e=Dt.isRejectionPromise;return(ke=ke||y([[l(C),m("undefined")],[_,m("null")],[N,m("[Promise]")],[e,function(t){return t._transitionRejection.toString()}],[v(Dt),g("toString")],[v(be),g("toString")],[v(he),g("toString")],[M,Ce],[m(!0),G]]))(t)};function Oe(t){var e=[];return JSON.stringify(t,function(t,n){return function(t){if(T(t)){if(-1!==e.indexOf(t))return"[circular ref]";e.push(t)}return Re(t)}(n)}).replace(/\\"/g,'"')}var Ae=function(t){return function(e){if(!e)return["",""];var n=e.indexOf(t);return-1===n?[e,""]:[e.substr(0,n),e.substr(n+1)]}},Te=new RegExp("^(?:[a-z]+:)?//[^/]+/"),Pe=function(t){return t.replace(/\/[^/]*$/,"")},Ve=Ae("#"),je=Ae("?"),Ie=Ae("="),Me=function(t){return t?t.replace(/^#/,""):""};function Ne(t){var e=new RegExp("("+t+")","g");return function(t){return t.split(e).filter(G)}}function De(t,e){return A(Ot(t))&&A(e)?t.slice(0,-1).concat(Ot(t)+e):yt(t,e)}var Ue,He=function(){function t(){this.enqueue=!0,this.typeQueue=[],this.defaultTypes=st(t.prototype,["hash","string","query","path","int","bool","date","json","any"]);this.types=Z(pt(this.defaultTypes,function(t,e){return new ie(z({name:e},t))}),{})}return t.prototype.dispose=function(){this.types={}},t.prototype.type=function(t,e,n){if(!C(e))return this.types[t];if(this.types.hasOwnProperty(t))throw new Error("A type named '"+t+"' has already been defined.");return this.types[t]=new ie(z({name:t},e)),n&&(this.typeQueue.push({name:t,def:n}),this.enqueue||this._flushTypeQueue()),this},t.prototype._flushTypeQueue=function(){for(;this.typeQueue.length;){var t=this.typeQueue.shift();if(t.pattern)throw new Error("You cannot override a type's .pattern at runtime.");z(this.types[t.name],U.$injector.invoke(t.def))}},t}();Ue=function(t){var e=function(t){return null!=t?t.toString():t},n={encode:e,decode:e,is:v(String),pattern:/.*/,equals:function(t,e){return t==e}};return z({},n,t)},z(He.prototype,{string:Ue({}),path:Ue({pattern:/[^/]*/}),query:Ue({}),hash:Ue({inherit:!1}),int:Ue({decode:function(t){return parseInt(t,10)},is:function(t){return!k(t)&&this.decode(t.toString())===t},pattern:/-?\d+/}),bool:Ue({encode:function(t){return t?1:0},decode:function(t){return 0!==parseInt(t,10)},is:v(Boolean),pattern:/0|1/}),date:Ue({encode:function(t){return this.is(t)?[t.getFullYear(),("0"+(t.getMonth()+1)).slice(-2),("0"+t.getDate()).slice(-2)].join("-"):void 0},decode:function(t){if(this.is(t))return t;var e=this.capture.exec(t);return e?new Date(e[1],e[2]-1,e[3]):void 0},is:function(t){return t instanceof Date&&!isNaN(t.valueOf())},equals:function(t,e){return["getFullYear","getMonth","getDate"].reduce(function(n,r){return n&&t[r]()===e[r]()},!0)},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/}),json:Ue({encode:L,decode:F,is:v(Object),equals:W,pattern:/[^/]*/}),any:Ue({encode:G,decode:G,is:function(){return!0},equals:W})});var qe=function(){function t(t){void 0===t&&(t={}),z(this,t)}return t.prototype.$inherit=function(t,e,n){var r,i=at(e,n),o={},a=[];for(var s in i)if(i[s]&&i[s].params&&(r=Object.keys(i[s].params)).length)for(var u in r)a.indexOf(r[u])>=0||(a.push(r[u]),o[r[u]]=this[r[u]]);return z({},o,t)},t}();function Fe(t){return t.name}function Le(t){return t.self.$$state=function(){return t},t.self}function Be(t){return t.parent&&t.parent.data&&(t.data=t.self.data=Z(t.parent.data,t.data)),t.data}var ze=function(t,e){return function(n){var r=n;r&&r.url&&r.name&&r.name.match(/\.\*\*$/)&&(r.url+="{remainder:any}");var i=function(t){if(!A(t))return!1;var e="^"===t.charAt(0);return{val:e?t.substring(1):t,root:e}}(r.url),o=n.parent,a=i?t.compile(i.val,{params:n.params||{},paramMap:function(t,e){return!1===r.reloadOnSearch&&e&&(t=z(t||{},{dynamic:!0})),t}}):r.url;if(!a)return null;if(!t.isMatcher(a))throw new Error("Invalid url '"+a+"' in state '"+n+"'");return i&&i.root?a:(o&&o.navigable||e()).url.append(a)}},We=function(t){return function(e){return!t(e)&&e.url?e:e.parent?e.parent.navigable:null}},Ge=function(t){return function(e){var n=e.url&&e.url.parameters({inherit:!1})||[],r=dt(ht(ut(e.params||{},n.map(s("id"))),function(e,n){return t.fromConfig(n,null,e)}));return n.concat(r).map(function(t){return[t.id,t]}).reduce(Rt,{})}};function Je(t){return t.parent?t.parent.path.concat(t):[t]}function Ke(t){var e=t.parent?z({},t.parent.includes):{};return e[t.name]=!0,e}function Ze(t){var e,n,r=function(t){return t.provide||t.token},i=y([[s("resolveFn"),function(t){return new he(r(t),t.resolveFn,t.deps,t.policy)}],[s("useFactory"),function(t){return new he(r(t),t.useFactory,t.deps||t.dependencies,t.policy)}],[s("useClass"),function(t){return new he(r(t),function(){return new t.useClass},[],t.policy)}],[s("useValue"),function(t){return new he(r(t),function(){return t.useValue},[],t.policy,t.useValue)}],[s("useExisting"),function(t){return new he(r(t),G,[t.useExisting],t.policy)}]]),o=y([[a(s("val"),A),function(t){return new he(t.token,G,[t.val],t.policy)}],[a(s("val"),P),function(t){return new he(t.token,Ot(t.val),t.val.slice(0,-1),t.policy)}],[a(s("val"),R),function(t){return new he(t.token,t.val,(e=t.val,n=U.$injector,e.$inject||n&&n.annotate(e,n.strictDi)||"deferred"),t.policy);var e,n}]]),u=y([[v(he),function(t){return t}],[function(t){return!(!t.token||!t.resolveFn)},i],[function(t){return!(!t.provide&&!t.token||!(t.useValue||t.useFactory||t.useExisting||t.useClass))},i],[function(t){return!!(t&&t.val&&(A(t.val)||P(t.val)||R(t.val)))},o],[m(!0),function(t){throw new Error("Invalid resolve value: "+Oe(t))}]]),c=t.resolve;return(P(c)?c:(e=c,n=t.resolvePolicy||{},Object.keys(e||{}).map(function(t){return{token:t,val:e[t],deps:void 0,policy:n[t]}}))).map(u)}var Ye=function(){function t(t,e){this.matcher=t;var n=this,r=function(){return t.find("")},i=function(t){return""===t.name};this.builders={name:[Fe],self:[Le],parent:[function(e){return i(e)?null:t.find(n.parentName(e))||r()}],data:[Be],url:[ze(e,r)],navigable:[We(i)],params:[Ge(e.paramFactory)],views:[],path:[Je],includes:[Ke],resolvables:[Ze]}}return t.prototype.builder=function(t,e){var n=this.builders,r=n[t]||[];return A(t)&&!C(e)?r.length>1?r:r[0]:A(t)&&R(e)?(n[t]=r,n[t].push(e),function(){return n[t].splice(n[t].indexOf(e,1))&&null}):void 0},t.prototype.build=function(t){var e=this.matcher,n=this.builders,r=this.parentName(t);if(r&&!e.find(r,void 0,!1))return null;for(var i in n)if(n.hasOwnProperty(i)){var o=n[i].reduce(function(t,e){return function(n){return e(n,t)}},J);t[i]=o(t)}return t},t.prototype.parentName=function(t){var e=t.name||"",n=e.split(".");if("**"===n.pop()&&n.pop(),n.length){if(t.parent)throw new Error("States that specify the 'parent:' property should not have a '.' in their name ("+e+")");return n.join(".")}return t.parent?A(t.parent)?t.parent:t.parent.name:""},t.prototype.name=function(t){var e=t.name;if(-1!==e.indexOf(".")||!t.parent)return e;var n=A(t.parent)?t.parent:t.parent.name;return n?n+"."+e:e},t}(),Qe=function(){function t(t){this._states=t}return t.prototype.isRelative=function(t){return 0===(t=t||"").indexOf(".")||0===t.indexOf("^")},t.prototype.find=function(t,e,n){if(void 0===n&&(n=!0),t||""===t){var r=A(t),i=r?t:t.name;this.isRelative(i)&&(i=this.resolvePath(i,e));var o=this._states[i];if(o&&(r||!(r||o!==t&&o.self!==t)))return o;if(r&&n){var a=dt(this._states).filter(function(t){return t.__stateObjectCache.nameGlob&&t.__stateObjectCache.nameGlob.matches(i)});return a.length>1&&console.log("stateMatcher.find: Found multiple matches for "+i+" using glob: ",a.map(function(t){return t.name})),a[0]}}},t.prototype.resolvePath=function(t,e){if(!e)throw new Error("No reference point given for path '"+t+"'");for(var n=this.find(e),r=t.split("."),i=r.length,o=0,a=n;o<i;o++)if(""!==r[o]||0!==o){if("^"!==r[o])break;if(!a.parent)throw new Error("Path '"+t+"' not valid for state '"+n.name+"'");a=a.parent}else a=n;var s=r.slice(o).join(".");return a.name+(a.name&&s?".":"")+s},t}(),Xe=function(){function t(t,e,n,r,i){this.$registry=t,this.$urlRouter=e,this.states=n,this.builder=r,this.listeners=i,this.queue=[],this.matcher=t.matcher}return t.prototype.dispose=function(){this.queue=[]},t.prototype.register=function(t){var e=this.queue,n=b.create(t),r=n.name;if(!A(r))throw new Error("State must have a valid name");if(this.states.hasOwnProperty(r)||Y(e.map(s("name")),r))throw new Error("State '"+r+"' is already defined");return e.push(n),this.flush(),n},t.prototype.flush=function(){for(var t=this,e=this.queue,n=this.states,r=this.builder,i=[],o=[],a={},s=function(e){return t.states.hasOwnProperty(e)&&t.states[e]};e.length>0;){var u=e.shift(),c=u.name,l=r.build(u),f=o.indexOf(u);if(l){var h=s(c);if(h&&h.name===c)throw new Error("State '"+c+"' is already defined");var p=s(c+".**");p&&this.$registry.deregister(p),n[c]=u,this.attachRoute(u),f>=0&&o.splice(f,1),i.push(u)}else{var d=a[c];if(a[c]=e.length,f>=0&&d===e.length)return e.push(u),n;f<0&&o.push(u),e.push(u)}}return i.length&&this.listeners.forEach(function(t){return t("registered",i.map(function(t){return t.self}))}),n},t.prototype.attachRoute=function(t){!t.abstract&&t.url&&this.$urlRouter.rule(this.$urlRouter.urlRuleFactory.create(t))},t}(),tn=function(){function t(t){this._router=t,this.states={},this.listeners=[],this.matcher=new Qe(this.states),this.builder=new Ye(this.matcher,t.urlMatcherFactory),this.stateQueue=new Xe(this,t.urlRouter,this.states,this.builder,this.listeners),this._registerRoot()}return t.prototype._registerRoot=function(){(this._root=this.stateQueue.register({name:"",url:"^",views:null,params:{"#":{value:null,type:"hash",dynamic:!0}},abstract:!0})).navigable=null},t.prototype.dispose=function(){var t=this;this.stateQueue.dispose(),this.listeners=[],this.get().forEach(function(e){return t.get(e)&&t.deregister(e)})},t.prototype.onStatesChanged=function(t){return this.listeners.push(t),function(){X(this.listeners)(t)}.bind(this)},t.prototype.root=function(){return this._root},t.prototype.register=function(t){return this.stateQueue.register(t)},t.prototype._deregisterTree=function(t){var e=this,n=this.get().map(function(t){return t.$$state()}),r=function(t){var e=n.filter(function(e){return-1!==t.indexOf(e.parent)});return 0===e.length?e:e.concat(r(e))},i=r([t]),o=[t].concat(i).reverse();return o.forEach(function(t){var n=e._router.urlRouter;n.rules().filter(u("state",t)).forEach(n.removeRule.bind(n)),delete e.states[t.name]}),o},t.prototype.deregister=function(t){var e=this.get(t);if(!e)throw new Error("Can't deregister state; not found: "+t);var n=this._deregisterTree(e.$$state());return this.listeners.forEach(function(t){return t("deregistered",n.map(function(t){return t.self}))}),n},t.prototype.get=function(t,e){var n=this;if(0===arguments.length)return Object.keys(this.states).map(function(t){return n.states[t].self});var r=this.matcher.find(t,e);return r&&r.self||null},t.prototype.decorator=function(t,e){return this.builder.builder(t,e)},t}();function en(t,e){var n=["",""],r=t.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!e)return r;switch(e.squash){case!1:n=["(",")"+(e.isOptional?"?":"")];break;case!0:r=r.replace(/\/$/,""),n=["(?:/(",")|/)?"];break;default:n=["("+e.squash+"|",")?"]}return r+n[0]+e.type.pattern.source+n[1]}var nn=Ne("/"),rn=function(){function e(t,n,r,i){var o=this;this.config=i,this._cache={path:[this]},this._children=[],this._params=[],this._segments=[],this._compiled=[],this.pattern=t,this.config=it(this.config,{params:{},strict:!0,caseInsensitive:!1,paramMap:G});for(var a,s,c,l=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,f=/([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,h=[],p=0,d=function(n){if(!e.nameValidator.test(n))throw new Error("Invalid parameter name '"+n+"' in pattern '"+t+"'");if(ft(o._params,u("id",n)))throw new Error("Duplicate parameter name '"+n+"' in pattern '"+t+"'")},v=function(e,r){var i,a=e[2]||e[3],s=r?e[4]:e[4]||("*"===e[1]?"[\\s\\S]*":null);return{id:a,regexp:s,cfg:o.config.params[a],segment:t.substring(p,e.index),type:s?n.type(s)||(i=s,Z(n.type(r?"query":"path"),{pattern:new RegExp(i,o.config.caseInsensitive?"i":void 0)})):null}};(a=l.exec(t))&&!((s=v(a,!1)).segment.indexOf("?")>=0);)d(s.id),this._params.push(r.fromPath(s.id,s.type,this.config.paramMap(s.cfg,!1))),this._segments.push(s.segment),h.push([s.segment,Ot(this._params)]),p=l.lastIndex;var $=(c=t.substring(p)).indexOf("?");if($>=0){var m=c.substring($);if(c=c.substring(0,$),m.length>0)for(p=0;a=f.exec(m);)d((s=v(a,!0)).id),this._params.push(r.fromSearch(s.id,s.type,this.config.paramMap(s.cfg,!0))),p=l.lastIndex}this._segments.push(c),this._compiled=h.map(function(t){return en.apply(null,t)}).concat(en(c))}return e.encodeDashes=function(t){return encodeURIComponent(t).replace(/-/g,function(t){return"%5C%"+t.charCodeAt(0).toString(16).toUpperCase()})},e.pathSegmentsAndParams=function(e){return kt(e._segments,e._params.filter(function(e){return e.location===t.DefType.PATH}).concat(void 0)).reduce(mt,[]).filter(function(t){return""!==t&&C(t)})},e.queryParams=function(e){return e._params.filter(function(e){return e.location===t.DefType.SEARCH})},e.compare=function(t,n){var r=function(t){return t._cache.weights=t._cache.weights||(n=t,n._cache.segments=n._cache.segments||n._cache.path.map(e.pathSegmentsAndParams).reduce(mt,[]).reduce(De,[]).map(function(t){return A(t)?nn(t):t}).reduce(mt,[])).map(function(t){return"/"===t?1:A(t)?2:t instanceof ue?3:void 0});var n},i=r(t),o=r(n);!function(t,e,n){for(var r=Math.max(t.length,e.length);t.length<r;)t.push(n);for(;e.length<r;)e.push(n)}(i,o,0);var a,s,u=kt(i,o);for(s=0;s<u.length;s++)if(0!==(a=u[s][0]-u[s][1]))return a;return 0},e.prototype.append=function(t){return this._children.push(t),t._cache={path:this._cache.path.concat(t),parent:this,pattern:null},t},e.prototype.isRoot=function(){return this._cache.path[0]===this},e.prototype.toString=function(){return this.pattern},e.prototype.exec=function(t,e,n,r){var i=this;void 0===e&&(e={}),void 0===r&&(r={});var o,a,u,c=(o=this._cache,a="pattern",u=function(){return new RegExp(["^",bt(i._cache.path.map(s("_compiled"))).join(""),!1===i.config.strict?"/?":"","$"].join(""),i.config.caseInsensitive?"i":void 0)},o[a]=o[a]||u()).exec(t);if(!c)return null;var l,f=this.parameters(),h=f.filter(function(t){return!t.isSearch()}),p=f.filter(function(t){return t.isSearch()}),d=this._cache.path.map(function(t){return t._segments.length-1}).reduce(function(t,e){return t+e}),v={};if(d!==c.length-1)throw new Error("Unbalanced capture group in route '"+this.pattern+"'");for(var $=0;$<d;$++){for(var m=h[$],g=c[$+1],y=0;y<m.replace.length;y++)m.replace[y].from===g&&(g=m.replace[y].to);g&&!0===m.array&&(void 0,g=pt(pt((l=function(t){return t.split("").reverse().join("")})(g).split(/-(?!\\)/),l),function(t){return t.replace(/\\-/g,"-")}).reverse()),C(g)&&(g=m.type.decode(g)),v[m.id]=m.value(g)}return p.forEach(function(t){for(var n=e[t.id],r=0;r<t.replace.length;r++)t.replace[r].from===n&&(n=t.replace[r].to);C(n)&&(n=t.type.decode(n)),v[t.id]=t.value(n)}),n&&(v["#"]=n),v},e.prototype.parameters=function(t){return void 0===t&&(t={}),!1===t.inherit?this._params:bt(this._cache.path.map(function(t){return t._params}))},e.prototype.parameter=function(t,e){var n=this;void 0===e&&(e={});var r=this._cache.parent;return function(){for(var e=0,r=n._params;e<r.length;e++){var i=r[e];if(i.id===t)return i}}()||!1!==e.inherit&&r&&r.parameter(t,e)||null},e.prototype.validates=function(t){return t=t||{},this.parameters().filter(function(e){return t.hasOwnProperty(e.id)}).map(function(e){return n=e,r=t[e.id],!n||n.validates(r);var n,r}).reduce(vt,!0)},e.prototype.format=function(t){void 0===t&&(t={});var n=this._cache.path,r=n.map(e.pathSegmentsAndParams).reduce(mt,[]).map(function(t){return A(t)?t:o(t)}),i=n.map(e.queryParams).reduce(mt,[]).map(o);if(r.concat(i).filter(function(t){return!1===t.isValid}).length)return null;function o(e){var n=e.value(t[e.id]),r=e.validates(n),i=e.isDefaultValue(n);return{param:e,value:n,isValid:r,isDefaultValue:i,squash:!!i&&e.squash,encoded:e.type.encode(n)}}var a=r.reduce(function(t,n){if(A(n))return t+n;var r=n.squash,i=n.encoded,o=n.param;return!0===r?t.match(/\/$/)?t.slice(0,-1):t:A(r)?t+r:!1!==r?t:null==i?t:P(i)?t+pt(i,e.encodeDashes).join("-"):o.raw?t+i:t+encodeURIComponent(i)},""),s=i.map(function(t){var e=t.param,n=t.squash,r=t.encoded,i=t.isDefaultValue;if(!(null==r||i&&!1!==n)&&(P(r)||(r=[r]),0!==r.length))return e.raw||(r=pt(r,encodeURIComponent)),r.map(function(t){return e.id+"="+t})}).filter(G).reduce(mt,[]).join("&");return a+(s?"?"+s:"")+(t["#"]?"#"+t["#"]:"")},e.nameValidator=/^\w+([-.]+\w+)*(?:\[\])?$/,e}(),on=function(){function e(){var e=this;this.paramTypes=new He,this._isCaseInsensitive=!1,this._isStrictMode=!0,this._defaultSquashPolicy=!1,this.paramFactory={fromConfig:function(n,r,i){return new ue(n,r,i,t.DefType.CONFIG,e)},fromPath:function(n,r,i){return new ue(n,r,i,t.DefType.PATH,e)},fromSearch:function(n,r,i){return new ue(n,r,i,t.DefType.SEARCH,e)}},this._getConfig=function(t){return z({strict:e._isStrictMode,caseInsensitive:e._isCaseInsensitive},t)},z(this,{UrlMatcher:rn,Param:ue})}return e.prototype.caseInsensitive=function(t){return this._isCaseInsensitive=C(t)?t:this._isCaseInsensitive},e.prototype.strictMode=function(t){return this._isStrictMode=C(t)?t:this._isStrictMode},e.prototype.defaultSquashPolicy=function(t){if(C(t)&&!0!==t&&!1!==t&&!A(t))throw new Error("Invalid squash policy: "+t+". Valid policies: false, true, arbitrary-string");return this._defaultSquashPolicy=C(t)?t:this._defaultSquashPolicy},e.prototype.compile=function(t,e){return new rn(t,this.paramTypes,this.paramFactory,this._getConfig(e))},e.prototype.isMatcher=function(t){if(!T(t))return!1;var e=!0;return B(rn.prototype,function(n,r){R(n)&&(e=e&&C(t[r])&&R(t[r]))}),e},e.prototype.type=function(t,e,n){var r=this.paramTypes.type(t,e,n);return C(e)?this:r},e.prototype.$get=function(){return this.paramTypes.enqueue=!1,this.paramTypes._flushTypeQueue(),this},e.prototype.dispose=function(){this.paramTypes.dispose()},e}(),an=function(){function t(t){this.router=t}return t.prototype.compile=function(t){return this.router.urlMatcherFactory.compile(t)},t.prototype.create=function(t,e){var n=this,r=y([[A,function(t){return r(n.compile(t))}],[v(rn),function(t){return n.fromUrlMatcher(t,e)}],[I,function(t){return n.fromState(t,n.router)}],[v(RegExp),function(t){return n.fromRegExp(t,e)}],[R,function(t){return new sn(t,e)}]]),i=r(t);if(!i)throw new Error("invalid 'what' in when()");return i},t.prototype.fromUrlMatcher=function(t,e){var n=e;A(e)&&(e=this.router.urlMatcherFactory.compile(e)),v(rn)(e)&&(n=function(t){return e.format(t)});var r={urlMatcher:t,matchPriority:function(e){var n=t.parameters().filter(function(t){return t.isOptional});return n.length?n.filter(function(t){return e[t.id]}).length/n.length:1e-6},type:"URLMATCHER"};return z(new sn(function(e){var n=t.exec(e.path,e.search,e.hash);return t.validates(n)&&n},n),r)},t.prototype.fromState=function(t,e){var n={state:t,type:"STATE"};return z(this.fromUrlMatcher(t.url,function(n){var r=e.stateService,i=e.globals;r.href(t,n)!==r.href(i.current,i.params)&&r.transitionTo(t,n,{inherit:!0,source:"url"})}),n)},t.prototype.fromRegExp=function(t,e){if(t.global||t.sticky)throw new Error("Rule RegExp must not be global or sticky");var n=A(e)?function(t){return e.replace(/\$(\$|\d{1,2})/,function(e,n){return t["$"===n?0:Number(n)]})}:e,r={regexp:t,type:"REGEXP"};return z(new sn(function(e){return t.exec(e.path)},n),r)},t.isUrlRule=function(t){return t&&["type","match","handler"].every(function(e){return C(t[e])})},t}(),sn=function(){return function(t,e){var n=this;this.match=t,this.type="RAW",this.matchPriority=function(t){return 0-n.$id},this.handler=e||G}}();var un;un=function(t,e){var n,r,i,o,a,s,u,c,l=(n=t,(e.priority||0)-(n.priority||0));return 0!==l?l:(r=e,0!==(l=((i={STATE:4,URLMATCHER:4,REGEXP:3,RAW:2,OTHER:1})[t.type]||0)-(i[r.type]||0))?l:(a=e,0!==(l=(o=t).urlMatcher&&a.urlMatcher?rn.compare(o.urlMatcher,a.urlMatcher):0)?l:(u=e,(c={STATE:!0,URLMATCHER:!0})[(s=t).type]&&c[u.type]?0:(s.$id||0)-(u.$id||0))))};var cn=function(){function t(e){this._sortFn=un,this._rules=[],this.interceptDeferred=!1,this._id=0,this._sorted=!1,this._router=e,this.urlRuleFactory=new an(e),K(m(t.prototype),this,m(this))}return t.prototype.dispose=function(){this.listen(!1),this._rules=[],delete this._otherwiseFn},t.prototype.sort=function(t){this._rules=this.stableSort(this._rules,this._sortFn=t||this._sortFn),this._sorted=!0},t.prototype.ensureSorted=function(){this._sorted||this.sort()},t.prototype.stableSort=function(t,e){var n=t.map(function(t,e){return{elem:t,idx:e}});return n.sort(function(t,n){var r=e(t.elem,n.elem);return 0===r?t.idx-n.idx:r}),n.map(function(t){return t.elem})},t.prototype.match=function(t){var e=this;this.ensureSorted(),t=z({path:"",search:{},hash:""},t);var n=this.rules();this._otherwiseFn&&n.push(this._otherwiseFn);for(var r,i,o,a=0;a<n.length&&(!r||0===this._sortFn(n[a],r.rule));a++){var s=(i=n[a],void 0,(o=i.match(t,e._router))&&{match:o,rule:i,weight:i.matchPriority(o)});r=!r||s&&s.weight>r.weight?s:r}return r},t.prototype.sync=function(t){if(!t||!t.defaultPrevented){var e=this._router,n=e.urlService,r=e.stateService,i={path:n.path(),search:n.search(),hash:n.hash()},o=this.match(i);y([[A,function(t){return n.url(t,!0)}],[Yt.isDef,function(t){return r.go(t.state,t.params,t.options)}],[v(Yt),function(t){return r.go(t.state(),t.params(),t.options())}]])(o&&o.rule.handler(o.match,i,e))}},t.prototype.listen=function(t){var e=this;if(!1!==t)return this._stopFn=this._stopFn||this._router.urlService.onChange(function(t){return e.sync(t)});this._stopFn&&this._stopFn(),delete this._stopFn},t.prototype.update=function(t){var e=this._router.locationService;t?this.location=e.url():e.url()!==this.location&&e.url(this.location,!0)},t.prototype.push=function(t,e,n){var r=n&&!!n.replace;this._router.urlService.url(t.format(e||{}),r)},t.prototype.href=function(t,e,n){var r=t.format(e);if(null==r)return null;n=n||{absolute:!1};var i,o,a,s,u=this._router.urlService.config,c=u.html5Mode();if(c||null===r||(r="#"+u.hashPrefix()+r),i=r,o=c,a=n.absolute,r="/"===(s=u.baseHref())?i:o?Pe(s)+i:a?s.slice(1)+i:i,!n.absolute||!r)return r;var l=!c&&r?"/":"",f=u.port(),h=80===f||443===f?"":":"+f;return[u.protocol(),"://",u.host(),h,l,r].join("")},t.prototype.rule=function(t){var e=this;if(!an.isUrlRule(t))throw new Error("invalid rule");return t.$id=this._id++,t.priority=t.priority||0,this._rules.push(t),this._sorted=!1,function(){return e.removeRule(t)}},t.prototype.removeRule=function(t){X(this._rules,t)},t.prototype.rules=function(){return this.ensureSorted(),this._rules.slice()},t.prototype.otherwise=function(t){var e=ln(t);this._otherwiseFn=this.urlRuleFactory.create(m(!0),e),this._sorted=!1},t.prototype.initial=function(t){var e=ln(t);this.rule(this.urlRuleFactory.create(function(t,e){return 0===e.globals.transitionHistory.size()&&!!/^\/?$/.exec(t.path)},e))},t.prototype.when=function(t,e,n){var r=this.urlRuleFactory.create(t,e);return C(n&&n.priority)&&(r.priority=n.priority),this.rule(r),r},t.prototype.deferIntercept=function(t){void 0===t&&(t=!0),this.interceptDeferred=t},t}();function ln(t){if(!(R(t)||A(t)||v(Yt)(t)||Yt.isDef(t)))throw new Error("'handler' must be a string, function, TargetState, or have a state: 'newtarget' property");return R(t)?t:m(t)}var fn=function(){function t(){var t=this;this._uiViews=[],this._viewConfigs=[],this._viewConfigFactories={},this._listeners=[],this._pluginapi={_rootViewContext:this._rootViewContext.bind(this),_viewConfigFactory:this._viewConfigFactory.bind(this),_registeredUIViews:function(){return t._uiViews},_activeViewConfigs:function(){return t._viewConfigs},_onSync:function(e){return t._listeners.push(e),function(){return X(t._listeners,e)}}}}return t.normalizeUIViewTarget=function(t,e){void 0===e&&(e="");var n=e.split("@"),r=n[0]||"$default",i=A(n[1])?n[1]:"^",o=/^(\^(?:\.\^)*)\.(.*$)/.exec(r);o&&(i=o[1],r=o[2]),"!"===r.charAt(0)&&(r=r.substr(1),i="");/^(\^(?:\.\^)*)$/.exec(i)?i=i.split(".").reduce(function(t,e){return t.parent},t).name:"."===i&&(i=t.name);return{uiViewName:r,uiViewContextAnchor:i}},t.prototype._rootViewContext=function(t){return this._rootContext=t||this._rootContext},t.prototype._viewConfigFactory=function(t,e){this._viewConfigFactories[t]=e},t.prototype.createViewConfig=function(t,e){var n=this._viewConfigFactories[e.$type];if(!n)throw new Error("ViewService: No view config factory registered for type "+e.$type);var r=n(t,e);return P(r)?r:[r]},t.prototype.deactivateViewConfig=function(t){Zt.traceViewServiceEvent("<- Removing",t),X(this._viewConfigs,t)},t.prototype.activateViewConfig=function(t){Zt.traceViewServiceEvent("-> Registering",t),this._viewConfigs.push(t)},t.prototype.sync=function(){var e=this,n=this._uiViews.map(function(t){return[t.fqn,t]}).reduce(Rt,{});function r(t){for(var e=t.viewDecl.$context,n=0;++n&&e.parent;)e=e.parent;return n}var o=i(function(t,e,n,r){return e*(t(n)-t(r))}),a=this._uiViews.sort(o(function(t){var e=function(t){return t&&t.parent?e(t.parent)+1:1};return 1e4*t.fqn.split(".").length+e(t.creationContext)},1)).map(function(i){var a=e._viewConfigs.filter(t.matches(n,i));return a.length>1&&a.sort(o(r,-1)),{uiView:i,viewConfig:a[0]}}),s=a.map(function(t){return t.viewConfig}),u=this._viewConfigs.filter(function(t){return!Y(s,t)}).map(function(t){return{uiView:void 0,viewConfig:t}});a.forEach(function(t){-1!==e._uiViews.indexOf(t.uiView)&&t.uiView.configUpdated(t.viewConfig)});var c=a.concat(u);this._listeners.forEach(function(t){return t(c)}),Zt.traceViewSync(c)},t.prototype.registerUIView=function(t){Zt.traceViewServiceUIViewEvent("-> Registering",t);var e=this._uiViews;return e.filter(function(e){return e.fqn===t.fqn&&e.$type===t.$type}).length&&Zt.traceViewServiceUIViewEvent("!!!! duplicate uiView named:",t),e.push(t),this.sync(),function(){-1!==e.indexOf(t)?(Zt.traceViewServiceUIViewEvent("<- Deregistering",t),X(e)(t)):Zt.traceViewServiceUIViewEvent("Tried removing non-registered uiView",t)}},t.prototype.available=function(){return this._uiViews.map(s("fqn"))},t.prototype.active=function(){return this._uiViews.filter(s("$config")).map(s("name"))},t.matches=function(t,e){return function(n){if(e.$type!==n.viewDecl.$type)return!1;var r=n.viewDecl,i=r.$uiViewName.split("."),o=e.fqn.split(".");if(!W(i,o.slice(0-i.length)))return!1;var a=1-i.length||void 0,s=o.slice(0,a).join("."),u=t[s].creationContext;return r.$uiViewContextAnchor===(u&&u.name)}},t}(),hn=function(){function t(){this.params=new qe,this.lastStartedTransitionId=-1,this.transitionHistory=new Mt([],1),this.successfulTransitions=new Mt([],1)}return t.prototype.dispose=function(){this.transitionHistory.clear(),this.successfulTransitions.clear(),this.transition=null},t}(),pn=function(t){return t.reduce(function(t,e){return t[e]=D(e),t},{dispose:J})},dn=["url","path","search","hash","onChange"],vn=["port","protocol","host","baseHref","html5Mode","hashPrefix"],$n=["type","caseInsensitive","strictMode","defaultSquashPolicy"],mn=["sort","when","initial","otherwise","rules","rule","removeRule"],gn=["deferIntercept","listen","sync","match"],yn=function(){function t(t,e){void 0===e&&(e=!0),this.router=t,this.rules={},this.config={};var n=function(){return t.locationService};K(n,this,n,dn,e);var r=function(){return t.locationConfig};K(r,this.config,r,vn,e);var i=function(){return t.urlMatcherFactory};K(i,this.config,i,$n);var o=function(){return t.urlRouter};K(o,this.rules,o,mn),K(o,this,o,gn)}return t.prototype.url=function(t,e,n){},t.prototype.path=function(){},t.prototype.search=function(){},t.prototype.hash=function(){},t.prototype.onChange=function(t){},t.prototype.parts=function(){return{path:this.path(),search:this.search(),hash:this.hash()}},t.prototype.dispose=function(){},t.prototype.sync=function(t){},t.prototype.listen=function(t){},t.prototype.deferIntercept=function(t){},t.prototype.match=function(t){},t.locationServiceStub=pn(dn),t.locationConfigStub=pn(vn),t}(),wn=0,bn=function(){function t(t,e){void 0===t&&(t=yn.locationServiceStub),void 0===e&&(e=yn.locationConfigStub),this.locationService=t,this.locationConfig=e,this.$id=wn++,this._disposed=!1,this._disposables=[],this.trace=Zt,this.viewService=new fn,this.globals=new hn,this.transitionService=new Ln(this),this.urlMatcherFactory=new on,this.urlRouter=new cn(this),this.stateRegistry=new tn(this),this.stateService=new Bn(this),this.urlService=new yn(this),this._plugins={},this.viewService._pluginapi._rootViewContext(this.stateRegistry.root()),this.globals.$current=this.stateRegistry.root(),this.globals.current=this.globals.$current.self,this.disposable(this.globals),this.disposable(this.stateService),this.disposable(this.stateRegistry),this.disposable(this.transitionService),this.disposable(this.urlRouter),this.disposable(t),this.disposable(e)}return t.prototype.disposable=function(t){this._disposables.push(t)},t.prototype.dispose=function(t){var e=this;t&&R(t.dispose)?t.dispose(this):(this._disposed=!0,this._disposables.slice().forEach(function(t){try{"function"==typeof t.dispose&&t.dispose(e),X(e._disposables,t)}catch(t){}}))},t.prototype.plugin=function(t,e){void 0===e&&(e={});var n=new t(this,e);if(!n.name)throw new Error("Required property `name` missing on plugin: "+n);return this._disposables.push(n),this._plugins[n.name]=n},t.prototype.getPlugin=function(t){return t?this._plugins[t]:dt(this._plugins)},t}();function Sn(t){t.addResolvable(he.fromData(bn,t.router),""),t.addResolvable(he.fromData(be,t),""),t.addResolvable(he.fromData("$transition$",t),""),t.addResolvable(he.fromData("$stateParams",t.params()),""),t.entering().forEach(function(e){t.addResolvable(he.fromData("$state$",e),e)})}var En=Y(["$transition$",be]),xn=function(t){var e=function(t){return En(t.token)?he.fromData(t.token,null):t},n=t.treeChanges();ht(n,function(t){return t.map(function(t){var n=t.resolvables.map(e);return z(t.clone(),{resolvables:n})})},n)},Cn=function(t){var e=t.to().redirectTo;if(e){var n=t.router.stateService;return R(e)?U.$q.when(e(t)).then(r):r(e)}function r(e){if(e)return e instanceof Yt?e:A(e)?n.target(e,t.params(),t.options()):e.state||e.params?n.target(e.state||t.to(),e.params||t.params(),t.options()):void 0}};function _n(t){return function(e,n){return(0,n.$$state()[t])(e,n)}}var kn=_n("onExit"),Rn=_n("onRetain"),On=_n("onEnter"),An=function(t){return new ge(t.treeChanges().to).resolvePath("EAGER",t).then(J)},Tn=function(t,e){return new ge(t.treeChanges().to).subContext(e.$$state()).resolvePath("LAZY",t).then(J)},Pn=function(t){return new ge(t.treeChanges().to).resolvePath("LAZY",t).then(J)},Vn=function(t){var e=U.$q,n=t.views("entering");if(n.length)return e.all(n.map(function(t){return e.when(t.load())})).then(J)},jn=function(t){var e=t.views("entering"),n=t.views("exiting");if(e.length||n.length){var r=t.router.viewService;n.forEach(function(t){return r.deactivateViewConfig(t)}),e.forEach(function(t){return r.activateViewConfig(t)}),r.sync()}},In=function(t){var e=t.router.globals,n=function(){e.transition===t&&(e.transition=null)};t.onSuccess({},function(){e.successfulTransitions.enqueue(t),e.$current=t.$to(),e.current=e.$current.self,At(t.params(),e.params)},{priority:1e4}),t.promise.then(n,n)},Mn=function(t){var e=t.options(),n=t.router.stateService,r=t.router.urlRouter;if("url"!==e.source&&e.location&&n.$current.navigable){var i={replace:"replace"===e.location};r.push(n.$current.navigable.url,n.params,i)}r.update(!0)},Nn=function(t){var e=t.router;var n=t.entering().filter(function(t){return!!t.$$state().lazyLoad}).map(function(e){return Dn(t,e)});return U.$q.all(n).then(function(){if("url"!==t.originalTransition().options().source){var n=t.targetState();return e.stateService.target(n.identifier(),n.params(),n.options())}var r=e.urlService,i=r.match(r.parts()),o=i&&i.rule;if(o&&"STATE"===o.type){var a=o.state,s=i.match;return e.stateService.target(a,s,t.options())}e.urlService.sync()})};function Dn(t,e){var n=e.$$state().lazyLoad,r=n._promise;if(!r){r=n._promise=U.$q.when(n(t,e)).then(function(e){e&&Array.isArray(e.states)&&e.states.forEach(function(e){return t.router.stateRegistry.register(e)});return e}).then(function(t){return delete e.lazyLoad,delete e.$$state().lazyLoad,delete n._promise,t},function(t){return delete n._promise,U.$q.reject(t)})}return r}var Un=function(){return function(t,e,n,r,i,o,a,s){void 0===i&&(i=!1),void 0===o&&(o=Xt.HANDLE_RESULT),void 0===a&&(a=Xt.REJECT_ERROR),void 0===s&&(s=!1),this.name=t,this.hookPhase=e,this.hookOrder=n,this.criteriaMatchPath=r,this.reverseSort=i,this.getResultHandler=o,this.getErrorHandler=a,this.synchronous=s}}();function Hn(t){var e=t._ignoredReason();if(e){Zt.traceTransitionIgnored(t);var n=t.router.globals.transition;return"SameAsCurrent"===e&&n&&n.abort(),Dt.ignored().toPromise()}}function qn(t){if(!t.valid())throw new Error(t.error())}var Fn={location:!0,relative:null,inherit:!1,notify:!0,reload:!1,custom:{},current:function(){return null},source:"unknown"},Ln=function(){function e(t){this._transitionCount=0,this._eventTypes=[],this._registeredHooks={},this._criteriaPaths={},this._router=t,this.$view=t.viewService,this._deregisterHookFns={},this._pluginapi=K(m(this),{},m(this),["_definePathType","_defineEvent","_getPathTypes","_getEvents","getHooks"]),this._defineCorePaths(),this._defineCoreEvents(),this._registerCoreTransitionHooks(),t.globals.successfulTransitions.onEvict(xn)}return e.prototype.onCreate=function(t,e,n){},e.prototype.onBefore=function(t,e,n){},e.prototype.onStart=function(t,e,n){},e.prototype.onExit=function(t,e,n){},e.prototype.onRetain=function(t,e,n){},e.prototype.onEnter=function(t,e,n){},e.prototype.onFinish=function(t,e,n){},e.prototype.onSuccess=function(t,e,n){},e.prototype.onError=function(t,e,n){},e.prototype.dispose=function(t){dt(this._registeredHooks).forEach(function(t){return t.forEach(function(e){e._deregistered=!0,X(t,e)})})},e.prototype.create=function(t,e){return new be(t,e,this._router)},e.prototype._defineCoreEvents=function(){var e=t.TransitionHookPhase,n=Xt,r=this._criteriaPaths;this._defineEvent("onCreate",e.CREATE,0,r.to,!1,n.LOG_REJECTED_RESULT,n.THROW_ERROR,!0),this._defineEvent("onBefore",e.BEFORE,0,r.to),this._defineEvent("onStart",e.RUN,0,r.to),this._defineEvent("onExit",e.RUN,100,r.exiting,!0),this._defineEvent("onRetain",e.RUN,200,r.retained),this._defineEvent("onEnter",e.RUN,300,r.entering),this._defineEvent("onFinish",e.RUN,400,r.to),this._defineEvent("onSuccess",e.SUCCESS,0,r.to,!1,n.LOG_REJECTED_RESULT,n.LOG_ERROR,!0),this._defineEvent("onError",e.ERROR,0,r.to,!1,n.LOG_REJECTED_RESULT,n.LOG_ERROR,!0)},e.prototype._defineCorePaths=function(){var e=t.TransitionHookScope.STATE,n=t.TransitionHookScope.TRANSITION;this._definePathType("to",n),this._definePathType("from",n),this._definePathType("exiting",e),this._definePathType("retained",e),this._definePathType("entering",e)},e.prototype._defineEvent=function(t,e,n,r,i,o,a,s){void 0===i&&(i=!1),void 0===o&&(o=Xt.HANDLE_RESULT),void 0===a&&(a=Xt.REJECT_ERROR),void 0===s&&(s=!1);var u=new Un(t,e,n,r,i,o,a,s);this._eventTypes.push(u),ne(this,this,u)},e.prototype._getEvents=function(t){return(C(t)?this._eventTypes.filter(function(e){return e.hookPhase===t}):this._eventTypes.slice()).sort(function(t,e){var n=t.hookPhase-e.hookPhase;return 0===n?t.hookOrder-e.hookOrder:n})},e.prototype._definePathType=function(t,e){this._criteriaPaths[t]={name:t,scope:e}},e.prototype._getPathTypes=function(){return this._criteriaPaths},e.prototype.getHooks=function(t){return this._registeredHooks[t]},e.prototype._registerCoreTransitionHooks=function(){var t=this._deregisterHookFns;t.addCoreResolves=this.onCreate({},Sn),t.ignored=this.onBefore({},Hn,{priority:-9999}),t.invalid=this.onBefore({},qn,{priority:-1e4}),t.redirectTo=this.onStart({to:function(t){return!!t.redirectTo}},Cn),t.onExit=this.onExit({exiting:function(t){return!!t.onExit}},kn),t.onRetain=this.onRetain({retained:function(t){return!!t.onRetain}},Rn),t.onEnter=this.onEnter({entering:function(t){return!!t.onEnter}},On),t.eagerResolve=this.onStart({},An,{priority:1e3}),t.lazyResolve=this.onEnter({entering:m(!0)},Tn,{priority:1e3}),t.resolveAll=this.onFinish({},Pn,{priority:1e3}),t.loadViews=this.onFinish({},Vn),t.activateViews=this.onSuccess({},jn),t.updateGlobals=this.onCreate({},In),t.updateUrl=this.onSuccess({},Mn,{priority:9999}),t.lazyLoad=this.onBefore({entering:function(t){return!!t.lazyLoad}},Nn)},e}(),Bn=function(){function e(t){this.router=t,this.invalidCallbacks=[],this._defaultErrorHandler=function(t){t instanceof Error&&t.stack?(console.error(t),console.error(t.stack)):t instanceof Dt?(console.error(t.toString()),t.detail&&t.detail.stack&&console.error(t.detail.stack)):console.error(t)};var n=Object.keys(e.prototype).filter(l(Y(["current","$current","params","transition"])));K(m(e.prototype),this,m(this),n)}return Object.defineProperty(e.prototype,"transition",{get:function(){return this.router.globals.transition},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"params",{get:function(){return this.router.globals.params},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"current",{get:function(){return this.router.globals.current},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"$current",{get:function(){return this.router.globals.$current},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this.defaultErrorHandler(J),this.invalidCallbacks=[]},e.prototype._handleInvalidTargetState=function(t,e){var n=this,r=le.makeTargetState(this.router.stateRegistry,t),i=this.router.globals,o=function(){return i.transitionHistory.peekTail()},a=o(),s=new Mt(this.invalidCallbacks.slice()),u=new ge(t).injector(),c=function(t){if(t instanceof Yt){var e=t;return(e=n.target(e.identifier(),e.params(),e.options())).valid()?o()!==a?Dt.superseded().toPromise():n.transitionTo(e.identifier(),e.params(),e.options()):Dt.invalid(e.error()).toPromise()}};return function t(){var n=s.dequeue();return void 0===n?Dt.invalid(e.error()).toPromise():U.$q.when(n(e,r,u)).then(c).then(function(e){return e||t()})}()},e.prototype.onInvalid=function(t){return this.invalidCallbacks.push(t),function(){X(this.invalidCallbacks)(t)}.bind(this)},e.prototype.reload=function(t){return this.transitionTo(this.current,this.params,{reload:!C(t)||t,inherit:!1,notify:!1})},e.prototype.go=function(t,e,n){var r=it(n,{relative:this.$current,inherit:!0},Fn);return this.transitionTo(t,e,r)},e.prototype.target=function(t,e,n){if(void 0===n&&(n={}),T(n.reload)&&!n.reload.name)throw new Error("Invalid reload state object");var r=this.router.stateRegistry;if(n.reloadState=!0===n.reload?r.root():r.matcher.find(n.reload,n.relative),n.reload&&!n.reloadState)throw new Error("No such reload state '"+(A(n.reload)?n.reload:n.reload.name)+"'");return new Yt(this.router.stateRegistry,t,e,n)},e.prototype.getCurrentPath=function(){var t=this,e=this.router.globals.successfulTransitions.peekTail();return e?e.treeChanges().to:[new ce(t.router.stateRegistry.root())]},e.prototype.transitionTo=function(e,n,r){var i=this;void 0===n&&(n={}),void 0===r&&(r={});var o=this.router,a=o.globals;r=it(r,Fn);r=z(r,{current:function(){return a.transition}});var s=this.target(e,n,r),u=this.getCurrentPath();if(!s.exists())return this._handleInvalidTargetState(u,s);if(!s.valid())return It(s.error());var c=function(e){return function(n){if(n instanceof Dt){var r=o.globals.lastStartedTransitionId===e.$id;if(n.type===t.RejectType.IGNORED)return r&&o.urlRouter.update(),U.$q.when(a.current);var s=n.detail;if(n.type===t.RejectType.SUPERSEDED&&n.redirected&&s instanceof Yt){var u=e.redirect(s);return u.run().catch(c(u))}if(n.type===t.RejectType.ABORTED)return r&&o.urlRouter.update(),U.$q.reject(n)}return i.defaultErrorHandler()(n),U.$q.reject(n)}},l=this.router.transitionService.create(u,s),f=l.run().catch(c(l));return jt(f),z(f,{transition:l})},e.prototype.is=function(t,e,n){n=it(n,{relative:this.$current});var r=this.router.stateRegistry.matcher.find(t,n.relative);if(C(r)){if(this.$current!==r)return!1;if(!e)return!0;var i=r.parameters({inherit:!0,matchingKeys:e});return ue.equals(i,ue.values(i,e),this.params)}},e.prototype.includes=function(t,e,n){n=it(n,{relative:this.$current});var r=A(t)&&w.fromString(t);if(r){if(!r.matches(this.$current.name))return!1;t=this.$current.name}var i=this.router.stateRegistry.matcher.find(t,n.relative),o=this.$current.includes;if(C(i)){if(!C(o[i.name]))return!1;if(!e)return!0;var a=i.parameters({inherit:!0,matchingKeys:e});return ue.equals(a,ue.values(a,e),this.params)}},e.prototype.href=function(t,e,n){n=it(n,{lossy:!0,inherit:!0,absolute:!1,relative:this.$current}),e=e||{};var r=this.router.stateRegistry.matcher.find(t,n.relative);if(!C(r))return null;n.inherit&&(e=this.params.$inherit(e,this.$current,r));var i=r&&n.lossy?r.navigable:r;return i&&void 0!==i.url&&null!==i.url?this.router.urlRouter.href(i.url,e,{absolute:n.absolute}):null},e.prototype.defaultErrorHandler=function(t){return this._defaultErrorHandler=t||this._defaultErrorHandler},e.prototype.get=function(t,e){var n=this.router.stateRegistry;return 0===arguments.length?n.get():n.get(t,e||this.$current)},e.prototype.lazyLoad=function(t,e){var n=this.get(t);if(!n||!n.lazyLoad)throw new Error("Can not lazy load "+t);var r=this.getCurrentPath(),i=le.makeTargetState(this.router.stateRegistry,r);return Dn(e=e||this.router.transitionService.create(r,i),n)},e}(),zn={when:function(t){return new Promise(function(e,n){return e(t)})},reject:function(t){return new Promise(function(e,n){n(t)})},defer:function(){var t={};return t.promise=new Promise(function(e,n){t.resolve=e,t.reject=n}),t},all:function(t){if(P(t))return Promise.all(t);if(T(t)){var e=Object.keys(t).map(function(e){return t[e].then(function(t){return{key:e,val:t}})});return zn.all(e).then(function(t){return t.reduce(function(t,e){return t[e.key]=e.val,t},{})})}}},Wn={},Gn=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Jn=/([^\s,]+)/g,Kn={get:function(t){return Wn[t]},has:function(t){return null!=Kn.get(t)},invoke:function(t,e,n){var r=z({},Wn,n||{}),i=Kn.annotate(t),o=Et(function(t){return r.hasOwnProperty(t)},function(t){return"DI can't find injectable: '"+t+"'"}),a=i.filter(o).map(function(t){return r[t]});return R(t)?t.apply(e,a):t.slice(-1)[0].apply(e,a)},annotate:function(t){if(!M(t))throw new Error("Not an injectable function: "+t);if(t&&t.$inject)return t.$inject;if(P(t))return t.slice(0,-1);var e=t.toString().replace(Gn,"");return e.slice(e.indexOf("(")+1,e.indexOf(")")).match(Jn)||[]}},Zn=function(t,e){var n=e[0],r=e[1];return t.hasOwnProperty(n)?P(t[n])?t[n].push(r):t[n]=[t[n],r]:t[n]=r,t},Yn=function(t){return t.split("&").filter(G).map(Ie).reduce(Zn,{})};function Qn(t){var e=function(t){return t||""},n=Ve(t).map(e),r=n[0],i=n[1],o=je(r).map(e);return{path:o[0],search:o[1],hash:i,url:t}}var Xn=function(t){var e=t.path(),n=t.search(),r=t.hash(),i=Object.keys(n).map(function(t){var e=n[t];return(P(e)?e:[e]).map(function(e){return t+"="+e})}).reduce(mt,[]).join("&");return e+(i?"?"+i:"")+(r?"#"+r:"")};function tr(t,e,n,r){return function(i){var o=i.locationService=new n(i),a=i.locationConfig=new r(i,e);return{name:t,service:o,configuration:a,dispose:function(t){t.dispose(o),t.dispose(a)}}}}var er,nr,rr,ir=function(){function t(t,e){var n=this;this.fireAfterUpdate=e,this._listeners=[],this._listener=function(t){return n._listeners.forEach(function(e){return e(t)})},this.hash=function(){return Qn(n._get()).hash},this.path=function(){return Qn(n._get()).path},this.search=function(){return Yn(Qn(n._get()).search)},this._location=H.location,this._history=H.history}return t.prototype.url=function(t,e){return void 0===e&&(e=!0),C(t)&&t!==this._get()&&(this._set(null,null,t,e),this.fireAfterUpdate&&this._listeners.forEach(function(e){return e({url:t})})),Xn(this)},t.prototype.onChange=function(t){var e=this;return this._listeners.push(t),function(){return X(e._listeners,t)}},t.prototype.dispose=function(t){rt(this._listeners)},t}(),or=(er=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}er(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),ar=function(t){function e(e){var n=t.call(this,e,!1)||this;return H.addEventListener("hashchange",n._listener,!1),n}return or(e,t),e.prototype._get=function(){return Me(this._location.hash)},e.prototype._set=function(t,e,n,r){this._location.hash=n},e.prototype.dispose=function(e){t.prototype.dispose.call(this,e),H.removeEventListener("hashchange",this._listener)},e}(ir),sr=(nr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}nr(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),ur=function(t){function e(e){return t.call(this,e,!0)||this}return sr(e,t),e.prototype._get=function(){return this._url},e.prototype._set=function(t,e,n,r){this._url=n},e}(ir),cr=(rr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}rr(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),lr=function(t){function e(e){var n=t.call(this,e,!0)||this;return n._config=e.urlService.config,H.addEventListener("popstate",n._listener,!1),n}return cr(e,t),e.prototype._getBasePrefix=function(){return Pe(this._config.baseHref())},e.prototype._get=function(){var t=this._location,e=t.pathname,n=t.hash,r=t.search;r=je(r)[1],n=Ve(n)[1];var i=this._getBasePrefix(),o=e===this._config.baseHref(),a=e.substr(0,i.length)===i;return(e=o?"/":a?e.substring(i.length):e)+(r?"?"+r:"")+(n?"#"+n:"")},e.prototype._set=function(t,e,n,r){var i=this._getBasePrefix(),o=n&&"/"!==n[0]?"/":"",a=""===n||"/"===n?this._config.baseHref():i+o+n;r?this._history.replaceState(t,e,a):this._history.pushState(t,e,a)},e.prototype.dispose=function(e){t.prototype.dispose.call(this,e),H.removeEventListener("popstate",this._listener)},e}(ir),fr=function(){return function(){var t=this;this.dispose=J,this._baseHref="",this._port=80,this._protocol="http",this._host="localhost",this._hashPrefix="",this.port=function(){return t._port},this.protocol=function(){return t._protocol},this.host=function(){return t._host},this.baseHref=function(){return t._baseHref},this.html5Mode=function(){return!1},this.hashPrefix=function(e){return C(e)?t._hashPrefix=e:t._hashPrefix}}}(),hr=function(){function t(t,e){void 0===e&&(e=!1),this._isHtml5=e,this._baseHref=void 0,this._hashPrefix=""}return t.prototype.port=function(){return location.port?Number(location.port):"https"===this.protocol()?443:80},t.prototype.protocol=function(){return location.protocol.replace(/:/g,"")},t.prototype.host=function(){return location.hostname},t.prototype.html5Mode=function(){return this._isHtml5},t.prototype.hashPrefix=function(t){return C(t)?this._hashPrefix=t:this._hashPrefix},t.prototype.baseHref=function(t){return C(t)?this._baseHref=t:C(this._baseHref)?this._baseHref:this.applyDocumentBaseHref()},t.prototype.applyDocumentBaseHref=function(){var t=document.getElementsByTagName("base")[0];return this._baseHref=t?t.href.substr(location.origin.length):location.pathname||"/"},t.prototype.dispose=function(){},t}();function pr(t){return U.$injector=Kn,U.$q=zn,{name:"vanilla.services",$q:zn,$injector:Kn,dispose:function(){return null}}}var dr=tr("vanilla.hashBangLocation",!1,ar,hr),vr=tr("vanilla.pushStateLocation",!0,lr,hr),$r=tr("vanilla.memoryLocation",!1,ur,fr),mr=function(){function t(){}return t.prototype.dispose=function(t){},t}(),gr=Object.freeze({root:H,fromJson:F,toJson:L,forEach:B,extend:z,equals:W,identity:G,noop:J,createProxyFunctions:K,inherit:Z,inArray:Y,_inArray:Q,removeFrom:X,_removeFrom:tt,pushTo:et,_pushTo:nt,deregAll:rt,defaults:it,mergeR:ot,ancestors:at,pick:st,omit:ut,pluck:ct,filter:lt,find:ft,mapObj:ht,map:pt,values:dt,allTrueR:vt,anyTrueR:$t,unnestR:mt,flattenR:gt,pushR:yt,uniqR:wt,unnest:bt,flatten:St,assertPredicate:Et,assertMap:xt,assertFn:Ct,pairs:_t,arrayTuples:kt,applyPairs:Rt,tail:Ot,copy:At,_extend:Tt,silenceUncaughtInPromise:jt,silentRejection:It,notImplemented:D,services:U,Glob:w,curry:i,compose:o,pipe:a,prop:s,propEq:u,parse:c,not:l,and:f,or:h,all:p,any:d,is:v,eq:$,val:m,invoke:g,pattern:y,isUndefined:x,isDefined:C,isNull:_,isNullOrUndefined:k,isFunction:R,isNumber:O,isString:A,isObject:T,isArray:P,isDate:V,isRegExp:j,isState:I,isInjectable:M,isPromise:N,Queue:Mt,maxLength:Se,padString:Ee,kebobString:xe,functionToString:Ce,fnToString:_e,stringify:Oe,beforeAfterSubstr:Ae,hostRegex:Te,stripLastPathElement:Pe,splitHash:Ve,splitQuery:je,splitEqual:Ie,trimHashVal:Me,splitOnDelim:Ne,joinNeighborsR:De,get Category(){return t.Category},Trace:Kt,trace:Zt,get DefType(){return t.DefType},Param:ue,ParamTypes:He,StateParams:qe,ParamType:ie,PathNode:ce,PathUtils:le,resolvePolicies:pe,defaultResolvePolicy:fe,Resolvable:he,NATIVE_INJECTOR_TOKEN:me,ResolveContext:ge,resolvablesBuilder:Ze,StateBuilder:Ye,StateObject:b,StateMatcher:Qe,StateQueueManager:Xe,StateRegistry:tn,StateService:Bn,TargetState:Yt,get TransitionHookPhase(){return t.TransitionHookPhase},get TransitionHookScope(){return t.TransitionHookScope},HookBuilder:re,matchState:te,RegisteredHook:ee,makeEvent:ne,get RejectType(){return t.RejectType},Rejection:Dt,Transition:be,TransitionHook:Xt,TransitionEventType:Un,defaultTransOpts:Fn,TransitionService:Ln,UrlMatcher:rn,UrlMatcherFactory:on,UrlRouter:cn,UrlRuleFactory:an,BaseUrlRule:sn,UrlService:yn,ViewService:fn,UIRouterGlobals:hn,UIRouter:bn,$q:zn,$injector:Kn,BaseLocationServices:ir,HashLocationService:ar,MemoryLocationService:ur,PushStateLocationService:lr,MemoryLocationConfig:fr,BrowserLocationConfig:hr,keyValsToObjectR:Zn,getParams:Yn,parseUrl:Qn,buildUrl:Xn,locationPluginFactory:tr,servicesPlugin:pr,hashLocationPlugin:dr,pushStateLocationPlugin:vr,memoryLocationPlugin:$r,UIRouterPluginBase:mr});function yr(){var t=null;return function(e,n){return t=t||U.$injector.get("$templateFactory"),[new Er(e,n,t)]}}var wr=function(t,e){return t.reduce(function(t,n){return t||C(e[n])},!1)};function br(t){if(!t.parent)return{};var e=["component","bindings","componentProvider"],n=["templateProvider","templateUrl","template","notify","async"].concat(["controller","controllerProvider","controllerAs","resolveAs"]),r=e.concat(n);if(C(t.views)&&wr(r,t))throw new Error("State '"+t.name+"' has a 'views' object. It cannot also have \"view properties\" at the state level.  Move the following properties into a view (in the 'views' object):  "+r.filter(function(e){return C(t[e])}).join(", "));var i={},o=t.views||{$default:st(t,r)};return B(o,function(r,o){if(o=o||"$default",A(r)&&(r={component:r}),r=z({},r),wr(e,r)&&wr(n,r))throw new Error("Cannot combine: "+e.join("|")+" with: "+n.join("|")+" in stateview: '"+o+"@"+t.name+"'");r.resolveAs=r.resolveAs||"$resolve",r.$type="ng1",r.$context=t,r.$name=o;var a=fn.normalizeUIViewTarget(r.$context,r.$name);r.$uiViewName=a.uiViewName,r.$uiViewContextAnchor=a.uiViewContextAnchor,i[o]=r}),i}var Sr=0,Er=function(){function t(t,e,n){var r=this;this.path=t,this.viewDecl=e,this.factory=n,this.$id=Sr++,this.loaded=!1,this.getTemplate=function(t,e){return r.component?r.factory.makeComponentTemplate(t,e,r.component,r.viewDecl.bindings):r.template}}return t.prototype.load=function(){var t=this,e=U.$q,n=new ge(this.path),r=this.path.reduce(function(t,e){return z(t,e.paramValues)},{}),i={template:e.when(this.factory.fromConfig(this.viewDecl,r,n)),controller:e.when(this.getController(n))};return e.all(i).then(function(e){return Zt.traceViewServiceEvent("Loaded",t),t.controller=e.controller,z(t,e.template),t})},t.prototype.getController=function(t){var e=this.viewDecl.controllerProvider;if(!M(e))return this.viewDecl.controller;var n=U.$injector.annotate(e),r=P(e)?Ot(e):e;return new he("",r,n).get(t)},t}(),xr=function(){function t(){var t=this;this._useHttp=r.version.minor<3,this.$get=["$http","$templateCache","$injector",function(e,n,r){return t.$templateRequest=r.has&&r.has("$templateRequest")&&r.get("$templateRequest"),t.$http=e,t.$templateCache=n,t}]}return t.prototype.useHttpService=function(t){this._useHttp=t},t.prototype.fromConfig=function(t,e,n){var r=function(t){return U.$q.when(t).then(function(t){return{template:t}})},i=function(t){return U.$q.when(t).then(function(t){return{component:t}})};return C(t.template)?r(this.fromString(t.template,e)):C(t.templateUrl)?r(this.fromUrl(t.templateUrl,e)):C(t.templateProvider)?r(this.fromProvider(t.templateProvider,e,n)):C(t.component)?i(t.component):C(t.componentProvider)?i(this.fromComponentProvider(t.componentProvider,e,n)):r("<ui-view></ui-view>")},t.prototype.fromString=function(t,e){return R(t)?t(e):t},t.prototype.fromUrl=function(t,e){return R(t)&&(t=t(e)),null==t?null:this._useHttp?this.$http.get(t,{cache:this.$templateCache,headers:{Accept:"text/html"}}).then(function(t){return t.data}):this.$templateRequest(t)},t.prototype.fromProvider=function(t,e,n){var r=U.$injector.annotate(t),i=P(t)?Ot(t):t;return new he("",i,r).get(n)},t.prototype.fromComponentProvider=function(t,e,n){var r=U.$injector.annotate(t),i=P(t)?Ot(t):t;return new he("",i,r).get(n)},t.prototype.makeComponentTemplate=function(t,e,n,i){i=i||{};var o=r.version.minor>=3?"::":"",a=function(t){var e=xe(t);return/^(x|data)-/.exec(e)?"x-"+e:e},s=function(t){var e=U.$injector.get(t+"Directive");if(!e||!e.length)throw new Error("Unable to find component named '"+t+"'");return e.map(Cr).reduce(mt,[])}(n).map(function(n){var r=n.name,s=n.type,u=a(r);if(t.attr(u)&&!i[r])return u+"='"+t.attr(u)+"'";var c=i[r]||r;if("@"===s)return u+"='{{"+o+"$resolve."+c+"}}'";if("&"===s){var l=e.getResolvable(c),f=l&&l.data,h=f&&U.$injector.annotate(f)||[];return u+"='$resolve."+c+(P(f)?"["+(f.length-1)+"]":"")+"("+h.join(",")+")'"}return u+"='"+o+"$resolve."+c+"'"}).join(" "),u=a(n);return"<"+u+" "+s+"></"+u+">"},t}();var Cr=function(t){return T(t.bindToController)?_r(t.bindToController):_r(t.scope)},_r=function(t){return Object.keys(t||{}).map(function(e){return[e,/^([=<@&])[?]?(.*)/.exec(t[e])]}).filter(function(t){return C(t)&&P(t[1])}).map(function(t){return{name:t[1][2]||t[0],type:t[1][1]}})},kr=function(){function t(e,n){this.stateRegistry=e,this.stateService=n,K(m(t.prototype),this,m(this))}return t.prototype.decorator=function(t,e){return this.stateRegistry.decorator(t,e)||this},t.prototype.state=function(t,e){return T(t)?e=t:e.name=t,this.stateRegistry.register(e),this},t.prototype.onInvalid=function(t){return this.stateService.onInvalid(t)},t}(),Rr=function(t){return function(e,n){var r=e[t],i="onExit"===t?"from":"to";return r?function(t,e){var n=new ge(t.treeChanges(i)).subContext(e.$$state()),o=z(zr(n),{$state$:e,$transition$:t});return U.$injector.invoke(r,this,o)}:void 0}},Or=function(){function t(t){this._urlListeners=[],this.$locationProvider=t;var e=m(t);K(e,this,e,["hashPrefix"])}return t.monkeyPatchPathParameterType=function(t){var e=t.urlMatcherFactory.type("path");e.encode=function(t){return null!=t?t.toString().replace(/(~|\/)/g,function(t){return{"~":"~~","/":"~2F"}[t]}):t},e.decode=function(t){return null!=t?t.toString().replace(/(~~|~2F)/g,function(t){return{"~~":"~","~2F":"/"}[t]}):t}},t.prototype.dispose=function(){},t.prototype.onChange=function(t){var e=this;return this._urlListeners.push(t),function(){return X(e._urlListeners)(t)}},t.prototype.html5Mode=function(){var t=this.$locationProvider.html5Mode();return(t=T(t)?t.enabled:t)&&this.$sniffer.history},t.prototype.url=function(t,e,n){return void 0===e&&(e=!1),C(t)&&this.$location.url(t),e&&this.$location.replace(),n&&this.$location.state(n),this.$location.url()},t.prototype._runtimeServices=function(t,e,n,r){var i=this;this.$location=e,this.$sniffer=n,t.$on("$locationChangeSuccess",function(t){return i._urlListeners.forEach(function(e){return e(t)})});var o=m(e),a=m(r);K(o,this,o,["replace","path","search","hash"]),K(o,this,o,["port","protocol","host"]),K(a,this,a,["baseHref"])},t}(),Ar=function(){function t(t){this._router=t,this._urlRouter=t.urlRouter}return t.injectableHandler=function(t,e){return function(n){return U.$injector.invoke(e,null,{$match:n,$stateParams:t.globals.params})}},t.prototype.$get=function(){var t=this._urlRouter;return t.update(!0),t.interceptDeferred||t.listen(),t},t.prototype.rule=function(t){var e=this;if(!R(t))throw new Error("'rule' must be a function");var n=new sn(function(){return t(U.$injector,e._router.locationService)},G);return this._urlRouter.rule(n),this},t.prototype.otherwise=function(t){var e=this,n=this._urlRouter;if(A(t))n.otherwise(t);else{if(!R(t))throw new Error("'rule' must be a string or function");n.otherwise(function(){return t(U.$injector,e._router.locationService)})}return this},t.prototype.when=function(e,n){return(P(n)||R(n))&&(n=t.injectableHandler(this._router,n)),this._urlRouter.when(e,n),this},t.prototype.deferIntercept=function(t){this._urlRouter.deferIntercept(t)},t}();r.module("ui.router.angular1",[]);var Tr=r.module("ui.router.init",[]),Pr=r.module("ui.router.util",["ng","ui.router.init"]),Vr=r.module("ui.router.router",["ui.router.util"]),jr=r.module("ui.router.state",["ui.router.router","ui.router.util","ui.router.angular1"]),Ir=r.module("ui.router",["ui.router.init","ui.router.state","ui.router.angular1"]),Mr=(r.module("ui.router.compat",["ui.router"]),null);function Nr(t){(Mr=this.router=new bn).stateProvider=new kr(Mr.stateRegistry,Mr.stateService),Mr.stateRegistry.decorator("views",br),Mr.stateRegistry.decorator("onExit",Rr("onExit")),Mr.stateRegistry.decorator("onRetain",Rr("onRetain")),Mr.stateRegistry.decorator("onEnter",Rr("onEnter")),Mr.viewService._pluginapi._viewConfigFactory("ng1",yr());var e=Mr.locationService=Mr.locationConfig=new Or(t);function n(t,n,r,i,o,a){return e._runtimeServices(i,t,r,n),delete Mr.router,delete Mr.$get,Mr}return Or.monkeyPatchPathParameterType(Mr),Mr.router=Mr,Mr.$get=n,n.$inject=["$location","$browser","$sniffer","$rootScope","$http","$templateCache"],Mr}Nr.$inject=["$locationProvider"];var Dr=function(t){return["$uiRouterProvider",function(e){var n=e.router[t];return n.$get=function(){return n},n}]};function Ur(t,e,n){U.$injector=t,U.$q=e,n.stateRegistry.get().map(function(t){return t.$$state().resolvables}).reduce(mt,[]).filter(function(t){return"deferred"===t.deps}).forEach(function(e){return e.deps=t.annotate(e.resolveFn,t.strictDi)})}Ur.$inject=["$injector","$q","$uiRouter"];function Hr(t){t.$watch(function(){Zt.approximateDigests++})}Hr.$inject=["$rootScope"],Tr.provider("$uiRouter",Nr),Vr.provider("$urlRouter",["$uiRouterProvider",function(t){return t.urlRouterProvider=new Ar(t)}]),Pr.provider("$urlService",Dr("urlService")),Pr.provider("$urlMatcherFactory",["$uiRouterProvider",function(){return Mr.urlMatcherFactory}]),Pr.provider("$templateFactory",function(){return new xr}),jr.provider("$stateRegistry",Dr("stateRegistry")),jr.provider("$uiRouterGlobals",Dr("globals")),jr.provider("$transitions",Dr("transitionService")),jr.provider("$state",["$uiRouterProvider",function(){return z(Mr.stateProvider,{$get:function(){return Mr.stateService}})}]),jr.factory("$stateParams",["$uiRouter",function(t){return t.globals.params}]),Ir.factory("$view",function(){return Mr.viewService}),Ir.service("$trace",function(){return Zt}),Ir.run(Hr),Pr.run(["$urlMatcherFactory",function(t){}]),jr.run(["$state",function(t){}]),Vr.run(["$urlRouter",function(t){}]),Tr.run(Ur);var qr,Fr,Lr,Br,zr=function(t){return t.getTokens().filter(A).map(function(e){var n=t.getResolvable(e);return[e,"NOWAIT"===t.getPolicy(n).async?n.promise:n.data]}).reduce(Rt,{})};function Wr(t){var e,n=t.match(/^\s*({[^}]*})\s*$/);if(n&&(t="("+n[1]+")"),!(e=t.replace(/\n/g," ").match(/^\s*([^(]*?)\s*(\((.*)\))?\s*$/))||4!==e.length)throw new Error("Invalid state ref '"+t+"'");return{state:e[1]||null,paramExpr:e[3]||null}}function Gr(t){var e=t.parent().inheritedData("$uiView"),n=c("$cfg.path")(e);return n?Ot(n).state.name:void 0}function Jr(t,e,n){var r,i=n.uiState||t.current.name,o=z((r=t,{relative:Gr(e)||r.$current,inherit:!0,source:"sref"}),n.uiStateOpts||{}),a=t.href(i,n.uiStateParams,o);return{uiState:i,uiStateParams:n.uiStateParams,uiStateOpts:o,href:a}}function Kr(t){var e="[object SVGAnimatedString]"===Object.prototype.toString.call(t.prop("href")),n="FORM"===t[0].nodeName;return{attr:n?"action":e?"xlink:href":"href",isAnchor:"A"===t.prop("tagName").toUpperCase(),clickable:!n}}function Zr(t,e,n,r,i){return function(o){var a=o.which||o.button,s=i();if(!(a>1||o.ctrlKey||o.metaKey||o.shiftKey||t.attr("target"))){var u=n(function(){e.go(s.uiState,s.uiStateParams,s.uiStateOpts)});o.preventDefault();var c=r.isAnchor&&!s.href?1:0;o.preventDefault=function(){c--<=0&&n.cancel(u)}}}}function Yr(t,e,n,r){var i;r&&(i=r.events),P(i)||(i=["click"]);for(var o=t.on?"on":"bind",a=0,s=i;a<s.length;a++){var u=s[a];t[o](u,n)}e.$on("$destroy",function(){for(var e=t.off?"off":"unbind",r=0,o=i;r<o.length;r++){var a=o[r];t[e](a,n)}})}function Qr(t){var e=function(e,n,r){return t.is(e,n,r)};return e.$stateful=!0,e}function Xr(t){var e=function(e,n,r){return t.includes(e,n,r)};return e.$stateful=!0,e}function ti(t,e,n,i,o,a){var s=c("viewDecl.controllerAs"),u=c("viewDecl.resolveAs");return{restrict:"ECA",priority:-400,compile:function(i){var a=i.html();return i.empty(),function(i,c){var l=c.data("$uiView");if(!l)return c.html(a),void t(c.contents())(i);var f=l.$cfg||{viewDecl:{},getTemplate:J},h=f.path&&new ge(f.path);c.html(f.getTemplate(c,h)||a),Zt.traceUIViewFill(l.$uiView,c.html());var p=t(c.contents()),d=f.controller,v=s(f),$=u(f),m=h&&zr(h);if(i[$]=m,d){var g=e(d,z({},m,{$scope:i,$element:c}));v&&(i[v]=g,i[v][$]=m),c.data("$ngControllerController",g),c.children().data("$ngControllerController",g),ri(o,n,g,i,f)}if(A(f.viewDecl.component))var y=f.viewDecl.component,w=xe(y),b=new RegExp("^(x-|data-)?"+w+"$","i"),S=i.$watch(function(){var t=[].slice.call(c[0].children).filter(function(t){return t&&t.tagName&&b.exec(t.tagName)});return t&&r.element(t).data("$"+y+"Controller")},function(t){t&&(ri(o,n,t,i,f),S())});p(i)}}}}qr=["$uiRouter","$timeout",function(t,e){var n=t.stateService;return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(r,i,o,a){var s,u=Kr(i),c=a[1]||a[0],l=null,f={},h=function(){return Jr(n,i,f)},p=Wr(o.uiSref);function d(){var t=h();l&&l(),c&&(l=c.$$addStateInfo(t.uiState,t.uiStateParams)),null!=t.href&&o.$set(u.attr,t.href)}f.uiState=p.state,f.uiStateOpts=o.uiSrefOpts?r.$eval(o.uiSrefOpts):{},p.paramExpr&&(r.$watch(p.paramExpr,function(t){f.uiStateParams=z({},t),d()},!0),f.uiStateParams=z({},r.$eval(p.paramExpr))),d(),r.$on("$destroy",t.stateRegistry.onStatesChanged(d)),r.$on("$destroy",t.transitionService.onSuccess({},d)),u.clickable&&(s=Zr(i,n,e,u,h),Yr(i,r,s,f.uiStateOpts))}}}],Fr=["$uiRouter","$timeout",function(t,e){var n=t.stateService;return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(r,i,o,a){var s,u=Kr(i),c=a[1]||a[0],l=null,f={},h=function(){return Jr(n,i,f)},p=["uiState","uiStateParams","uiStateOpts"],d=p.reduce(function(t,e){return t[e]=J,t},{});function v(){var t=h();l&&l(),c&&(l=c.$$addStateInfo(t.uiState,t.uiStateParams)),null!=t.href&&o.$set(u.attr,t.href)}p.forEach(function(t){f[t]=o[t]?r.$eval(o[t]):null,o.$observe(t,function(e){d[t](),d[t]=r.$watch(e,function(e){f[t]=e,v()},!0)})}),v(),r.$on("$destroy",t.stateRegistry.onStatesChanged(v)),r.$on("$destroy",t.transitionService.onSuccess({},v)),u.clickable&&(s=Zr(i,n,e,u,h),Yr(i,r,s,f.uiStateOpts))}}}],Lr=["$state","$stateParams","$interpolate","$uiRouter",function(t,e,n,r){return{restrict:"A",controller:["$scope","$element","$attrs",function(e,i,o){var a,s,u,c,l,f=[];a=n(o.uiSrefActiveEq||"",!1)(e);try{s=e.$eval(o.uiSrefActive)}catch(t){}function h(t){t.promise.then($,J)}function p(){d(s)}function d(t){T(t)&&(f=[],B(t,function(t,n){var r=function(t,n){var r=Wr(t);v(r.state,e.$eval(r.paramExpr),n)};A(t)?r(t,n):P(t)&&B(t,function(t){r(t,n)})}))}function v(e,n,r){var o={state:t.get(e,Gr(i))||{name:e},params:n,activeClass:r};return f.push(o),function(){X(f)(o)}}function $(){var n=function(t){return t.split(/\s/).filter(G)},r=function(t){return t.map(function(t){return t.activeClass}).map(n).reduce(mt,[])},o=r(f).concat(n(a)).reduce(wt,[]),s=r(f.filter(function(e){return t.includes(e.state.name,e.params)})),u=!!f.filter(function(e){return t.is(e.state.name,e.params)}).length?n(a):[],c=s.concat(u).reduce(wt,[]),l=o.filter(function(t){return!Y(c,t)});e.$evalAsync(function(){c.forEach(function(t){return i.addClass(t)}),l.forEach(function(t){return i.removeClass(t)})})}d(s=s||n(o.uiSrefActive||"",!1)(e)),this.$$addStateInfo=function(t,e){if(!(T(s)&&f.length>0)){var n=v(t,e,s);return $(),n}},e.$on("$destroy",(u=r.stateRegistry.onStatesChanged(p),c=r.transitionService.onStart({},h),l=e.$on("$stateChangeSuccess",$),function(){u(),c(),l()})),r.globals.transition&&h(r.globals.transition),$()}]}}],r.module("ui.router.state").directive("uiSref",qr).directive("uiSrefActive",Lr).directive("uiSrefActiveEq",Lr).directive("uiState",Fr),Qr.$inject=["$state"],Xr.$inject=["$state"],r.module("ui.router.state").filter("isState",Qr).filter("includedByState",Xr),Br=["$view","$animate","$uiViewScroll","$interpolate","$q",function(t,e,n,i,o){var a={$cfg:{viewDecl:{$context:t._pluginapi._rootViewContext()}},$uiView:{}},s={count:0,restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(u,l,f){return function(u,l,h){var p,d,v,$,m,g=h.onload||"",y=h.autoscroll,w={enter:function(t,n,i){r.version.minor>2?e.enter(t,null,n).then(i):e.enter(t,null,n,i)},leave:function(t,n){r.version.minor>2?e.leave(t).then(n):e.leave(t,n)}},b=l.inheritedData("$uiView")||a,S=i(h.uiView||h.name||"")(u)||"$default",E={$type:"ng1",id:s.count++,name:S,fqn:b.$uiView.fqn?b.$uiView.fqn+"."+S:S,config:null,configUpdated:function(t){if(t&&!(t instanceof Er))return;if(e=$,n=t,e===n)return;var e,n;Zt.traceUIViewConfigUpdated(E,t&&t.viewDecl&&t.viewDecl.$context),$=t,x(t)},get creationContext(){var t=c("$cfg.viewDecl.$context")(b),e=c("$uiView.creationContext")(b);return t||e}};function x(t){var e=u.$new(),r=o.defer(),i=o.defer(),a={$cfg:t,$uiView:E},s={$animEnter:r.promise,$animLeave:i.promise,$$animLeave:i};e.$emit("$viewContentLoading",S);var c=f(e,function(t){t.data("$uiViewAnim",s),t.data("$uiView",a),w.enter(t,l,function(){r.resolve(),v&&v.$emit("$viewContentAnimationEnded"),(C(y)&&!y||u.$eval(y))&&n(t)}),function(){if(p&&(Zt.traceUIViewEvent("Removing (previous) el",p.data("$uiView")),p.remove(),p=null),v&&(Zt.traceUIViewEvent("Destroying scope",E),v.$destroy(),v=null),d){var t=d.data("$uiViewAnim");Zt.traceUIViewEvent("Animate out",t),w.leave(d,function(){t.$$animLeave.resolve(),p=null}),p=d,d=null}}()});d=c,(v=e).$emit("$viewContentLoaded",t||$),v.$eval(g)}Zt.traceUIViewEvent("Linking",E),l.data("$uiView",{$uiView:E}),x(),m=t.registerUIView(E),u.$on("$destroy",function(){Zt.traceUIViewEvent("Destroying/Unregistering",E),m()})}}};return s}],ti.$inject=["$compile","$controller","$transitions","$view","$q","$timeout"];var ei="function"==typeof r.module("ui.router").component,ni=0;function ri(t,e,n,r,i){!R(n.$onInit)||i.viewDecl.component&&ei||n.$onInit();var o=Ot(i.path).state.self,a={bind:n};if(R(n.uiOnParamsChanged)){var s=new ge(i.path).getResolvable("$transition$").data;r.$on("$destroy",e.onSuccess({},function(t){if(t!==s&&-1===t.exiting().indexOf(o)){var e=t.params("to"),r=t.params("from"),i=t.treeChanges().to.map(function(t){return t.paramSchema}).reduce(mt,[]),a=t.treeChanges().from.map(function(t){return t.paramSchema}).reduce(mt,[]),u=i.filter(function(t){var n=a.indexOf(t);return-1===n||!a[n].type.equals(e[t.id],r[t.id])});if(u.length){var c=u.map(function(t){return t.id}),l=lt(e,function(t,e){return-1!==c.indexOf(e)});n.uiOnParamsChanged(l,t)}}},a))}if(R(n.uiCanExit)){var u=ni++,c="_uiCanExitIds",l=function(t){return!!t&&(t[c]&&!0===t[c][u]||l(t.redirectedFrom()))},f={exiting:o.name};r.$on("$destroy",e.onBefore(f,function(e){var r,i=e[c]=e[c]||{};return l(e)||(r=t.when(n.uiCanExit(e))).then(function(t){return i[u]=!1!==t}),r},a))}}r.module("ui.router.state").directive("uiView",Br),r.module("ui.router.state").directive("uiView",ti),r.module("ui.router.state").provider("$uiViewScroll",function(){var t=!1;this.useAnchorScroll=function(){t=!0},this.$get=["$anchorScroll","$timeout",function(e,n){return t?e:function(t){return n(function(){t[0].scrollIntoView()},0,!1)}}]});t.default="ui.router",t.core=gr,t.watchDigests=Hr,t.getLocals=zr,t.getNg1ViewConfigFactory=yr,t.ng1ViewsBuilder=br,t.Ng1ViewConfig=Er,t.StateProvider=kr,t.UrlRouterProvider=Ar,t.root=H,t.fromJson=F,t.toJson=L,t.forEach=B,t.extend=z,t.equals=W,t.identity=G,t.noop=J,t.createProxyFunctions=K,t.inherit=Z,t.inArray=Y,t._inArray=Q,t.removeFrom=X,t._removeFrom=tt,t.pushTo=et,t._pushTo=nt,t.deregAll=rt,t.defaults=it,t.mergeR=ot,t.ancestors=at,t.pick=st,t.omit=ut,t.pluck=ct,t.filter=lt,t.find=ft,t.mapObj=ht,t.map=pt,t.values=dt,t.allTrueR=vt,t.anyTrueR=$t,t.unnestR=mt,t.flattenR=gt,t.pushR=yt,t.uniqR=wt,t.unnest=bt,t.flatten=St,t.assertPredicate=Et,t.assertMap=xt,t.assertFn=Ct,t.pairs=_t,t.arrayTuples=kt,t.applyPairs=Rt,t.tail=Ot,t.copy=At,t._extend=Tt,t.silenceUncaughtInPromise=jt,t.silentRejection=It,t.notImplemented=D,t.services=U,t.Glob=w,t.curry=i,t.compose=o,t.pipe=a,t.prop=s,t.propEq=u,t.parse=c,t.not=l,t.and=f,t.or=h,t.all=p,t.any=d,t.is=v,t.eq=$,t.val=m,t.invoke=g,t.pattern=y,t.isUndefined=x,t.isDefined=C,t.isNull=_,t.isNullOrUndefined=k,t.isFunction=R,t.isNumber=O,t.isString=A,t.isObject=T,t.isArray=P,t.isDate=V,t.isRegExp=j,t.isState=I,t.isInjectable=M,t.isPromise=N,t.Queue=Mt,t.maxLength=Se,t.padString=Ee,t.kebobString=xe,t.functionToString=Ce,t.fnToString=_e,t.stringify=Oe,t.beforeAfterSubstr=Ae,t.hostRegex=Te,t.stripLastPathElement=Pe,t.splitHash=Ve,t.splitQuery=je,t.splitEqual=Ie,t.trimHashVal=Me,t.splitOnDelim=Ne,t.joinNeighborsR=De,t.Trace=Kt,t.trace=Zt,t.Param=ue,t.ParamTypes=He,t.StateParams=qe,t.ParamType=ie,t.PathNode=ce,t.PathUtils=le,t.resolvePolicies=pe,t.defaultResolvePolicy=fe,t.Resolvable=he,t.NATIVE_INJECTOR_TOKEN=me,t.ResolveContext=ge,t.resolvablesBuilder=Ze,t.StateBuilder=Ye,t.StateObject=b,t.StateMatcher=Qe,t.StateQueueManager=Xe,t.StateRegistry=tn,t.StateService=Bn,t.TargetState=Yt,t.HookBuilder=re,t.matchState=te,t.RegisteredHook=ee,t.makeEvent=ne,t.Rejection=Dt,t.Transition=be,t.TransitionHook=Xt,t.TransitionEventType=Un,t.defaultTransOpts=Fn,t.TransitionService=Ln,t.UrlMatcher=rn,t.UrlMatcherFactory=on,t.UrlRouter=cn,t.UrlRuleFactory=an,t.BaseUrlRule=sn,t.UrlService=yn,t.ViewService=fn,t.UIRouterGlobals=hn,t.UIRouter=bn,t.$q=zn,t.$injector=Kn,t.BaseLocationServices=ir,t.HashLocationService=ar,t.MemoryLocationService=ur,t.PushStateLocationService=lr,t.MemoryLocationConfig=fr,t.BrowserLocationConfig=hr,t.keyValsToObjectR=Zn,t.getParams=Yn,t.parseUrl=Qn,t.buildUrl=Xn,t.locationPluginFactory=tr,t.servicesPlugin=pr,t.hashLocationPlugin=dr,t.pushStateLocationPlugin=vr,t.memoryLocationPlugin=$r,t.UIRouterPluginBase=mr,Object.defineProperty(t,"__esModule",{value:!0})}),angular.module("app",["ui.router"]),function(){function t(t,e){t.state("dashboard",{url:"/dashboard",component:"dashboard"}).state("seeker",{url:"/seeker",component:"seeker"}).state("seekerAdd",{url:"/seeker/add",component:"seekerAdd"}).state("seekerEdit",{url:"/seeker/edit",component:"seekerEdit"}).state("supplier",{url:"/supplier",component:"supplier"}).state("supplierAdd",{url:"/supplier/add",component:"supplierAdd"}).state("supplierEdit",{url:"/supplier/edit",component:"supplierEdit"}).state("jobs",{url:"/jobs",component:"jobs"}),e.when("/","dashboard").when("","dashboard")}angular.module("app").config(t),t.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){function t(){}angular.module("app").controller("AppController",t),t.$inject=[]}(),function(){function t(){this.openSideBar=function(){document.getElementsByClassName("side-nav__wrapper")[0].classList.add("side-nav__wrapper--open")}}angular.module("app").controller("NavbarController",t),t.$inject=[]}(),function(){function t(){var t=document.getElementsByClassName("side-nav__wrapper")[0];this.closeSideBar=function(){t.classList.remove("side-nav__wrapper--open")}}angular.module("app").controller("SideNavController",t),t.$inject=[]}(),function(){function t(){}angular.module("app").controller("DashboardController",t),t.$inject=[]}(),function(){function t(){}angular.module("app").controller("JobsController",t),t.$inject=[]}(),function(){function t(){}angular.module("app").controller("SeekerController",t),t.$inject=[]}(),function(){function t(){}angular.module("app").controller("SeekerAddController",t),t.$inject=[]}(),function(){function t(){}angular.module("app").controller("SeekerEditController",t),t.$inject=[]}(),function(){function t(){}angular.module("app").controller("SupplierController",t),t.$inject=[]}(),function(){function t(){}angular.module("app").controller("SupplierAddController",t),t.$inject=[]}(),function(){function t(){}angular.module("app").controller("SupplierEditController",t),t.$inject=[]}(),angular.module("app").component("app",{templateUrl:"./src/app/app.template.html",controller:"AppController",controllerAs:"vm"}),angular.module("app").component("navbar",{templateUrl:"./src/components/navbar/navbar.template.html",controller:"NavbarController",controllerAs:"vm"}),angular.module("app").component("sideNav",{templateUrl:"./src/components/sideNav/sidenav.template.html",controller:"SideNavController",controllerAs:"vm"}),angular.module("app").component("dashboard",{templateUrl:"./src/views/dashboard/dashboard.template.html",controller:"DashboardController",controllerAs:"vm"}),angular.module("app").component("jobs",{templateUrl:"./src/views/jobs/jobs.template.html",controller:"JobsController",controllerAs:"vm"}),angular.module("app").component("seeker",{templateUrl:"./src/views/seeker/seeker.template.html",controller:"SeekerController",controllerAs:"vm"}),angular.module("app").component("seekerAdd",{templateUrl:"./src/views/seekerAdd/seeker-add.template.html",controller:"SeekerAddController",controllerAs:"vm"}),angular.module("app").component("seekerEdit",{templateUrl:"./src/views/seekerEdit/seeker-edit.template.html",controller:"SeekerEditController",controllerAs:"vm"}),angular.module("app").component("supplier",{templateUrl:"./src/views/supplier/supplier.template.html",controller:"SupplierController",controllerAs:"vm"}),angular.module("app").component("supplierAdd",{templateUrl:"./src/views/supplierAdd/supplier-add.template.html",controller:"SupplierAddController",controllerAs:"vm"}),angular.module("app").component("supplierEdit",{templateUrl:"./src/views/supplierEdit/supplier-edit.template.html",controller:"SupplierEditController",controllerAs:"vm"});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
